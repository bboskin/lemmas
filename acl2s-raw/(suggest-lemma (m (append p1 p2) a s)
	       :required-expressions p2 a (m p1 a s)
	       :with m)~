bash-3.2$ pwd
/Users/benboskin
bash-3.2$ cd lemmas/acl2s-raw/
bash-3.2$ ccl-acl2s
bash: ccl-acl2s: command not found
bash-3.2$ source ~/.bash_profile
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.90 seconds (prove: 0.00, print: 0.00, other: 2.90)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(suggest-lemma (reverse (append x y))
	       :with reverse append)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REVERSE (BINARY-APPEND X Y))
  (((TRUE-LISTP X))
   ((TRUE-LISTP (BINARY-APPEND X Y))
    (STRINGP (BINARY-APPEND X Y)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 821 (821 unique)
satisfied the hypotheses, and found 821 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '((NIL . 1) NIL)) (X NIL))
 -- ((Y NIL) (X '(488 15)))
 -- ((Y NIL) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '((NIL . 1) NIL)) (X NIL))
                  ((Y NIL) (X '(488 15)))
                  ((Y NIL) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X NIL)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) NIL)))) ((ACL2S::Y NIL) (ACL2S::X NIL))) '((ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 1 1 1) NIL)) NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: EQUAL
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (reverse (append x y))
	       :with reverse append)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REVERSE (BINARY-APPEND X Y))
  (((TRUE-LISTP X))
   ((TRUE-LISTP (BINARY-APPEND X Y))
    (STRINGP (BINARY-APPEND X Y)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 884 (884 unique)
satisfied the hypotheses, and found 884 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y NIL) (X '(25)))
 -- ((Y "A") (X NIL))
 -- ((Y '(-2 -1)) (X '(14)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y NIL) (X '(25)))
                  ((Y "A") (X NIL))
                  ((Y '(-2 -1)) (X '(14)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL 'NIL ACL2S::Q '(((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1) NIL))) ((ACL2S::Y (ACL2S::INTERNAL-STRING #\A)) (ACL2S::X NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1) NIL) (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) NIL)))))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: WALK
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  3.00 seconds (prove: 0.00, print: 0.00, other: 3.00)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(suggest-lemma (reverse (append x y))
	       :with reverse append)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REVERSE (BINARY-APPEND X Y))
  (((TRUE-LISTP X))
   ((TRUE-LISTP (BINARY-APPEND X Y))
    (STRINGP (BINARY-APPEND X Y)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 821 (821 unique)
satisfied the hypotheses, and found 821 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '((NIL . 1) NIL)) (X NIL))
 -- ((Y NIL) (X '(488 15)))
 -- ((Y NIL) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '((NIL . 1) NIL)) (X NIL))
                  ((Y NIL) (X '(488 15)))
                  ((Y NIL) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X NIL)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) NIL)))) ((ACL2S::Y NIL) (ACL2S::X NIL))) '((ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 1 1 1) NIL)) NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: EQUAL
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.88 seconds (prove: 0.00, print: 0.00, other: 2.88)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(suggest-lemma (reverse (append x y))
	       :with reverse append)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REVERSE (BINARY-APPEND X Y))
  (((TRUE-LISTP X))
   ((TRUE-LISTP (BINARY-APPEND X Y))
    (STRINGP (BINARY-APPEND X Y)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 821 (821 unique)
satisfied the hypotheses, and found 821 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '((NIL . 1) NIL)) (X NIL))
 -- ((Y NIL) (X '(488 15)))
 -- ((Y NIL) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '((NIL . 1) NIL)) (X NIL))
                  ((Y NIL) (X '(488 15)))
                  ((Y NIL) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X NIL)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) NIL)))) ((ACL2S::Y NIL) (ACL2S::X NIL))) '((ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 1 1 1) NIL)) NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (OR (TRUE-LISTP (BINARY-APPEND ACL2S::X ACL2S::Y)) (STRINGP (BINARY-APPEND ACL2S::X ACL2S::Y)))) (EQUAL (REVERSE (APPEND ACL2S::X ACL2S::Y)) (REVERSE (APPEND ACL2S::X ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 507 (507 unique)
satisfied the hypotheses, and found 0 counterexamples and 507 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(25)))
 -- ((Y "A") (X NIL))
 -- ((Y '(-2 -1)) (X '(14)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (IMPLIES (AND (TRUE-LISTP X)
              (OR (TRUE-LISTP (BINARY-APPEND X Y))
                  (STRINGP (BINARY-APPEND X Y))))
         (EQUAL (REVERSE (APPEND X Y))
                (REVERSE (APPEND X Y))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 in (x ls)
  :input-contract (true-listp ls)
  :output-contract (booleanp (in x ls))
  (cond
   ((endp ls) nil)
   ((equal x (car ls)) t)
   (t (in x (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (EQUAL X (CAR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.47 seconds
Form:  ( DEFUN IN ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN-CONTRACT ...)
Time:  0.15 seconds (prove: 0.11, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.15 seconds (prove: 0.11, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS IN ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.24 seconds

Function Name : IN 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.00 seconds (prove: 0.21, print: 0.00, other: 0.78)
Prover steps counted:  3676
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 nodups (ls)
  :input-contract (true-listp ls)
  :output-contract (booleanp (nodups ls))
  (cond
   ((endp ls) t)
   ((in (car ls) (cdr ls)) nil)
   (t (nodups (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) (CDR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.44 seconds
Form:  ( DEFUN NODUPS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NODUPS-CONTRACT ...)
Time:  0.19 seconds (prove: 0.16, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.19 seconds (prove: 0.16, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS NODUPS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.25 seconds

Function Name : NODUPS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.00 seconds (prove: 0.25, print: 0.00, other: 0.75)
Prover steps counted:  6238
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 remdups (ls)
  :input-contract (true-listp ls)
  :output-contract (true-listp (remdups ls))
  (cond
   ((endp ls) nil)
   ((in (car ls) (cdr ls))
    (remdups (cdr ls)))
   (t (cons (car ls) (remdups (cdr ls))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (IN (CAR LS) (CDR LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) (CDR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.62 seconds
Form:  ( DEFUN REMDUPS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM REMDUPS-CONTRACT ...)
Time:  0.22 seconds (prove: 0.18, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.22 seconds (prove: 0.18, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS REMDUPS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.28 seconds

Function Name : REMDUPS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.18 seconds (prove: 0.30, print: 0.00, other: 0.87)
Prover steps counted:  7703
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 remdupst (ls acc)
  :input-contract (and (true-listp ls) (true-listp acc))
  :output-contract (true-listp (remdupst ls acc))
  (cond
   ((endp ls) acc)
   ((in (car ls) acc)
    (remdupst (cdr ls) acc))
   (t (remdupst (cdr ls) (cons (car ls) acc)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CAR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CDR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (IN (CAR LS) ACC)
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CAR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CDR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) ACC))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.96 seconds
Form:  ( DEFUN REMDUPST ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM REMDUPST-CONTRACT ...)
Time:  0.30 seconds (prove: 0.22, print: 0.00, other: 0.08)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.30 seconds (prove: 0.22, print: 0.00, other: 0.09)
Form:  ( VERIFY-GUARDS REMDUPST ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.38 seconds

Function Name : REMDUPST 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.63 seconds (prove: 0.55, print: 0.00, other: 1.08)
Prover steps counted:  19237
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (remdupst ls acc)
	       :required-expressions remdups append reverse
	       :hyps (nodups acc))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REMDUPST LS ACC)
  (((TRUE-LISTP LS)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1026 examples across 3 subgoals, of which 684 (684 unique)
satisfied the hypotheses, and found 681 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC NIL) (LS '(NIL ACL2::A NIL NIL)))
 -- ((ACC '(-1 0)) (LS NIL))
 -- ((ACC NIL) (LS NIL))

Cases in which the conjecture is true include:
 [found in : "Goal'"]
 -- ((ACC '(0 0)) (LS '(4)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(0 0)) (LS '(5)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(NIL NIL)) (LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC NIL) (LS '(NIL ACL2::A NIL NIL)))
                  ((ACC '(-1 0)) (LS NIL))
                  ((ACC NIL) (LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS NIL)) ((ACL2S::ACC NIL) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::ACC) (APPEND ACL2S::ACC ACL2S::LS))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 24 examples across 1 subgoals, of which 19 (19 unique) satisfied
the hypotheses, and found 3 counterexamples and 16 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(-1 0)) (LS '(64)))
 -- ((ACC '(306 3)) (LS '(14 5)))
 -- ((ACC '(ACL2::A)) (LS '(#\A)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(81 2 1)) (LS NIL))
 -- ((ACC '(20)) (LS NIL))
 -- ((ACC '(513)) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(-1 0)) (LS '(64)))
                  ((ACC '(306 3)) (LS '(14 5)))
                  ((ACC '(ACL2::A)) (LS '(#\A)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 0 0 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS NIL)) ((ACL2S::ACC NIL) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1100 (1100 unique)
satisfied the hypotheses, and found 0 counterexamples and 1100 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(0)) (LS '(4)))
 -- ((ACC NIL) (LS '(-179)))
 -- ((ACC NIL) (LS NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REVERSE LS) ACC))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (remdupst ls acc)
	       :required-expressions remdups append reverse
	       :hyps (nodups acc))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REMDUPST LS ACC)
  (((TRUE-LISTP LS)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 654 (654 unique)
satisfied the hypotheses, and found 3 counterexamples and 651 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (TRUE-LISTP LS) (TRUE-LISTP ACC)) (NOT (NODUPS ACC)))
 -- ((ACC NIL) (LS NIL))
 -- ((ACC '(450)) (LS NIL))
 -- ((ACC '(1 0)) (LS NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(-1)) (LS '(ACL2::ABA)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC NIL) (LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(0)) (LS '(-71)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC NIL) (LS NIL))
                  ((ACC '(450)) (LS NIL))
                  ((ACC '(1 0)) (LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC NIL) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 0 1 1 1) NIL)) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS NIL))) '(NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 0 1 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (APPEND (ACL2S::REMDUPS ACL2S::ACC) (REVERSE ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 11 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 6 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(0)) (LS '(-1)))
 -- ((ACC '(ACL2::BAAAABB)) (LS '(97)))
 -- ((ACC '(175)) (LS '(-1 0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS '(-1 0)))
 -- ((ACC NIL) (LS NIL))
 -- ((ACC '(#\A)) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(0)) (LS '(-1)))
                  ((ACC '(ACL2::BAAAABB)) (LS '(97)))
                  ((ACC '(175)) (LS '(-1 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BAAAABB) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 0 1 1 1) NIL)) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BAAAABB) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 0 1) NIL))) NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 0 1 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 7 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(0)) (LS '(ACL2::BA ACL2::BA ACL2::A)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(0)) (LS '(1)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(0 -1/2)) (LS '(0 0)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS '(-1)))
 -- ((ACC NIL) (LS NIL))
 -- ((ACC NIL) (LS '(-119 6)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(0))
                   (LS '(ACL2::BA ACL2::BA ACL2::A)))
                  ((ACC '(0)) (LS '(1)))
                  ((ACC '(0 -1/2)) (LS '(0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BAAAABB) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 0 1 1 1) NIL)) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BAAAABB) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 0 1) NIL))) NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 0 1 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 15 examples across 1 subgoals, of which 11 (11 unique) satisfied
the hypotheses, and found 3 counterexamples and 8 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(#\F #\H #\I #\M)) (LS '(783)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(0)) (LS '(-1)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC NIL) (LS '(#\A #\B #\A #\B)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS '(1)))
 -- ((ACC NIL) (LS '(0)))
 -- ((ACC NIL) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(#\F #\H #\I #\M)) (LS '(783)))
                  ((ACC '(0)) (LS '(-1)))
                  ((ACC NIL) (LS '(#\A #\B #\A #\B)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\F) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\H) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\I) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\M) NIL))))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 0 0 0 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) NIL)))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BAAAABB) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 0 1 1 1) NIL)) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 0 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\F) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\H) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\I) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\M) NIL))))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BAAAABB) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 0 1) NIL))) NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 0 1 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 11 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 3 counterexamples and 4 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(804 23)) (LS '(108 8 0 0)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(-1)) (LS '(NIL NIL)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC NIL) (LS '(103 0 1 0)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(336)) (LS NIL))
 -- ((ACC '(0)) (LS NIL))
 -- ((ACC NIL) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(804 23)) (LS '(108 8 0 0)))
                  ((ACC '(-1)) (LS '(NIL NIL)))
                  ((ACC NIL) (LS '(103 0 1 0)))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  3.23 seconds (prove: 0.00, print: 0.00, other: 3.23)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 in (x ls)
  :input-contract (true-listp ls)
  :output-contract (booleanp (in x ls))
  (cond
   ((endp ls) nil)
   ((equal x (car ls)) t)
   (t (in x (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (EQUAL X (CAR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.49 seconds
Form:  ( DEFUN IN ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN-CONTRACT ...)
Time:  0.17 seconds (prove: 0.11, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.17 seconds (prove: 0.11, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS IN ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.24 seconds

Function Name : IN 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.01 seconds (prove: 0.20, print: 0.00, other: 0.80)
Prover steps counted:  3676
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 nodups (ls)
  :input-contract (true-listp ls)
  :output-contract (booleanp (nodups ls))
  (cond
   ((endp ls) t)
   ((in (car ls) (cdr ls)) nil)
   (t (nodups (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) (CDR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.49 seconds
Form:  ( DEFUN NODUPS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NODUPS-CONTRACT ...)
Time:  0.20 seconds (prove: 0.16, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.20 seconds (prove: 0.16, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS NODUPS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.26 seconds

Function Name : NODUPS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.04 seconds (prove: 0.26, print: 0.00, other: 0.78)
Prover steps counted:  6238
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 remdups (ls)
  :input-contract (true-listp ls)
  :output-contract (true-listp (remdups ls))
  (cond
   ((endp ls) nil)
   ((in (car ls) (cdr ls))
    (remdups (cdr ls)))
   (t (cons (car ls) (remdups (cdr ls))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (IN (CAR LS) (CDR LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) (CDR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.61 seconds
Form:  ( DEFUN REMDUPS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM REMDUPS-CONTRACT ...)
Time:  0.23 seconds (prove: 0.18, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.24 seconds (prove: 0.18, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS REMDUPS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.30 seconds

Function Name : REMDUPS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.21 seconds (prove: 0.30, print: 0.00, other: 0.91)
Prover steps counted:  7703
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 remdupst (ls acc)
  :input-contract (and (true-listp ls) (true-listp acc))
  :output-contract (true-listp (remdupst ls acc))
  (cond
   ((endp ls) acc)
   ((in (car ls) acc)
    (remdupst (cdr ls) acc))
   (t (remdupst (cdr ls) (cons (car ls) acc)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CAR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CDR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (IN (CAR LS) ACC)
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CAR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CDR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) ACC))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.96 seconds
Form:  ( DEFUN REMDUPST ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM REMDUPST-CONTRACT ...)
Time:  0.28 seconds (prove: 0.22, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.28 seconds (prove: 0.22, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS REMDUPST ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.36 seconds

Function Name : REMDUPST 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.62 seconds (prove: 0.55, print: 0.00, other: 1.07)
Prover steps counted:  19237
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (remdupst ls acc)
	       :required-expressions remdups append reverse
	       :hyps (nodups acc))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REMDUPST LS ACC)
  (((TRUE-LISTP LS)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1010 examples across 3 subgoals, of which 783 (783 unique)
satisfied the hypotheses, and found 780 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC NIL) (LS '(ACL2::|a|)))
 -- ((ACC NIL) (LS '((1 . T) T 0)))
 -- ((ACC NIL) (LS '(0 0)))

Cases in which the conjecture is true include:
 [found in : "Goal'"]
 -- ((ACC '(0 NIL NIL NIL)) (LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(NIL 0 NIL)) (LS '(ACL2::A 0 NIL)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(0 0)) (LS '(ACL2::A ACL2::A 0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC NIL) (LS '(ACL2::|a|)))
                  ((ACC NIL) (LS '((1 . T) T 0)))
                  ((ACC NIL) (LS '(0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-SYMBOL \a) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) T) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-SYMBOL \a) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) T) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1091 (1091 unique)
satisfied the hypotheses, and found 0 counterexamples and 1091 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(0)) (LS '(ACL2::BBAABA ACL2::A)))
 -- ((ACC NIL) (LS '(-1)))
 -- ((ACC NIL) (LS NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REVERSE LS) ACC))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (remdupst ls acc)
	       :required-expressions append reverse remdups
	       :hyps (nodups acc))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REMDUPST LS ACC)
  (((TRUE-LISTP LS)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 877 (877 unique)
satisfied the hypotheses, and found 3 counterexamples and 874 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (TRUE-LISTP LS) (TRUE-LISTP ACC)) (NOT (NODUPS ACC)))
 -- ((ACC NIL) (LS '(0)))
 -- ((ACC NIL) (LS '(4 1)))
 -- ((ACC NIL) (LS NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(3)) (LS '(-151)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(12 14)) (LS '(-1 -1)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC NIL) (LS '(0 T)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC NIL) (LS '(0)))
                  ((ACC NIL) (LS '(4 1)))
                  ((ACC NIL) (LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(APPEND REVERSE ACL2S::REMDUPS) ACL2S::Q '(((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)) NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (APPEND (REVERSE ACL2S::LS) (ACL2S::REMDUPS ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 51 examples across 1 subgoals, of which 44 (44 unique) satisfied
the hypotheses, and found 3 counterexamples and 41 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(0)) (LS '(0 0)))
 -- ((ACC '(4)) (LS '(0 0)))
 -- ((ACC '(5)) (LS '(0 0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(499 21)) (LS NIL))
 -- ((ACC '((#\A . 1) NIL)) (LS NIL))
 -- ((ACC '(0 1)) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(0)) (LS '(0 0)))
                  ((ACC '(4)) (LS '(0 0)))
                  ((ACC '(5)) (LS '(0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(APPEND REVERSE ACL2S::REMDUPS) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)) NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (APPEND (REVERSE NIL) (ACL2S::REMDUPS (REVERSE (APPEND ACL2S::ACC ACL2S::LS)))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 15 examples across 1 subgoals, of which 12 (12 unique) satisfied
the hypotheses, and found 3 counterexamples and 9 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(-165 1)) (LS '(#C(1/2 4/3))))
 -- ((ACC '(-1 0)) (LS NIL))
 -- ((ACC '(#\F #\A #\D #\B)) (LS NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS '(0 1)))
 -- ((ACC NIL) (LS NIL))
 -- ((ACC NIL) (LS '(-1 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(-165 1)) (LS '(#C(1/2 4/3))))
                  ((ACC '(-1 0)) (LS NIL))
                  ((ACC '(#\F #\A #\D #\B)) (LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(APPEND REVERSE ACL2S::REMDUPS) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 0 0 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS NIL NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\F) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\D) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) NIL))))) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 0 0 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\F) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\D) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)) NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: WALK
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (remdupst ls acc)
	       :required-expressions remdups append reverse
	       :hyps (nodups acc))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REMDUPST LS ACC)
  (((TRUE-LISTP LS)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 794 (794 unique)
satisfied the hypotheses, and found 3 counterexamples and 791 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (TRUE-LISTP LS) (TRUE-LISTP ACC)) (NOT (NODUPS ACC)))
 -- ((ACC NIL) (LS '(111 1)))
 -- ((ACC '(139 25 1)) (LS NIL))
 -- ((ACC NIL) (LS '(ACL2::LE)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(T)) (LS '(0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC NIL) (LS '(24 5)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(63)) (LS '(NIL 0 NIL NIL NIL)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC NIL) (LS '(111 1)))
                  ((ACC '(139 25 1)) (LS NIL))
                  ((ACC NIL) (LS '(ACL2::LE)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::LS NIL)) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL LE) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL LE) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (APPEND (ACL2S::REMDUPS ACL2S::ACC) (REVERSE ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 24 examples across 1 subgoals, of which 12 (12 unique) satisfied
the hypotheses, and found 3 counterexamples and 9 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(15 1)) (LS '(0 T)))
 -- ((ACC NIL) (LS '((T T) NIL NIL)))
 -- ((ACC NIL) (LS '(0 0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS '(ACL2::DBB ACL2::A)))
 -- ((ACC NIL) (LS NIL))
 -- ((ACC NIL) (LS '(0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(15 1)) (LS '(0 T)))
                  ((ACC NIL) (LS '((T T) NIL NIL)))
                  ((ACC NIL) (LS '(0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::LS NIL)) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL LE) NIL)))) '((ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL LE) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 19 examples across 1 subgoals, of which 14 (14 unique) satisfied
the hypotheses, and found 3 counterexamples and 11 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(2 0)) (LS '(7)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(287 3 1)) (LS '(-1)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(0)) (LS '(-27 NIL)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '("A" ACL2::A 0)) (LS NIL))
 -- ((ACC NIL) (LS NIL))
 -- ((ACC '((-1/2 -1) (-1) "A" NIL)) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(2 0)) (LS '(7)))
                  ((ACC '(287 3 1)) (LS '(-1)))
                  ((ACC '(0)) (LS '(-27 NIL)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1 1) (ACL2S::INTERNAL-CONS NIL NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::LS NIL)) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL LE) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL LE) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 12 examples across 1 subgoals, of which 10 (10 unique) satisfied
the hypotheses, and found 3 counterexamples and 7 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(206 -11 0)) (LS '((T) 0)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(-1 0)) (LS '(ACL2::A ACL2::A ACL2::A)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(-13)) (LS '((T T) "A")))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS NIL))
 -- ((ACC NIL) (LS '(1)))
 -- ((ACC '(135)) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(206 -11 0)) (LS '((T) 0)))
                  ((ACC '(-1 0))
                   (LS '(ACL2::A ACL2::A ACL2::A)))
                  ((ACC '(-13)) (LS '((T T) "A")))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1 1) (ACL2S::INTERNAL-CONS NIL NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::LS NIL)) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL LE) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL LE) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 6 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(ACL2::BDE)) (LS '("A" NIL NIL)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(0)) (LS '(3)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(1)) (LS '(2 -1)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS '(3 -1)))
(suggest-lemma (remdupst ls acc)
	       :required-expressions remdups append reverse
	       :hyps (nodups acc)) -- ((ACC NIL) (LS NIL))
 -- ((ACC NIL) (LS '(ACL2::BAGD)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(ACL2::BDE)) (LS '("A" NIL NIL)))
                  ((ACC '(0)) (LS '(3)))
                  ((ACC '(1)) (LS '(2 -1)))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !> -- ((ACC NIL) (LS NIL))
 -- ((ACC NIL) (LS '(ACL2::BAGD)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(ACL2::BDE)) (LS '("A" NIL NIL)))
                  ((ACC '(0)) (LS '(3)))
                  ((ACC '(1)) (LS '(2 -1)))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as --, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Function (and macro) applications in ACL2
must begin with a symbol or LAMBDA expression.  ((ACC NIL) (LS NIL))
is not of this form.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as --, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Function (and macro) applications in ACL2
must begin with a symbol or LAMBDA expression.  
((ACC NIL) (LS '(ACL2::BAGD))) is not of this form.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ITEST?, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOUND, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as A, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as COUNTEREXAMPLE.,
are not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol T (in package "COMMON-LISP") has
neither a function nor macro definition in ACL2.  Moreover, this symbol
is in the main Lisp package; hence, you cannot define it in ACL2. 
See :DOC near-misses.  Note:  this error occurred in the context 
(T (:FALSIFIABLE ((ACC '#) (LS '#)) ((ACC '#) (LS '#)) ((ACC '#) (LS '#)))).
(See :DOC set-iprint to be able to see elided values in this message.)

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>>BYE., are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Function (and macro) applications in ACL2
must begin with a symbol or LAMBDA expression.  
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")
is not of this form.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14DDB266>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14DDB266>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(suggest-lemma (remdupst ls acc)
	       :required-expressions remdups append reverse
	       :hyps (nodups acc))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REMDUPST LS ACC)
  (((TRUE-LISTP LS)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 11 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 3 counterexamples and 5 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(625)) (LS '(-15 0)))
 -- ((ACC '(30)) (LS '((3 -1) 0 NIL 0)))
 -- ((ACC NIL) (LS '(0 0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS '(NIL)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC NIL) (LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC NIL) (LS '(0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(625)) (LS '(-15 0)))
                  ((ACC '(30)) (LS '((3 -1) 0 NIL 0)))
                  ((ACC NIL) (LS '(0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1 0 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1 0 0 1) NIL))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 9 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(7)) (LS '(1 0 1)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC NIL) (LS '((#\B #\A #\B #\A #\A #\A) NIL T NIL NIL)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '("A" 0)) (LS '(-1)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(-1 0)) (LS NIL))
 -- ((ACC NIL) (LS '(22)))
 -- ((ACC NIL) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(7)) (LS '(1 0 1)))
                  ((ACC NIL)
                   (LS '((#\B #\A #\B #\A #\A #\A)
                         NIL T NIL NIL)))
                  ((ACC '("A" 0)) (LS '(-1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL)))))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1 0 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) NIL))) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL)))))) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1 0 0 1) NIL))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 11 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 3 counterexamples and 4 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(0 T)) (LS '(ACL2::BA ACL2::A)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(595)) (LS '(NIL)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(ACL2::BBAA)) (LS '(-49)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS '(5 0)))
 -- ((ACC NIL) (LS '(91)))
 -- ((ACC NIL) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(0 T)) (LS '(ACL2::BA ACL2::A)))
                  ((ACC '(595)) (LS '(NIL)))
                  ((ACC '(ACL2::BBAA)) (LS '(-49)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 0 1 0 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS NIL NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 0 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL)))))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1 0 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 0 1 0 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) NIL))) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL)))))) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1 0 0 1) NIL))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 8 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(935)) (LS '(10 4 0)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC '(0)) (LS '(0 0 0)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC NIL) (LS '(4 0 0 0)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(0 -1)) (LS NIL))
 -- ((ACC NIL) (LS NIL))
 -- ((ACC '(-2)) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(935)) (LS '(10 4 0)))
                  ((ACC '(0)) (LS '(0 0 0)))
                  ((ACC NIL) (LS '(4 0 0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 0 1 0 1 1 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 0 1 0 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS NIL NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 0 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL)))))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1 0 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 0 1 0 1 1 1) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 0 1 0 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) NIL))) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL)))))) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1 0 0 1) NIL))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  3.01 seconds (prove: 0.00, print: 0.00, other: 3.01)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 in (x ls)
  :input-contract (true-listp ls)
  :output-contract (booleanp (in x ls))
  (cond
   ((endp ls) nil)
   ((equal x (car ls)) t)
   (t (in x (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (EQUAL X (CAR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.48 seconds
Form:  ( DEFUN IN ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN-CONTRACT ...)
Time:  0.17 seconds (prove: 0.11, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.17 seconds (prove: 0.11, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS IN ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.23 seconds

Function Name : IN 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.00 seconds (prove: 0.20, print: 0.00, other: 0.80)
Prover steps counted:  3676
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 nodups (ls)
  :input-contract (true-listp ls)
  :output-contract (booleanp (nodups ls))
  (cond
   ((endp ls) t)
   ((in (car ls) (cdr ls)) nil)
   (t (nodups (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) (CDR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.46 seconds
Form:  ( DEFUN NODUPS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NODUPS-CONTRACT ...)
Time:  0.20 seconds (prove: 0.16, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.21 seconds (prove: 0.16, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS NODUPS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.27 seconds

Function Name : NODUPS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.02 seconds (prove: 0.24, print: 0.00, other: 0.78)
Prover steps counted:  6238
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 remdups (ls)
  :input-contract (true-listp ls)
  :output-contract (true-listp (remdups ls))
  (cond
   ((endp ls) nil)
   ((in (car ls) (cdr ls))
    (remdups (cdr ls)))
   (t (cons (car ls) (remdups (cdr ls))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (IN (CAR LS) (CDR LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) (CDR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.62 seconds
Form:  ( DEFUN REMDUPS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM REMDUPS-CONTRACT ...)
Time:  0.24 seconds (prove: 0.18, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.24 seconds (prove: 0.18, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS REMDUPS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.30 seconds

Function Name : REMDUPS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.21 seconds (prove: 0.30, print: 0.00, other: 0.91)
Prover steps counted:  7703
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 remdupst (ls acc)
  :input-contract (and (true-listp ls) (true-listp acc))
  :output-contract (true-listp (remdupst ls acc))
  (cond
   ((endp ls) acc)
   ((in (car ls) acc)
    (remdupst (cdr ls) acc))
   (t (remdupst (cdr ls) (cons (car ls) acc)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CAR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CDR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (IN (CAR LS) ACC)
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CAR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CDR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) ACC))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.98 seconds
Form:  ( DEFUN REMDUPST ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM REMDUPST-CONTRACT ...)
Time:  0.28 seconds (prove: 0.22, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.28 seconds (prove: 0.22, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS REMDUPST ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.36 seconds

Function Name : REMDUPST 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.66 seconds (prove: 0.54, print: 0.00, other: 1.12)
Prover steps counted:  19237
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (remdupst ls acc)
	       :required-expressions append reverse remdups
	       :hyps (nodups acc))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REMDUPST LS ACC)
  (((TRUE-LISTP LS)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1010 examples across 3 subgoals, of which 783 (783 unique)
satisfied the hypotheses, and found 780 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC NIL) (LS '(ACL2::|a|)))
 -- ((ACC NIL) (LS '((1 . T) T 0)))
 -- ((ACC NIL) (LS '(0 0)))

Cases in which the conjecture is true include:
 [found in : "Goal'"]
 -- ((ACC '(0 NIL NIL NIL)) (LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(NIL 0 NIL)) (LS '(ACL2::A 0 NIL)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(0 0)) (LS '(ACL2::A ACL2::A 0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC NIL) (LS '(ACL2::|a|)))
                  ((ACC NIL) (LS '((1 . T) T 0)))
                  ((ACC NIL) (LS '(0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(APPEND REVERSE ACL2S::REMDUPS) ACL2S::Q '(((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-SYMBOL \a) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) T) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-SYMBOL \a) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) T) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (APPEND (REVERSE ACL2S::ACC) (ACL2S::REMDUPS (REVERSE ACL2S::LS))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 11 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(216 14)) (LS '(14)))
 -- ((ACC '(0 NIL)) (LS NIL))
 -- ((ACC '(0)) (LS '(ACL2::BBAABA ACL2::A)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS '(NIL 0 "A" NIL)))
 -- ((ACC NIL) (LS '(-1)))
 -- ((ACC NIL) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(216 14)) (LS '(14)))
                  ((ACC '(0 NIL)) (LS NIL))
                  ((ACC '(0))
                   (LS '(ACL2::BBAABA ACL2::A)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(APPEND REVERSE ACL2S::REMDUPS) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAABA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-SYMBOL \a) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) T) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAABA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-SYMBOL \a) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) T) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (remdupst ls acc)
	       :required-expressions remdups append reverse
	       :hyps (nodups acc))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REMDUPST LS ACC)
  (((TRUE-LISTP LS)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1021 examples across 3 subgoals, of which 797 (797 unique)
satisfied the hypotheses, and found 794 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC NIL) (LS NIL))
 -- ((ACC '(0)) (LS NIL))
 -- ((ACC '(#C(1 1/4))) (LS NIL))

Cases in which the conjecture is true include:
 [found in : "Goal'"]
 -- ((ACC '(-12 0 0)) (LS '(0 0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(0 0)) (LS '(-304)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(0 0)) (LS '(267 3)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC NIL) (LS NIL))
                  ((ACC '(0)) (LS NIL))
                  ((ACC '(#C(1 1/4))) (LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC NIL) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::LS NIL))) '(NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS NIL NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::ACC) ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 7 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 3 counterexamples and 4 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(-1/3 -1)) (LS '(0 0)))
 -- ((ACC '(-2)) (LS '(11)))
 -- ((ACC '(0)) (LS '(-4)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS '(0)))
 -- ((ACC NIL) (LS '(-1)))
 -- ((ACC NIL) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(-1/3 -1)) (LS '(0 0)))
                  ((ACC '(-2)) (LS '(11)))
                  ((ACC '(0)) (LS '(-4)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS NIL NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (APPEND (ACL2S::REMDUPS ACL2S::LS) (REVERSE (REVERSE ACL2S::ACC))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 14 examples across 1 subgoals, of which 11 (11 unique) satisfied
the hypotheses, and found 3 counterexamples and 8 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(-1 0)) (LS '(-1)))
 -- ((ACC NIL) (LS '(#C(2 3) 0 0 0)))
 -- ((ACC NIL) (LS '(ACL2::A NIL NIL)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS NIL))
 -- ((ACC '(20)) (LS '(0)))
 -- ((ACC '(0)) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(-1 0)) (LS '(-1)))
                  ((ACC NIL) (LS '(#C(2 3) 0 0 0)))
                  ((ACC NIL) (LS '(ACL2::A NIL NIL)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS NIL NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1110 (1110 unique)
satisfied the hypotheses, and found 0 counterexamples and 1110 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (LS NIL))
 -- ((ACC '(-1 0)) (LS '(0)))
 -- ((ACC '(-1)) (LS NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REVERSE LS) ACC))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm remdupst-lemma
  (IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REVERSE LS) ACC)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Four induction schemes are suggested
by this conjecture.  These merge into two derived induction schemes.
However, one of these is flawed and so we are left with one viable
candidate.  

We will induct according to a scheme suggested by (REMDUPST LS ACC).
This suggestion was produced using the :induction rules 
REMDUPST-INDUCTION-SCHEME, REMDUPST-INDUCTION-SCHEME-FROM-DEFINITION
and TRUE-LISTP.  If we let (:P ACC LS) denote *1 above then the induction
scheme we'll use is
(AND (IMPLIES (NOT (AND (TRUE-LISTP LS) (TRUE-LISTP ACC)))
              (:P ACC LS))
     (IMPLIES (AND (AND (TRUE-LISTP LS) (TRUE-LISTP ACC))
                   (NOT (ENDP LS))
                   (NOT (IN (CAR LS) ACC))
                   (:P (CONS (CAR LS) ACC) (CDR LS)))
              (:P ACC LS))
     (IMPLIES (AND (AND (TRUE-LISTP LS) (TRUE-LISTP ACC))
                   (NOT (ENDP LS))
                   (IN (CAR LS) ACC)
                   (:P ACC (CDR LS)))
              (:P ACC LS))
     (IMPLIES (AND (AND (TRUE-LISTP LS) (TRUE-LISTP ACC))
                   (ENDP LS))
              (:P ACC LS))).
This induction is justified by the same argument used to admit REMDUPST.
Note, however, that the unmeasured variable ACC is being instantiated.
When applied to the goal at hand the above induction scheme produces
seven nontautological subgoals.
Subgoal *1/7

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/6

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'7'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'8'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint while proving *1 (descended from Goal'):

Subgoal *1/3''
(IMPLIES (AND (TRUE-LISTP (CDR LS))
              (TRUE-LISTP ACC)
              (CONSP LS)
              (IN (CAR LS) ACC)
              (EQUAL (REMDUPST (CDR LS) ACC)
                     (REMDUPS (APPEND (REV (CDR LS)) ACC)))
              (NODUPS ACC))
         (EQUAL (REMDUPST (CDR LS) ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

*1.1 (Subgoal *1/3'8') is pushed for proof by induction.

])
Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint while proving *1 (descended from Goal'):

Subgoal *1/1'''
(IMPLIES (AND (TRUE-LISTP ACC) (NODUPS ACC))
         (EQUAL ACC (REMDUPS ACC)))

*1.2 (Subgoal *1/1''') is pushed for proof by induction.

])

So we now return to *1.2, which is

(IMPLIES (AND (TRUE-LISTP ACC) (NODUPS ACC))
         (EQUAL ACC (REMDUPS ACC))).
Subgoal *1.2/7

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/7'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/6

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1.2 is COMPLETED!
Thus key checkpoint Subgoal *1/1''' is COMPLETED!

We therefore turn our attention to *1.1, which is

(IMPLIES (AND (TRUE-LISTP RV)
              (TRUE-LISTP ACC)
              (IN LS1 ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPS (APPEND RV ACC))
                (REMDUPS (APPEND RV (CONS LS1 ACC))))).
Subgoal *1.1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1.1/3' (2 subgoals).
  if-intro: ((:DEFINITION REMDUPS-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP))

Subgoal *1.1/3.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.2''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.2'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.2'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.2'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1.1.1 (Subgoal *1.1/3.2'5') is pushed for proof by induction.
Subgoal *1.1/3.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.1''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.1'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.1'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.1'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1.1.2 (Subgoal *1.1/3.1'5') is pushed for proof by induction.
Subgoal *1.1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


So we now return to *1.1.2, which is

(IMPLIES (AND L (TRUE-LISTP L)
              (TRUE-LISTP BAD)
              (CONS RV1 RV2)
              (EQUAL (REMDUPS BAD) (REMDUPS L))
              (TRUE-LISTP RV2)
              (TRUE-LISTP ACC)
              (IN LS1 ACC)
              (NODUPS ACC)
              (NOT (IN RV1 BAD)))
         (NOT (IN RV1 L))).
Subgoal *1.1.2/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/2''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/2'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/2'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1.1.2.1 (Subgoal *1.1.2/2'4') is pushed for proof by induction.
Subgoal *1.1.2/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


So we now return to *1.1.2.1, which is

(IMPLIES (AND (CONS ACC1 ACC2)
              (NOT (IN ACC1 ACC2))
              L (TRUE-LISTP L)
              (TRUE-LISTP BAD)
              (CONS RV1 RV2)
              (EQUAL (REMDUPS BAD) (REMDUPS L))
              (TRUE-LISTP RV2)
              (TRUE-LISTP ACC2)
              (NODUPS ACC2)
              (NOT (IN RV1 BAD)))
         (NOT (IN RV1 L))).
Subgoal *1.1.2.1/6

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/1''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/1'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/1'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1.1.2.1.1 (Subgoal *1.1.2.1/1'4') is pushed for proof by induction.

So we now return to *1.1.2.1.1, which is

(IMPLIES (AND L (TRUE-LISTP L)
              (TRUE-LISTP BAD)
              (CONS RV1 RV2)
              (EQUAL (REMDUPS BAD) (REMDUPS L))
              (TRUE-LISTP RV2)
              (NOT (IN RV1 BAD)))
         (NOT (IN RV1 L))).
Subgoal *1.1.2.1.1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1.1.2.1.1/4' (2 subgoals).
  if-intro: ((:DEFINITION REMDUPS-DEFINITION-RULE))

Subgoal *1.1.2.1.1/4.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Summary
Form:  ( DEFTHM REMDUPST-LEMMA ...)
Rules: ((:DEFINITION BINARY-APPEND)
        (:DEFINITION ENDP)
        (:DEFINITION IN-DEFINITION-RULE)
        (:DEFINITION NODUPS-DEFINITION-RULE)
        (:DEFINITION NOT)
        (:DEFINITION REMDUPS-DEFINITION-RULE)
        (:DEFINITION REMDUPST-DEFINITION-RULE)
        (:DEFINITION TRUE-LISTP)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:EXECUTABLE-COUNTERPART NODUPS)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART REMDUPS)
        (:EXECUTABLE-COUNTERPART REV)
        (:EXECUTABLE-COUNTERPART TRUE-LISTP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION BINARY-APPEND)
        (:INDUCTION IN-INDUCTION-SCHEME)
        (:INDUCTION IN-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION NODUPS-INDUCTION-SCHEME)
        (:INDUCTION NODUPS-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION REMDUPS-INDUCTION-SCHEME)
        (:INDUCTION REMDUPS-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION REMDUPST-INDUCTION-SCHEME)
        (:INDUCTION REMDUPST-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION TRUE-LISTP)
        (:REWRITE ACL2::APPEND-OF-CONS)
        (:REWRITE ACL2::APPEND-WHEN-NOT-CONSP)
        (:REWRITE ACL2::ASSOCIATIVITY-OF-APPEND)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE ACL2::CONS-CAR-CDR)
        (:REWRITE ACL2::CONSP-UNDER-IFF-WHEN-TRUE-LISTP)
        (:REWRITE ACL2::REV-OF-CONS)
        (:REWRITE ACL2::REVERSE-REMOVAL)
        (:REWRITE ACL2::TRUE-LISTP-WHEN-ATOM)
        (:TYPE-PRESCRIPTION BINARY-APPEND)
        (:TYPE-PRESCRIPTION IN-CONTRACT)
        (:TYPE-PRESCRIPTION NODUPS-CONTRACT)
        (:TYPE-PRESCRIPTION REV)
        (:TYPE-PRESCRIPTION ACL2::TRUE-LISTP-APPEND))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION REMDUPS-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP))
Warnings:  Invariant-risk
Time:  9.57 seconds (prove: 5.19, print: 0.02, other: 4.36)
Prover steps counted:  313746

---
The key checkpoint goals, below, may help you to debug this failure.
See :DOC failure and see :DOC set-checkpoint-summary-limit.
---

*** Key checkpoint at the top level: ***

Goal'
(IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

*** Key checkpoint under a top-level induction: ***

Subgoal *1/3''
(IMPLIES (AND (TRUE-LISTP (CDR LS))
              (TRUE-LISTP ACC)
              (CONSP LS)
              (IN (CAR LS) ACC)
              (EQUAL (REMDUPST (CDR LS) ACC)
                     (REMDUPS (APPEND (REV (CDR LS)) ACC)))
              (NODUPS ACC))
         (EQUAL (REMDUPST (CDR LS) ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

ACL2 Error in ( DEFTHM REMDUPST-LEMMA ...):  See :DOC failure.

******** FAILED ********

**Summary of Cgen/testing**
We tested 10503 examples across 22 subgoals, of which 2183 (2183 unique)
satisfied the hypotheses, and found 3 counterexamples and 2180 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Subgoal *1.1.2.1.1/4.1'5'"]
(IMPLIES (AND (TRUE-LISTP BAD2)
              (NOT (EQUAL RV1 BAD1))
              L (TRUE-LISTP L)
              (CONS RV1 RV2)
              (NOT (IN BAD1 BAD2))
              (TRUE-LISTP RV2)
              (NOT (IN RV1 BAD2)))
         (NOT (IN RV1 L)))

 -- ((ACC 'ACL2::?) (LS 'ACL2::?))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC 'ACL2::?) (LS 'ACL2::?))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC 'ACL2::?) (LS 'ACL2::?))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((ACC NIL) (LS NIL))
 -- ((ACC NIL) (LS '(-1 0)))
 -- ((ACC '(0)) (LS '(0 0)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.89 seconds (prove: 0.00, print: 0.00, other: 2.89)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(suggest-lemma (reverse (append x y))
	       :with reverse append)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REVERSE (BINARY-APPEND X Y))
  (((TRUE-LISTP X))
   ((TRUE-LISTP (BINARY-APPEND X Y))
    (STRINGP (BINARY-APPEND X Y)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 821 (821 unique)
satisfied the hypotheses, and found 821 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '((NIL . 1) NIL)) (X NIL))
 -- ((Y NIL) (X '(488 15)))
 -- ((Y NIL) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '((NIL . 1) NIL)) (X NIL))
                  ((Y NIL) (X '(488 15)))
                  ((Y NIL) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X NIL)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) NIL)))) ((ACL2S::Y NIL) (ACL2S::X NIL))) '((ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 1 1 1) NIL)) NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (OR (TRUE-LISTP (BINARY-APPEND ACL2S::X ACL2S::Y)) (STRINGP (BINARY-APPEND ACL2S::X ACL2S::Y)))) (EQUAL (REVERSE (APPEND ACL2S::X ACL2S::Y)) (REVERSE (APPEND ACL2S::X ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 507 (507 unique)
satisfied the hypotheses, and found 0 counterexamples and 507 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(25)))
 -- ((Y "A") (X NIL))
 -- ((Y '(-2 -1)) (X '(14)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (IMPLIES (AND (TRUE-LISTP X)
              (OR (TRUE-LISTP (BINARY-APPEND X Y))
                  (STRINGP (BINARY-APPEND X Y))))
         (EQUAL (REVERSE (APPEND X Y))
                (REVERSE (APPEND X Y))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 in (x ls)
  :input-contract (true-listp ls)
  :output-contract (booleanp (in x ls))
  (cond
   ((endp ls) nil)
   ((equal x (car ls)) t)
   (t (in x (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (EQUAL X (CAR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.50 seconds
Form:  ( DEFUN IN ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN-CONTRACT ...)
Time:  0.15 seconds (prove: 0.10, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.15 seconds (prove: 0.10, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS IN ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.23 seconds

Function Name : IN 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.05 seconds (prove: 0.22, print: 0.00, other: 0.84)
Prover steps counted:  3676
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 nodups (ls)
  :input-contract (true-listp ls)
  :output-contract (booleanp (nodups ls))
  (cond
   ((endp ls) t)
   ((in (car ls) (cdr ls)) nil)
   (t (nodups (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NODUPS))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) (CDR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.44 seconds
Form:  ( DEFUN NODUPS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NODUPS-CONTRACT ...)
Time:  0.20 seconds (prove: 0.16, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.20 seconds (prove: 0.16, print: 0.00, other: 0.03)
Form:  ( VERIFY-GUARDS NODUPS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.26 seconds

Function Name : NODUPS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.99 seconds (prove: 0.25, print: 0.00, other: 0.74)
Prover steps counted:  6238
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 remdups (ls)
  :input-contract (true-listp ls)
  :output-contract (true-listp (remdups ls))
  (cond
   ((endp ls) nil)
   ((in (car ls) (cdr ls))
    (remdups (cdr ls)))
   (t (cons (car ls) (remdups (cdr ls))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (IN (CAR LS) (CDR LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPS))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) (CDR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.59 seconds
Form:  ( DEFUN REMDUPS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM REMDUPS-CONTRACT ...)
Time:  0.22 seconds (prove: 0.18, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.22 seconds (prove: 0.18, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS REMDUPS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.28 seconds

Function Name : REMDUPS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.18 seconds (prove: 0.31, print: 0.00, other: 0.87)
Prover steps counted:  7703
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 remdupst (ls acc)
  :input-contract (and (true-listp ls) (true-listp acc))
  :output-contract (true-listp (remdupst ls acc))
  (cond
   ((endp ls) acc)
   ((in (car ls) acc)
    (remdupst (cdr ls) acc))
   (t (remdupst (cdr ls) (cons (car ls) acc)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CAR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CDR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (IN (CAR LS) ACC)
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CAR LS))
 (EXTRA-INFO '(:GUARD (:BODY REMDUPST))
             '(CDR LS))
 (TRUE-LISTP ACC)
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (IN (CAR LS) ACC))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.94 seconds
Form:  ( DEFUN REMDUPST ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM REMDUPST-CONTRACT ...)
Time:  0.30 seconds (prove: 0.23, print: 0.00, other: 0.07)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.30 seconds (prove: 0.23, print: 0.00, other: 0.07)
Form:  ( VERIFY-GUARDS REMDUPST ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.37 seconds

Function Name : REMDUPST 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.62 seconds (prove: 0.55, print: 0.00, other: 1.07)
Prover steps counted:  19237
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (remdupst ls acc)
	       :required-expressions remdups append reverse
	       :hyps (nodups acc))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REMDUPST LS ACC)
  (((TRUE-LISTP LS)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1026 examples across 3 subgoals, of which 684 (684 unique)
satisfied the hypotheses, and found 681 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC NIL) (LS '(NIL ACL2::A NIL NIL)))
 -- ((ACC '(-1 0)) (LS NIL))
 -- ((ACC NIL) (LS NIL))

Cases in which the conjecture is true include:
 [found in : "Goal'"]
 -- ((ACC '(0 0)) (LS '(4)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(0 0)) (LS '(5)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((ACC '(NIL NIL)) (LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC NIL) (LS '(NIL ACL2::A NIL NIL)))
                  ((ACC '(-1 0)) (LS NIL))
                  ((ACC NIL) (LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS NIL)) ((ACL2S::ACC NIL) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::ACC) (APPEND ACL2S::ACC ACL2S::LS))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 24 examples across 1 subgoals, of which 19 (19 unique) satisfied
the hypotheses, and found 3 counterexamples and 16 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(-1 0)) (LS '(64)))
 -- ((ACC '(306 3)) (LS '(14 5)))
 -- ((ACC '(ACL2::A)) (LS '(#\A)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(81 2 1)) (LS NIL))
 -- ((ACC '(20)) (LS NIL))
 -- ((ACC '(513)) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(-1 0)) (LS '(64)))
                  ((ACC '(306 3)) (LS '(14 5)))
                  ((ACC '(ACL2::A)) (LS '(#\A)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::REMDUPS APPEND REVERSE) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 0 0 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL))) ((ACL2S::ACC NIL) (ACL2S::LS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::LS NIL)) ((ACL2S::ACC NIL) (ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::LS) (TRUE-LISTP ACL2S::ACC) (ACL2S::NODUPS ACL2S::ACC)) (EQUAL (ACL2S::REMDUPST ACL2S::LS ACL2S::ACC) (ACL2S::REMDUPS (APPEND (REVERSE ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1100 (1100 unique)
satisfied the hypotheses, and found 0 counterexamples and 1100 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(0)) (LS '(4)))
 -- ((ACC NIL) (LS '(-179)))
 -- ((ACC NIL) (LS NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REVERSE LS) ACC))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm remdupst-lemma
  (IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REVERSE LS) ACC)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Four induction schemes are suggested
by this conjecture.  These merge into two derived induction schemes.
However, one of these is flawed and so we are left with one viable
candidate.  

We will induct according to a scheme suggested by (REMDUPST LS ACC).
This suggestion was produced using the :induction rules 
REMDUPST-INDUCTION-SCHEME, REMDUPST-INDUCTION-SCHEME-FROM-DEFINITION
and TRUE-LISTP.  If we let (:P ACC LS) denote *1 above then the induction
scheme we'll use is
(AND (IMPLIES (NOT (AND (TRUE-LISTP LS) (TRUE-LISTP ACC)))
              (:P ACC LS))
     (IMPLIES (AND (AND (TRUE-LISTP LS) (TRUE-LISTP ACC))
                   (NOT (ENDP LS))
                   (NOT (IN (CAR LS) ACC))
                   (:P (CONS (CAR LS) ACC) (CDR LS)))
              (:P ACC LS))
     (IMPLIES (AND (AND (TRUE-LISTP LS) (TRUE-LISTP ACC))
                   (NOT (ENDP LS))
                   (IN (CAR LS) ACC)
                   (:P ACC (CDR LS)))
              (:P ACC LS))
     (IMPLIES (AND (AND (TRUE-LISTP LS) (TRUE-LISTP ACC))
                   (ENDP LS))
              (:P ACC LS))).
This induction is justified by the same argument used to admit REMDUPST.
Note, however, that the unmeasured variable ACC is being instantiated.
When applied to the goal at hand the above induction scheme produces
seven nontautological subgoals.
Subgoal *1/7

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/6

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'7'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'8'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint while proving *1 (descended from Goal'):

Subgoal *1/3''
(IMPLIES (AND (TRUE-LISTP (CDR LS))
              (TRUE-LISTP ACC)
              (CONSP LS)
              (IN (CAR LS) ACC)
              (EQUAL (REMDUPST (CDR LS) ACC)
                     (REMDUPS (APPEND (REV (CDR LS)) ACC)))
              (NODUPS ACC))
         (EQUAL (REMDUPST (CDR LS) ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

*1.1 (Subgoal *1/3'8') is pushed for proof by induction.

])
Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint while proving *1 (descended from Goal'):

Subgoal *1/1'''
(IMPLIES (AND (TRUE-LISTP ACC) (NODUPS ACC))
         (EQUAL ACC (REMDUPS ACC)))

*1.2 (Subgoal *1/1''') is pushed for proof by induction.

])

So we now return to *1.2, which is

(IMPLIES (AND (TRUE-LISTP ACC) (NODUPS ACC))
         (EQUAL ACC (REMDUPS ACC))).
Subgoal *1.2/7

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/7'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/6

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.2/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1.2 is COMPLETED!
Thus key checkpoint Subgoal *1/1''' is COMPLETED!

We therefore turn our attention to *1.1, which is

(IMPLIES (AND (TRUE-LISTP RV)
              (TRUE-LISTP ACC)
              (IN LS1 ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPS (APPEND RV ACC))
                (REMDUPS (APPEND RV (CONS LS1 ACC))))).
Subgoal *1.1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1.1/3' (2 subgoals).
  if-intro: ((:DEFINITION REMDUPS-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP))

Subgoal *1.1/3.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.2''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.2'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.2'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.2'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1.1.1 (Subgoal *1.1/3.2'5') is pushed for proof by induction.
Subgoal *1.1/3.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.1''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.1'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.1'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/3.1'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1.1.2 (Subgoal *1.1/3.1'5') is pushed for proof by induction.
Subgoal *1.1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


So we now return to *1.1.2, which is

(IMPLIES (AND L (TRUE-LISTP L)
              (TRUE-LISTP BAD)
              (CONS RV1 RV2)
              (EQUAL (REMDUPS BAD) (REMDUPS L))
              (TRUE-LISTP RV2)
              (TRUE-LISTP ACC)
              (IN LS1 ACC)
              (NODUPS ACC)
              (NOT (IN RV1 BAD)))
         (NOT (IN RV1 L))).
Subgoal *1.1.2/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/2''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/2'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2/2'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1.1.2.1 (Subgoal *1.1.2/2'4') is pushed for proof by induction.
Subgoal *1.1.2/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


So we now return to *1.1.2.1, which is

(IMPLIES (AND (CONS ACC1 ACC2)
              (NOT (IN ACC1 ACC2))
              L (TRUE-LISTP L)
              (TRUE-LISTP BAD)
              (CONS RV1 RV2)
              (EQUAL (REMDUPS BAD) (REMDUPS L))
              (TRUE-LISTP RV2)
              (TRUE-LISTP ACC2)
              (NODUPS ACC2)
              (NOT (IN RV1 BAD)))
         (NOT (IN RV1 L))).
Subgoal *1.1.2.1/6

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/1''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/1'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1/1'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1.1.2.1.1 (Subgoal *1.1.2.1/1'4') is pushed for proof by induction.

So we now return to *1.1.2.1.1, which is

(IMPLIES (AND L (TRUE-LISTP L)
              (TRUE-LISTP BAD)
              (CONS RV1 RV2)
              (EQUAL (REMDUPS BAD) (REMDUPS L))
              (TRUE-LISTP RV2)
              (NOT (IN RV1 BAD)))
         (NOT (IN RV1 L))).
Subgoal *1.1.2.1.1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1.1.2.1.1/4' (2 subgoals).
  if-intro: ((:DEFINITION REMDUPS-DEFINITION-RULE))

Subgoal *1.1.2.1.1/4.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1.1.2.1.1/4.1'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Summary
Form:  ( DEFTHM REMDUPST-LEMMA ...)
Rules: ((:DEFINITION BINARY-APPEND)
        (:DEFINITION ENDP)
        (:DEFINITION IN-DEFINITION-RULE)
        (:DEFINITION NODUPS-DEFINITION-RULE)
        (:DEFINITION NOT)
        (:DEFINITION REMDUPS-DEFINITION-RULE)
        (:DEFINITION REMDUPST-DEFINITION-RULE)
        (:DEFINITION TRUE-LISTP)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:EXECUTABLE-COUNTERPART NODUPS)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART REMDUPS)
        (:EXECUTABLE-COUNTERPART REV)
        (:EXECUTABLE-COUNTERPART TRUE-LISTP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION BINARY-APPEND)
        (:INDUCTION IN-INDUCTION-SCHEME)
        (:INDUCTION IN-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION NODUPS-INDUCTION-SCHEME)
        (:INDUCTION NODUPS-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION REMDUPS-INDUCTION-SCHEME)
        (:INDUCTION REMDUPS-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION REMDUPST-INDUCTION-SCHEME)
        (:INDUCTION REMDUPST-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION TRUE-LISTP)
        (:REWRITE ACL2::APPEND-OF-CONS)
        (:REWRITE ACL2::APPEND-WHEN-NOT-CONSP)
        (:REWRITE ACL2::ASSOCIATIVITY-OF-APPEND)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE ACL2::CONS-CAR-CDR)
        (:REWRITE ACL2::CONSP-UNDER-IFF-WHEN-TRUE-LISTP)
        (:REWRITE ACL2::REV-OF-CONS)
        (:REWRITE ACL2::REVERSE-REMOVAL)
        (:REWRITE ACL2::TRUE-LISTP-WHEN-ATOM)
        (:TYPE-PRESCRIPTION BINARY-APPEND)
        (:TYPE-PRESCRIPTION IN-CONTRACT)
        (:TYPE-PRESCRIPTION NODUPS-CONTRACT)
        (:TYPE-PRESCRIPTION REV)
        (:TYPE-PRESCRIPTION ACL2::TRUE-LISTP-APPEND))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION REMDUPS-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP))
Warnings:  Invariant-risk
Time:  10.83 seconds (prove: 6.23, print: 0.02, other: 4.59)
Prover steps counted:  313746

---
The key checkpoint goals, below, may help you to debug this failure.
See :DOC failure and see :DOC set-checkpoint-summary-limit.
---

*** Key checkpoint at the top level: ***

Goal'
(IMPLIES (AND (TRUE-LISTP LS)
              (TRUE-LISTP ACC)
              (NODUPS ACC))
         (EQUAL (REMDUPST LS ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

*** Key checkpoint under a top-level induction: ***

Subgoal *1/3''
(IMPLIES (AND (TRUE-LISTP (CDR LS))
              (TRUE-LISTP ACC)
              (CONSP LS)
              (IN (CAR LS) ACC)
              (EQUAL (REMDUPST (CDR LS) ACC)
                     (REMDUPS (APPEND (REV (CDR LS)) ACC)))
              (NODUPS ACC))
         (EQUAL (REMDUPST (CDR LS) ACC)
                (REMDUPS (APPEND (REV LS) ACC))))

ACL2 Error in ( DEFTHM REMDUPST-LEMMA ...):  See :DOC failure.

******** FAILED ********

**Summary of Cgen/testing**
We tested 10504 examples across 22 subgoals, of which 2294 (2294 unique)
satisfied the hypotheses, and found 3 counterexamples and 2291 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Subgoal *1.1.2.1.1/4.1'5'"]
(IMPLIES (AND (TRUE-LISTP BAD2)
              (NOT (EQUAL RV1 BAD1))
              L (TRUE-LISTP L)
              (CONS RV1 RV2)
              (NOT (IN BAD1 BAD2))
              (TRUE-LISTP RV2)
              (NOT (IN RV1 BAD2)))
         (NOT (IN RV1 L)))

 -- ((ACC 'ACL2::?) (LS 'ACL2::?))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC 'ACL2::?) (LS 'ACL2::?))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((ACC 'ACL2::?) (LS 'ACL2::?))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((ACC '(-1)) (LS '(ACL2::ABA)))
 -- ((ACC NIL) (LS NIL))
 -- ((ACC '(0)) (LS '(-71)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (append (reverse ls) acc)
	       :required-expressions append (reverse (cdr ls)) cons acc
	       :with car
	       :hyps (consp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM BINARY-APPEND (REVERSE LS) ACC)
  (((TRUE-LISTP (REVERSE LS)))
   ((TRUE-LISTP LS) (STRINGP LS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 975 (975 unique)
satisfied the hypotheses, and found 975 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(NIL)) (ACC '(-1/5)))
 -- ((LS '(NIL)) (ACC '(T . 0)))
 -- ((LS '((-1 -1))) (ACC '(8 . 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(NIL)) (ACC '(-1/5)))
                  ((LS '(NIL)) (ACC '(T . 0)))
                  ((LS '((-1 -1))) (ACC '(8 . 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(APPEND (REVERSE (CDR ACL2S::LS)) CONS ACL2S::ACC) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1)) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::ACC (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) NIL)) (ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-NUMBER (0)))))) '((ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1)) NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-NUMBER (0)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-NUMBER (0)))))) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::ACC) (TRUE-LISTP (REVERSE ACL2S::LS)) (OR (TRUE-LISTP ACL2S::LS) (STRINGP ACL2S::LS)) (CONSP ACL2S::LS)) (EQUAL (APPEND (REVERSE ACL2S::LS) ACL2S::ACC) (APPEND (REVERSE (CDR ACL2S::LS)) (CONS (CAR ACL2S::LS) ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 750 (750 unique)
satisfied the hypotheses, and found 0 counterexamples and 750 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '((0))) (ACC NIL))
 -- ((LS '((ACL2::A) NIL 0)) (ACC T))
 -- ((LS '((0 . "A") (0 1) (0 1))) (ACC '(154 4)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP (REVERSE LS))
              (OR (TRUE-LISTP LS) (STRINGP LS))
              (CONSP LS))
         (EQUAL (APPEND (REVERSE LS) ACC)
                (APPEND (REVERSE (CDR LS))
                        (CONS (CAR LS) ACC))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata flat-input
  (oneof (cons flat-input flat-input) integer boolean character))
 Predicate events...
Form:  ( DEFUN FLAT-INPUTP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (FLAT-INPUTP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules.")

 (FLAT-INPUTP DEFDATA::V1) => body -- not complete. 
Reasons: 
("Unable to characterize (using tau rules) a non-disjoint union type")

Form:  ( DEFTHM DEF=>FLAT-INPUT ...)
 Enumerator events...
Form:  ( DEFUN NTH-FLAT-INPUT-BUILTIN ...)
Form:  ( DEFUN NTH-FLAT-INPUT/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.12 seconds (prove: 0.03, print: 0.00, other: 0.09)
 Registering type...
Form:  ( DEFUN NTH-FLAT-INPUT ...)
Form:  ( ENCAPSULATE (((NTH-FLAT-INPUT * ...) ...) ...) ...)
Form:  ( DEFUN NTH-FLAT-INPUT/ACC ...)
Form:  ( ENCAPSULATE (((NTH-FLAT-INPUT/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-FLAT-INPUT NTH-FLAT-INPUT-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-FLAT-INPUT/ACC NTH-FLAT-INPUT/ACC-BUILTIN)
...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.16 seconds (prove: 0.03, print: 0.00, other: 0.13)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 flatten (x)
  :input-contract (flat-inputp x)
  :output-contract (true-listp (flatten x))
  (cond ((not (consp x)) (cons x nil))
        (t (append (flatten (car x)) (flatten (cdr x))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.28 seconds
Form:  ( DEFUN FLATTEN ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM FLATTEN-CONTRACT ...)
Time:  0.12 seconds (prove: 0.08, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.12 seconds (prove: 0.08, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS FLATTEN ...)
Time:  0.13 seconds (prove: 0.13, print: 0.00, other: 0.00)
Elapsed Run Time: 0.32 seconds

Function Name : FLATTEN 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.88 seconds (prove: 0.27, print: 0.00, other: 0.61)
Prover steps counted:  9166
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 mc-flatten-acc (x a)
  :input-contract (and (flat-inputp x) (true-listp a))
  :output-contract (true-listp (mc-flatten-acc x a))
  (cond ((not (consp x)) (cons x a))
        (t (mc-flatten-acc (car x)
                           (mc-flatten-acc (cdr x) a)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

([ A key checkpoint:

Goal
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY MC-FLATTEN-ACC))
                          '(MC-FLATTEN-ACC (CAR X)
                                           (MC-FLATTEN-ACC (CDR X) A)))
              (TRUE-LISTP A)
              (FLAT-INPUTP X)
              (CONSP X))
         (TRUE-LISTP (MC-FLATTEN-ACC (CDR X) A)))

*1 (Goal'') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY MC-FLATTEN-ACC))
                          '(MC-FLATTEN-ACC (CAR X)
                                           (MC-FLATTEN-ACC (CDR X) A)))
              (TRUE-LISTP A)
              (FLAT-INPUTP X1)
              (FLAT-INPUTP X2))
         (TRUE-LISTP (MC-FLATTEN-ACC X2 A))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.82 seconds
Form:  ( DEFUN MC-FLATTEN-ACC ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM MC-FLATTEN-ACC-CONTRACT ...)
Time:  0.18 seconds (prove: 0.14, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.18 seconds (prove: 0.14, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS MC-FLATTEN-ACC ...)
Time:  0.19 seconds (prove: 0.19, print: 0.00, other: 0.00)
Elapsed Run Time: 0.44 seconds

Function Name : MC-FLATTEN-ACC 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.56 seconds (prove: 0.69, print: 0.00, other: 0.87)
Prover steps counted:  31551
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (mc-flatten-acc a l)
	       :with append flatten)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM MC-FLATTEN-ACC A L)
  (((FLAT-INPUTP A)) ((TRUE-LISTP L))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1457 (1457 unique)
satisfied the hypotheses, and found 1457 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((L NIL) (A #\4))
 -- ((L NIL) (A T))
 -- ((L '(ACL2::BA)) (A 8))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((L NIL) (A #\4))
                  ((L NIL) (A T))
                  ((L '(ACL2::BA)) (A 8))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::L NIL) (ACL2S::A (ACL2S::INTERNAL-CHAR #\4))) ((ACL2S::L NIL) (ACL2S::A T)) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\4) NIL) (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)))) 
"form tested" 
(IMPLIES (AND (ACL2S::FLAT-INPUTP ACL2S::A) (TRUE-LISTP ACL2S::L)) (EQUAL (ACL2S::MC-FLATTEN-ACC ACL2S::A ACL2S::L) (APPEND (ACL2S::FLATTEN ACL2S::A) ACL2S::L))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 1453 (1453 unique)
satisfied the hypotheses, and found 0 counterexamples and 1453 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((L '(ACL2::BABAAA ACL2::A ACL2::A)) (A #\Newline))
 -- ((L NIL) (A 11))
 -- ((L NIL) (A T))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (FLAT-INPUTP A) (TRUE-LISTP L))
         (EQUAL (MC-FLATTEN-ACC A L)
                (APPEND (FLATTEN A) L)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (mc-flatten-acc a l)
	       :with flatten append)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM MC-FLATTEN-ACC A L)
  (((FLAT-INPUTP A)) ((TRUE-LISTP L))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 972 (972 unique)
satisfied the hypotheses, and found 3 counterexamples and 969 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (FLAT-INPUTP A) (NOT (TRUE-LISTP L)))
 -- ((L NIL) (A T))
 -- ((L '(-1)) (A NIL))
 -- ((L '(NIL)) (A #\'))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((L '(ACL2::A ACL2::BA ACL2::A)) (A '(T . 0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((L NIL) (A #\B))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((L NIL) (A 75))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((L NIL) (A T))
                  ((L '(-1)) (A NIL))
                  ((L '(NIL)) (A #\'))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::L NIL) (ACL2S::A T)) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::A NIL)) ((ACL2S::L (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::A (ACL2S::INTERNAL-CHAR #\')))) '((ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\') (ACL2S::INTERNAL-CONS NIL NIL)))) 
"form tested" 
(IMPLIES (AND (ACL2S::FLAT-INPUTP ACL2S::A) (TRUE-LISTP ACL2S::L)) (EQUAL (ACL2S::MC-FLATTEN-ACC ACL2S::A ACL2S::L) (APPEND (ACL2S::FLATTEN ACL2S::A) ACL2S::L))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 1458 (1458 unique)
satisfied the hypotheses, and found 0 counterexamples and 1458 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((L NIL) (A -52))
 -- ((L NIL) (A '(0 . 0)))
 -- ((L '(3)) (A #\+))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (FLAT-INPUTP A) (TRUE-LISTP L))
         (EQUAL (MC-FLATTEN-ACC A L)
                (APPEND (FLATTEN A) L)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 loi (listof integer))
 Predicate events...
Form:  ( DEFUN LOIP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOIP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LOIP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOIP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOI ...)
Form:  ( DEFTHM LOI=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOI-BUILTIN ...)
Form:  ( DEFUN NTH-LOI/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.92 seconds (prove: 0.59, print: 0.00, other: 0.33)
 Registering type...
Form:  ( DEFUN NTH-LOI ...)
Form:  ( ENCAPSULATE (((NTH-LOI * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOI/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOI/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOI NTH-LOI-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOI/ACC NTH-LOI/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.95 seconds (prove: 0.59, print: 0.00, other: 0.36)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.22 seconds (prove: 0.59, print: 0.00, other: 0.64)
Prover steps counted:  5746
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 orderedp (ls)
  :input-contract (loip ls)
  :output-contract (booleanp (orderedp ls))
  (cond
   ((endp ls) t)
   ((endp (cdr ls)) t)
   ((<= (car ls) (car (cdr ls)))
    (orderedp (cdr ls)))
   (t nil)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR LS))
 (LOIP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CADR LS))
 (LOIP LS)
 (NOT (ENDP LS))
 (NOT (ENDP (CDR LS)))
 (NOT (CONSP (CDR LS))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CAR LS))
 (EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR LS))
 (LOIP LS)
 (NOT (ENDP LS))
 (NOT (ENDP (CDR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR LS))
 (LOIP LS)
 (NOT (ENDP LS))
 (NOT (ENDP (CDR LS)))
 (NOT (< (CAR (CDR LS)) (CAR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.64 seconds
Form:  ( DEFUN ORDEREDP ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ORDEREDP-CONTRACT ...)
Time:  0.08 seconds (prove: 0.05, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS ORDEREDP ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.16 seconds

Function Name : ORDEREDP 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.10 seconds (prove: 0.18, print: 0.00, other: 0.92)
Prover steps counted:  922
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 my-remove (x ls)
  :input-contract (loip ls)
  :output-contract (loip (my-remove x ls))
  (cond
   ((endp ls) nil)
   ((equal x (car ls)) (cdr ls))
   (t (cons (car ls) (my-remove x (cdr ls))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY MY-REMOVE))
             '(CAR LS))
 (LOIP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY MY-REMOVE))
             '(CDR LS))
 (LOIP LS)
 (NOT (ENDP LS))
 (EQUAL X (CAR LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY MY-REMOVE))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY MY-REMOVE))
             '(CAR LS))
 (LOIP LS)
 (NOT (ENDP LS))
 (NOT (EQUAL X (CAR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.55 seconds
Form:  ( DEFUN MY-REMOVE ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM MY-REMOVE-CONTRACT ...)
Time:  0.09 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS MY-REMOVE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.16 seconds

Function Name : MY-REMOVE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.01 seconds (prove: 0.18, print: 0.00, other: 0.83)
Prover steps counted:  1193
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 perm (l1 l2)
  :input-contract (and (loip l1) (loip l2))
  :output-contract (booleanp (perm l1 l2))
  (cond
   ((endp l1) (endp l2))
   ((in (car l1) l2)
    (perm (cdr l1) (my-remove (car l1) l2)))
   (t nil)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CAR L1))
 (LOIP L2)
 (LOIP L1)
 (NOT (ENDP L1))
 (NOT (CONSP L1)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CAR L1))
 (EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CDR L1))
 (LOIP L2)
 (LOIP L1)
 (NOT (ENDP L1))
 (IN (CAR L1) L2)
 (NOT (CONSP L1)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.71 seconds
Form:  ( DEFUN PERM ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM PERM-CONTRACT ...)
Time:  0.12 seconds (prove: 0.07, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.12 seconds (prove: 0.07, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS PERM ...)
Time:  0.02 seconds (prove: 0.02, print: 0.00, other: 0.00)
Elapsed Run Time: 0.21 seconds

Function Name : PERM 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.25 seconds (prove: 0.22, print: 0.00, other: 1.03)
Prover steps counted:  1490
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert (x ls)
  :input-contract (and (integerp x) (loip ls))
  :output-contract (loip (insert x ls))
  (cond
   ((endp ls) (cons x nil))
   ((<= x (car ls)) (cons x ls))
   (t (cons (car ls) (insert x (cdr ls))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR LS))
 (LOIP LS)
 (INTEGERP X)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR LS))
 (LOIP LS)
 (INTEGERP X)
 (NOT (ENDP LS))
 (< (CAR LS) X)
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.57 seconds
Form:  ( DEFUN INSERT ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM INSERT-CONTRACT ...)
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS INSERT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.18 seconds

Function Name : INSERT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.08 seconds (prove: 0.18, print: 0.00, other: 0.90)
Prover steps counted:  1331
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 isort (ls)
  :input-contract (loip ls)
  :output-contract (loip (isort ls))
  (cond
   ((endp ls) nil)
   (t (insert (car ls) (isort (cdr ls))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ISORT))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY ISORT))
             '(CAR LS))
 (LOIP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

([ A key checkpoint:

Goal''
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY ISORT))
                          '(INSERT (CAR LS) (ISORT (CDR LS))))
              (INTEGERP (CAR LS))
              (LOIP (CDR LS))
              (CONSP LS))
         (LOIP (ISORT (CDR LS))))

*1 (Goal'4') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY ISORT))
                          '(INSERT (CAR LS) (ISORT (CDR LS))))
              (INTEGERP LS1)
              (LOIP LS2))
         (LOIP (ISORT LS2))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.53 seconds
Form:  ( DEFUN ISORT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ISORT-CONTRACT ...)
Time:  0.08 seconds (prove: 0.04, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.04, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS ISORT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.14 seconds

Function Name : ISORT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.00 seconds (prove: 0.21, print: 0.00, other: 0.79)
Prover steps counted:  2051
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defgroup sorting-fns orderedp perm insert isort boolean)
ALL-GROUPS
ACL2S !>(suggest-lemma (isort ls1)
	       :hyps (loip ls2) (orderedp ls2) (perm ls1 ls2))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ISORT LS1) (((LOIP LS1))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1005 examples across 3 subgoals, of which 11 (11 unique)
satisfied the hypotheses, and found 8 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS2 '(0)) (LS1 '(0)))
 -- ((LS2 NIL) (LS1 NIL))
 [found in : "Goal"]
(IMPLIES (AND (LOIP LS1) (LOIP LS2) (ORDEREDP LS2) (PERM LS1 LS2)) NIL)
 -- ((LS2 '(0 0)) (LS1 '(0 0)))
 -- ((LS2 '(-1 0)) (LS1 '(-1 0)))
 -- ((LS2 NIL) (LS1 NIL))
 [found in : "Goal'"]
(IMPLIES (AND (LOIP LS1) (LOIP LS2) (ORDEREDP LS2)) (NOT (PERM LS1 LS2)))
 -- ((LS2 NIL) (LS1 NIL))

Cases in which the conjecture is true include:
 [found in : "Goal'"]
 -- ((LS2 '(-10 0 0)) (LS1 NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS2 '(0 0)) (LS1 '(-1 0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS2 NIL) (LS1 '(-14)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS2 '(0)) (LS1 '(0)))
                  ((LS2 NIL) (LS1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LS2 (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::LS1 (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::LS2 NIL) (ACL2S::LS1 NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::LOIP ACL2S::LS1) (ACL2S::LOIP ACL2S::LS2) (ACL2S::ORDEREDP ACL2S::LS2) (ACL2S::PERM ACL2S::LS1 ACL2S::LS2)) (EQUAL (ACL2S::ISORT ACL2S::LS1) ACL2S::LS2)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 10 (10 unique)
satisfied the hypotheses, and found 0 counterexamples and 10 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS2 '(0)) (LS1 '(0)))
 -- ((LS2 '(-1 0)) (LS1 '(-1 0)))
 -- ((LS2 NIL) (LS1 NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (LOIP LS1)
              (LOIP LS2)
              (ORDEREDP LS2)
              (PERM LS1 LS2))
         (EQUAL (ISORT LS1) LS2))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm isort-ordered
  (IMPLIES (AND (LOIP LS)
		(LOIP (ISORT LS)))
	   (EQUAL (ORDEREDP (ISORT LS)) T)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint:

Goal'
(IMPLIES (LOIP LS)
         (ORDEREDP (ISORT LS)))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Two induction schemes are suggested
by this conjecture.  These merge into one derived induction scheme.

We will induct according to a scheme suggested by (ISORT LS).  This
suggestion was produced using the :induction rules ISORT-INDUCTION-SCHEME,
ISORT-INDUCTION-SCHEME-FROM-DEFINITION and LOIP.  If we let (:P LS)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (LOIP LS)) (:P LS))
     (IMPLIES (AND (LOIP LS)
                   (NOT (ENDP LS))
                   (:P (CDR LS)))
              (:P LS))
     (IMPLIES (AND (LOIP LS) (ENDP LS))
              (:P LS))).
This induction is justified by the same argument used to admit ISORT.
When applied to the goal at hand the above induction scheme produces
three nontautological subgoals.
Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint while proving *1 (descended from Goal'):

Subgoal *1/3''
(IMPLIES (AND (INTEGERP (CAR LS))
              (LOIP (CDR LS))
              (CONSP LS)
              (ORDEREDP (ISORT (CDR LS))))
         (ORDEREDP (INSERT (CAR LS) (ISORT (CDR LS)))))

*1.1 (Subgoal *1/3'6') is pushed for proof by induction.

])
Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


So we now return to *1.1, which is

(IMPLIES (AND (INTEGERP LS1) (ORDEREDP IT))
         (ORDEREDP (INSERT LS1 IT))).

No induction schemes are suggested by *1.1.  Consequently, the proof
attempt has failed.

Summary
Form:  ( DEFTHM ISORT-ORDERED ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LOIP-IMPLIES-TLP)
        (:DEFINITION ENDP)
        (:DEFINITION ISORT-DEFINITION-RULE)
        (:DEFINITION LOIP)
        (:DEFINITION NOT)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART ISORT)
        (:EXECUTABLE-COUNTERPART ORDEREDP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING LOI=>DEF)
        (:INDUCTION ISORT-INDUCTION-SCHEME)
        (:INDUCTION ISORT-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION LOIP)
        (:REWRITE ISORT-CONTRACT)
        (:TYPE-PRESCRIPTION ISORT-CONTRACT)
        (:TYPE-PRESCRIPTION LOIP)
        (:TYPE-PRESCRIPTION ORDEREDP-CONTRACT))
Warnings:  Invariant-risk
Time:  0.82 seconds (prove: 0.38, print: 0.00, other: 0.43)
Prover steps counted:  7883

---
The key checkpoint goals, below, may help you to debug this failure.
See :DOC failure and see :DOC set-checkpoint-summary-limit.
---

*** Key checkpoint at the top level: ***

Goal'
(IMPLIES (LOIP LS)
         (ORDEREDP (ISORT LS)))

*** Key checkpoint under a top-level induction: ***

Subgoal *1/3''
(IMPLIES (AND (INTEGERP (CAR LS))
              (LOIP (CDR LS))
              (CONSP LS)
              (ORDEREDP (ISORT (CDR LS))))
         (ORDEREDP (INSERT (CAR LS) (ISORT (CDR LS)))))

ACL2 Error in ( DEFTHM ISORT-ORDERED ...):  See :DOC failure.

******** FAILED ********

**Summary of Cgen/testing**
We tested 3000 examples across 6 subgoals, of which 1657 (1657 unique)
satisfied the hypotheses, and found 0 counterexamples and 1657 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((LS '(91)))
 -- ((LS '(0)))
 -- ((LS '(-1)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (orderedp (insert x ls))
	       :with sorting-fns)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ORDEREDP (INSERT X LS))
  (((INTEGERP X))
   ((LOIP (INSERT X LS)))
   ((LOIP LS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1500 (1500 unique)
satisfied the hypotheses, and found 1500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-44 -6)) (X 497))
 -- ((LS '(-5)) (X -352))
 -- ((LS '(0 0)) (X 254))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-44 -6)) (X 497))
                  ((LS '(-5)) (X -352))
                  ((LS '(0 0)) (X 254))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 1) NIL))) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1 1 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 0 0 0 0 0 1 1 0 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1 1 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (INTEGERP ACL2S::X) (ACL2S::LOIP (ACL2S::INSERT ACL2S::X ACL2S::LS)) (ACL2S::LOIP ACL2S::LS)) (EQUAL (ACL2S::ORDEREDP (ACL2S::INSERT ACL2S::X ACL2S::LS)) T)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 27 examples across 1 subgoals, of which 27 (27 unique) satisfied
the hypotheses, and found 3 counterexamples and 24 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(408 9)) (X 450))
 -- ((LS '(7 0)) (X 449))
 -- ((LS '(353 15)) (X 162))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS NIL) (X 158))
 -- ((LS '(-1 0)) (X 155))
 -- ((LS NIL) (X 319))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(408 9)) (X 450))
                  ((LS '(7 0)) (X 449))
                  ((LS '(353 15)) (X 162))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1) NIL))) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 0 1 1 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 0 1 1 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) NIL))) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 1 0 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 1) NIL))) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1 1 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 0 0 0 0 0 1 1 0 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1 1 1 1)))) '(NIL NIL NIL T T T)) 
"form tested" 
(IMPLIES (AND (INTEGERP ACL2S::X) (ACL2S::LOIP (ACL2S::INSERT ACL2S::X ACL2S::LS)) (ACL2S::LOIP ACL2S::LS)) (EQUAL (ACL2S::ORDEREDP (ACL2S::INSERT ACL2S::X ACL2S::LS)) (ACL2S::ORDEREDP ACL2S::LS))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Splitter note (see :DOC splitter) for Goal (2 subgoals).
  if-intro: ((:DEFINITION IFF))


([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (INTEGERP X)
              (LOIP LS)
              (NOT (ORDEREDP (INSERT X LS))))
         (NOT (ORDEREDP LS)))

*1 (Subgoal 2) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (INTEGERP X)
              (LOIP LS)
              (ORDEREDP (INSERT X LS)))
         (ORDEREDP LS))

*2 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *2 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 2000 examples across 4 subgoals, of which 1480 (1480 unique)
satisfied the hypotheses, and found 0 counterexamples and 1480 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS NIL) (X 1))
 -- ((LS NIL) (X -36))
 -- ((LS NIL) (X 245))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (INTEGERP X)
              (LOIP (INSERT X LS))
              (LOIP LS))
         (EQUAL (ORDEREDP (INSERT X LS))
                (ORDEREDP LS)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm insert-ordered
  (IMPLIES (AND (INTEGERP X)
		(LOIP (INSERT X LS))
		(LOIP LS))
	   (EQUAL (ORDEREDP (INSERT X LS))
		  (ORDEREDP LS))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Goal (2 subgoals).
  if-intro: ((:DEFINITION IFF))

Subgoal 2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (INTEGERP X)
              (LOIP LS)
              (NOT (ORDEREDP (INSERT X LS))))
         (NOT (ORDEREDP LS)))

*1 (Subgoal 2) is pushed for proof by induction.

])
Subgoal 1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (INTEGERP X)
              (LOIP LS)
              (ORDEREDP (INSERT X LS)))
         (ORDEREDP LS))

Normally we would attempt to prove Subgoal 1 by induction.  However,
we prefer in this instance to focus on the original input conjecture
rather than this simplified special case.  We therefore abandon our
previous work on this conjecture and reassign the name *1 to the original
conjecture.  (See :DOC otf-flg.)

])

Perhaps we can prove *1 by induction.  Four induction schemes are suggested
by this conjecture.  Subsumption reduces that number to three.  These
merge into one derived induction scheme.  

We will induct according to a scheme suggested by (ORDEREDP LS), but
modified to accommodate (LOIP LS) and (INSERT X LS).  These suggestions
were produced using the :induction rules INSERT-INDUCTION-SCHEME, 
INSERT-INDUCTION-SCHEME-FROM-DEFINITION, LOIP, ORDEREDP-INDUCTION-SCHEME
and ORDEREDP-INDUCTION-SCHEME-FROM-DEFINITION.  If we let (:P LS X)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (LOIP LS)) (:P LS X))
     (IMPLIES (AND (LOIP LS)
                   (NOT (ENDP LS))
                   (NOT (ENDP (CDR LS)))
                   (< (CADR LS) (CAR LS)))
              (:P LS X))
     (IMPLIES (AND (LOIP LS)
                   (NOT (ENDP LS))
                   (NOT (ENDP (CDR LS)))
                   (<= (CAR LS) (CADR LS))
                   (:P (CDR LS) X))
              (:P LS X))
     (IMPLIES (AND (LOIP LS)
                   (NOT (ENDP LS))
                   (ENDP (CDR LS)))
              (:P LS X))
     (IMPLIES (AND (LOIP LS) (ENDP LS))
              (:P LS X))).
This induction is justified by the same argument used to admit ORDEREDP.
When applied to the goal at hand the above induction scheme produces
four nontautological subgoals.
Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/4' (5 subgoals).
  if-intro: ((:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LOIP)
             (:DEFINITION ORDEREDP-DEFINITION-RULE)
             (:REWRITE ACL2::DEFAULT-LESS-THAN-1))

Subgoal *1/4.5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.5''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.5'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/4.5''' (2 subgoals).
  if-intro: ((:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LOIP))

Subgoal *1/4.5.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.5.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.4''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.4'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/4.4''' (3 subgoals).
  if-intro: ((:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LOIP)
             (:DEFINITION ORDEREDP-DEFINITION-RULE)
             (:REWRITE ACL2::DEFAULT-LESS-THAN-1))

Subgoal *1/4.4.3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.4.3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.4.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.4.2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.4.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.4.1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.3''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.3'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/3' (3 subgoals).
  if-intro: ((:DEFINITION IFF)
             (:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LOIP)
             (:DEFINITION ORDEREDP-DEFINITION-RULE)
             (:REWRITE ACL2::DEFAULT-LESS-THAN-1))

Subgoal *1/3.3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3.2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3.2''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3.2'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/3.2''' (3 subgoals).
  if-intro: ((:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LOIP)
             (:DEFINITION ORDEREDP-DEFINITION-RULE)
             (:REWRITE ACL2::DEFAULT-LESS-THAN-1))

Subgoal *1/3.2.3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3.2.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3.2.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/2' (3 subgoals).
  if-intro: ((:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LOIP)
             (:DEFINITION ORDEREDP-DEFINITION-RULE)
             (:REWRITE ACL2::DEFAULT-LESS-THAN-1))

Subgoal *1/2.3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2.2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal is COMPLETED!

Q.E.D.

Summary
Form:  ( DEFTHM INSERT-ORDERED ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER ACL2::LOIP-IMPLIES-TLP)
        (:DEFINITION ENDP)
        (:DEFINITION IFF)
        (:DEFINITION INSERT-DEFINITION-RULE)
        (:DEFINITION LOIP)
        (:DEFINITION NOT)
        (:DEFINITION ORDEREDP-DEFINITION-RULE)
        (:DEFINITION SYNP)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:EXECUTABLE-COUNTERPART LOIP)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART ORDEREDP)
        (:EXECUTABLE-COUNTERPART TAU-SYSTEM)
        (:FAKE-RUNE-FOR-LINEAR NIL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING LOI=>DEF)
        (:INDUCTION INSERT-INDUCTION-SCHEME)
        (:INDUCTION INSERT-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION LOIP)
        (:INDUCTION ORDEREDP-INDUCTION-SCHEME)
        (:INDUCTION ORDEREDP-INDUCTION-SCHEME-FROM-DEFINITION)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE CONS-LOIP-SIG)
        (:REWRITE ACL2::CONSP-UNDER-IFF-WHEN-TRUE-LISTP)
        (:REWRITE ACL2::DEFAULT-LESS-THAN-1)
        (:REWRITE ACL2::EQUAL-OF-BOOLEANS-REWRITE)
        (:REWRITE INSERT-CONTRACT)
        (:REWRITE ACL2::REMOVE-STRICT-INEQUALITIES)
        (:REWRITE ACL2::REMOVE-WEAK-INEQUALITIES)
        (:REWRITE ACL2::TRUE-LISTP-OF-CONS)
        (:TYPE-PRESCRIPTION INSERT-CONTRACT)
        (:TYPE-PRESCRIPTION LOIP)
        (:TYPE-PRESCRIPTION ORDEREDP-CONTRACT))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION IFF)
             (:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LOIP)
             (:DEFINITION ORDEREDP-DEFINITION-RULE)
             (:REWRITE ACL2::DEFAULT-LESS-THAN-1))
Warnings:  Invariant-risk
Time:  1.67 seconds (prove: 1.07, print: 0.01, other: 0.58)
Prover steps counted:  24536

**Summary of Cgen/testing**
We tested 3500 examples across 7 subgoals, of which 1041 (1041 unique)
satisfied the hypotheses, and found 0 counterexamples and 1041 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((LS '(0)) (X 14))
 -- ((LS NIL) (X -455))
 -- ((LS NIL) (X -1))
 INSERT-ORDERED

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm isort-ordered
  (IMPLIES (AND (LOIP LS)
		(LOIP (ISORT LS)))
	   (EQUAL (ORDEREDP (ISORT LS)) T)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint:

Goal'
(IMPLIES (LOIP LS)
         (ORDEREDP (ISORT LS)))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Two induction schemes are suggested
by this conjecture.  These merge into one derived induction scheme.

We will induct according to a scheme suggested by (ISORT LS).  This
suggestion was produced using the :induction rules ISORT-INDUCTION-SCHEME,
ISORT-INDUCTION-SCHEME-FROM-DEFINITION and LOIP.  If we let (:P LS)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (LOIP LS)) (:P LS))
     (IMPLIES (AND (LOIP LS)
                   (NOT (ENDP LS))
                   (:P (CDR LS)))
              (:P LS))
     (IMPLIES (AND (LOIP LS) (ENDP LS))
              (:P LS))).
This induction is justified by the same argument used to admit ISORT.
When applied to the goal at hand the above induction scheme produces
three nontautological subgoals.
Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal' is COMPLETED!

Q.E.D.

Summary
Form:  ( DEFTHM ISORT-ORDERED ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LOIP-IMPLIES-TLP)
        (:DEFINITION ENDP)
        (:DEFINITION ISORT-DEFINITION-RULE)
        (:DEFINITION LOIP)
        (:DEFINITION NOT)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART ISORT)
        (:EXECUTABLE-COUNTERPART ORDEREDP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING LOI=>DEF)
        (:INDUCTION ISORT-INDUCTION-SCHEME)
        (:INDUCTION ISORT-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION LOIP)
        (:REWRITE INSERT-ORDERED)
        (:REWRITE ISORT-CONTRACT)
        (:TYPE-PRESCRIPTION INSERT-CONTRACT)
        (:TYPE-PRESCRIPTION ISORT-CONTRACT)
        (:TYPE-PRESCRIPTION LOIP)
        (:TYPE-PRESCRIPTION ORDEREDP-CONTRACT))
Warnings:  Invariant-risk
Time:  0.28 seconds (prove: 0.16, print: 0.00, other: 0.11)
Prover steps counted:  2325

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 502 (502 unique)
satisfied the hypotheses, and found 0 counterexamples and 502 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((LS NIL))
 -- ((LS '(-497 -5 1)))
 -- ((LS '(2)))
 ISORT-ORDERED

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (perm ls (isort ls))
	       :with sorting-fns)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM PERM LS (ISORT LS))
  (((LOIP LS)) ((LOIP (ISORT LS)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 996 (996 unique)
satisfied the hypotheses, and found 996 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-41)))
 -- ((LS NIL))
 -- ((LS '(-2 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-41)))
                  ((LS NIL))
                  ((LS '(-2 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 0 1) NIL))) ((ACL2S::LS NIL)) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::LOIP ACL2S::LS) (ACL2S::LOIP (ACL2S::ISORT ACL2S::LS))) (EQUAL (ACL2S::PERM ACL2S::LS (ACL2S::ISORT ACL2S::LS)) T)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (LOIP LS) (PERM LS (ISORT LS)))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 714 (714 unique)
satisfied the hypotheses, and found 0 counterexamples and 714 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(-466)))
 -- ((LS '(19 0)))
 -- ((LS NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (LOIP LS) (LOIP (ISORT LS)))
         (EQUAL (PERM LS (ISORT LS)) T))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (cons x ls) (insert x ls)
	       :hyps (and (loip ls) (integerp x))
	       :with sorting-fns)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1495 (1495 unique)
satisfied the hypotheses, and found 1495 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X 163) (LS NIL))
 -- ((X -382) (LS '(267 12)))
 -- ((X -339) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 163) (LS NIL))
                  ((X -382) (LS '(267 12)))
                  ((X -339) (LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((CONS ACL2S::X ACL2S::LS) (ACL2S::INSERT ACL2S::X ACL2S::LS)) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 1 0 1)) (ACL2S::LS NIL)) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 0 1 1 1 1 1 1 0 1)) (ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 0 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) NIL)))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 1 0 1 0 1)) (ACL2S::LS NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (AND (ACL2S::LOIP ACL2S::LS) (INTEGERP ACL2S::X))) (EQUAL T (ACL2S::PERM (CONS ACL2S::X ACL2S::LS) (ACL2S::INSERT ACL2S::X ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION PERM-DEFINITION-RULE))


([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (LOIP LS) (INTEGERP X))
         (IN X (INSERT X LS)))

*1 (Subgoal 2) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (LOIP LS) (INTEGERP X))
         (PERM LS (MY-REMOVE X (INSERT X LS))))

*2 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *2 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 2000 examples across 4 subgoals, of which 1981 (1981 unique)
satisfied the hypotheses, and found 0 counterexamples and 1981 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X -4) (LS NIL))
 -- ((X -190) (LS '(427)))
 -- ((X -15) (LS NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (LOIP LS) (INTEGERP X))
         (EQUAL T (PERM (CONS X LS) (INSERT X LS))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 my-lte (a b)
  :input-contract (and (integerp a) (integerp b))
  :output-contract (booleanp (my-lte a b))
  (<= a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.11 seconds
Form:  ( DEFUN MY-LTE ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM MY-LTE-CONTRACT ...)
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS MY-LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.11 seconds

Function Name : MY-LTE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.26 seconds (prove: 0.03, print: 0.00, other: 1.23)
Prover steps counted:  62
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 less (x ls)
  :input-contract (and (integerp x) (loip ls))
  :output-contract (loip (less x ls))
  (cond
   ((endp ls) nil)
   ((my-lte (car ls) x)
    (cons (car ls) (less x (cdr ls))))	  
   (t (less x (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LS))
 (LOIP LS)
 (INTEGERP X)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LS))
 (LOIP LS)
 (INTEGERP X)
 (NOT (ENDP LS))
 (MY-LTE (CAR LS) X)
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LS))
 (LOIP LS)
 (INTEGERP X)
 (NOT (ENDP LS))
 (NOT (MY-LTE (CAR LS) X))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.72 seconds
Form:  ( DEFUN LESS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LESS-CONTRACT ...)
Time:  0.09 seconds (prove: 0.06, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.06, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS LESS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.16 seconds

Function Name : LESS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.22 seconds (prove: 0.20, print: 0.00, other: 1.02)
Prover steps counted:  1346
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(add-to-group sorting-fns my-lte less)
SORTING-FNS
ACL2S !>(defunc2 notless (x ls)
  :input-contract (and (integerp x) (loip ls))
  :output-contract (loip (notless x ls))
  (cond
   ((endp ls) nil)
   ((not (my-lte (car ls) x))
    (cons (car ls) (notless x (cdr ls))))	  
   (t (notless x (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CAR LS))
 (LOIP LS)
 (INTEGERP X)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CAR LS))
 (LOIP LS)
 (INTEGERP X)
 (NOT (ENDP LS))
 (NOT (MY-LTE (CAR LS) X))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CDR LS))
 (LOIP LS)
 (INTEGERP X)
 (NOT (ENDP LS))
 (MY-LTE (CAR LS) X)
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.70 seconds
Form:  ( DEFUN NOTLESS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NOTLESS-CONTRACT ...)
Time:  0.09 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS NOTLESS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.16 seconds

Function Name : NOTLESS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.21 seconds (prove: 0.19, print: 0.00, other: 1.02)
Prover steps counted:  1360
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(add-to-group sorting-fns my-lte notless)
SORTING-FNS
ACL2S !>(defunc2 qsort (ls)
  :input-contract (loip ls)
  :output-contract (loip (qsort ls))
  (cond
   ((endp ls) nil)
   (t (append (qsort (less (car ls) (cdr ls)))
	      (cons (car ls)
		    (qsort (notless (car ls) (cdr ls))))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY QSORT))
             '(CDR LS))
 (EXTRA-INFO '(:GUARD (:BODY QSORT))
             '(CAR LS))
 (LOIP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.53 seconds
Form:  ( DEFUN QSORT ...)
Time:  2.24 seconds (prove: 2.22, print: 0.00, other: 0.01)
Form:  ( DEFTHM QSORT-CONTRACT ...)
Time:  0.08 seconds (prove: 0.04, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.04, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS QSORT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 4.65 seconds

Function Name : QSORT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  5.60 seconds (prove: 4.66, print: 0.00, other: 0.94)
Prover steps counted:  118108
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (isort (less x ls))
	       :required-expressions (isort ls) x
	       :with less)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ISORT (LESS X LS))
  (((INTEGERP X))
   ((LOIP (LESS X LS)))
   ((LOIP LS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1481 (1481 unique)
satisfied the hypotheses, and found 1481 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS NIL) (X 89))
 -- ((LS NIL) (X 226))
 -- ((LS '(36 -1 -1)) (X 4))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS NIL) (X 89))
                  ((LS NIL) (X 226))
                  ((LS '(36 -1 -1)) (X 4))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ISORT ACL2S::LS) ACL2S::X) ACL2S::Q '(((ACL2S::LS NIL) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1 0 1))) ((ACL2S::LS NIL) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 1 1 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 1)))) '(NIL NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) 
"form tested" 
(IMPLIES (AND (INTEGERP ACL2S::X) (ACL2S::LOIP (ACL2S::LESS ACL2S::X ACL2S::LS)) (ACL2S::LOIP ACL2S::LS)) (EQUAL (ACL2S::ISORT (ACL2S::LESS ACL2S::X ACL2S::LS)) (ACL2S::LESS ACL2S::X (ACL2S::ISORT ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (INTEGERP X) (LOIP LS))
         (EQUAL (ISORT (LESS X LS))
                (LESS X (ISORT LS))))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1490 (1490 unique)
satisfied the hypotheses, and found 0 counterexamples and 1490 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS NIL) (X 71))
 -- ((LS NIL) (X -2))
 -- ((LS '(-175 -9)) (X 4))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (INTEGERP X)
              (LOIP (LESS X LS))
              (LOIP LS))
         (EQUAL (ISORT (LESS X LS))
                (LESS X (ISORT LS))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (isort (notless x ls))
	       :required-expressions (isort ls)
	       :with notless)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ISORT (NOTLESS X LS))
  (((INTEGERP X))
   ((LOIP (NOTLESS X LS)))
   ((LOIP LS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1499 (1499 unique)
satisfied the hypotheses, and found 1499 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-1)) (X -21))
 -- ((LS '(-7 0)) (X 163))
 -- ((LS NIL) (X -60))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-1)) (X -21))
                  ((LS '(-7 0)) (X 163))
                  ((LS NIL) (X -60))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ISORT ACL2S::LS)) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 1 0 1 0 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 1 0 1))) ((ACL2S::LS NIL) (ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1 1 1)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL) NIL NIL)) 
"form tested" 
(IMPLIES (AND (INTEGERP ACL2S::X) (ACL2S::LOIP (ACL2S::NOTLESS ACL2S::X ACL2S::LS)) (ACL2S::LOIP ACL2S::LS)) (EQUAL (ACL2S::ISORT (ACL2S::NOTLESS ACL2S::X ACL2S::LS)) (ACL2S::NOTLESS ACL2S::X (ACL2S::ISORT ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (INTEGERP X) (LOIP LS))
         (EQUAL (ISORT (NOTLESS X LS))
                (NOTLESS X (ISORT LS))))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1499 (1499 unique)
satisfied the hypotheses, and found 0 counterexamples and 1499 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS NIL) (X -166))
 -- ((LS '(-1 0)) (X 50))
 -- ((LS '(17)) (X -2))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (INTEGERP X)
              (LOIP (NOTLESS X LS))
              (LOIP LS))
         (EQUAL (ISORT (NOTLESS X LS))
                (NOTLESS X (ISORT LS))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (append (isort (less (car x) (cdr x)))
		       (cons (car x)
			     (isort (notless (car x) (cdr x)))))
	       :required-expressions (car x) (cdr x)
	       :with insert isort
	       :hyps (consp x))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM BINARY-APPEND
         (ISORT (LESS (CAR X) (CDR X)))
         (CONS (CAR X)
               (ISORT (NOTLESS (CAR X) (CDR X)))))
  (((LOIP (LESS (CAR X) (CDR X))))
   ((LOIP (NOTLESS (CAR X) (CDR X))))
   ((INTEGERP (CAR X)))
   ((TRUE-LISTP (ISORT (LESS (CAR X) (CDR X)))))
   ((LOIP (CDR X)))
   ((CONSP X) (EQUAL X 'NIL))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 2000 examples across 4 subgoals, of which 509 (509 unique)
satisfied the hypotheses, and found 509 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X '(-6)))
 -- ((X '(0 -1)))
 -- ((X '(0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X '(-6)))
                  ((X '(0 -1)))
                  ((X '(0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((CAR ACL2S::X) (CDR ACL2S::X)) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 1) NIL))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) 
"form tested" 
(IMPLIES (AND (ACL2S::LOIP (ACL2S::LESS (CAR ACL2S::X) (CDR ACL2S::X))) (ACL2S::LOIP (ACL2S::NOTLESS (CAR ACL2S::X) (CDR ACL2S::X))) (INTEGERP (CAR ACL2S::X)) (TRUE-LISTP (ACL2S::ISORT (ACL2S::LESS (CAR ACL2S::X) (CDR ACL2S::X)))) (ACL2S::LOIP (CDR ACL2S::X)) (OR (CONSP ACL2S::X) (EQUAL ACL2S::X 'NIL)) (CONSP ACL2S::X)) (EQUAL (APPEND (ACL2S::ISORT (ACL2S::LESS (CAR ACL2S::X) (CDR ACL2S::X))) (CONS (CAR ACL2S::X) (ACL2S::ISORT (ACL2S::NOTLESS (CAR ACL2S::X) (CDR ACL2S::X))))) (ACL2S::INSERT (CAR ACL2S::X) (CDR ACL2S::X)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1530 examples across 4 subgoals, of which 41 (41 unique)
satisfied the hypotheses, and found 3 counterexamples and 38 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'''"]
(IMPLIES (AND (INTEGERP X1) (LOIP X2))
         (EQUAL (APPEND (ISORT (LESS X1 X2))
                        (CONS X1 (ISORT (NOTLESS X1 X2))))
                (INSERT X1 X2)))

 -- ((X '(-44 142 4 2)))
 -- ((X '(-1 33 0 0)))
 -- ((X '(-50 3 -1)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X '(0 0)))
 -- ((X '(0 -1)))
 -- ((X '(0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X '(-44 142 4 2)))
                  ((X '(-1 33 0 0)))
                  ((X '(-50 3 -1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((CAR ACL2S::X) (CDR ACL2S::X)) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)))))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 1) NIL))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 0 0 1) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) 
"form tested" 
(IMPLIES (AND (ACL2S::LOIP (ACL2S::LESS (CAR ACL2S::X) (CDR ACL2S::X))) (ACL2S::LOIP (ACL2S::NOTLESS (CAR ACL2S::X) (CDR ACL2S::X))) (INTEGERP (CAR ACL2S::X)) (TRUE-LISTP (ACL2S::ISORT (ACL2S::LESS (CAR ACL2S::X) (CDR ACL2S::X)))) (ACL2S::LOIP (CDR ACL2S::X)) (OR (CONSP ACL2S::X) (EQUAL ACL2S::X 'NIL)) (CONSP ACL2S::X)) (EQUAL (APPEND (ACL2S::ISORT (ACL2S::LESS (CAR ACL2S::X) (CDR ACL2S::X))) (CONS (CAR ACL2S::X) (ACL2S::ISORT (ACL2S::NOTLESS (CAR ACL2S::X) (CDR ACL2S::X))))) (ACL2S::INSERT (CAR ACL2S::X) (ACL2S::ISORT (CDR ACL2S::X))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (INTEGERP (CAR X))
              (LOIP (CDR X))
              (CONSP X))
         (EQUAL (APPEND (ISORT (LESS (CAR X) (CDR X)))
                        (CONS (CAR X)
                              (ISORT (NOTLESS (CAR X) (CDR X)))))
                (INSERT (CAR X) (ISORT (CDR X)))))

*1 (Goal''') is pushed for proof by induction:
(IMPLIES (AND (INTEGERP X1) (LOIP X2))
         (EQUAL (APPEND (ISORT (LESS X1 X2))
                        (CONS X1 (ISORT (NOTLESS X1 X2))))
                (INSERT X1 (ISORT X2)))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 2000 examples across 4 subgoals, of which 512 (512 unique)
satisfied the hypotheses, and found 0 counterexamples and 512 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X '(9)))
 -- ((X '(0 0 -1)))
 -- ((X '(0)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (LOIP (LESS (CAR X) (CDR X)))
              (LOIP (NOTLESS (CAR X) (CDR X)))
              (INTEGERP (CAR X))
              (TRUE-LISTP (ISORT (LESS (CAR X) (CDR X))))
              (LOIP (CDR X))
              (OR (CONSP X) (EQUAL X 'NIL))
              (CONSP X))
         (EQUAL (APPEND (ISORT (LESS (CAR X) (CDR X)))
                        (CONS (CAR X)
                              (ISORT (NOTLESS (CAR X) (CDR X)))))
                (INSERT (CAR X) (ISORT (CDR X)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (insert x ls)
	       :required-expressions (notless x ls) (less x ls) 
	       :with append cons
	       :hyps (orderedp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM INSERT X LS)
  (((INTEGERP X)) ((LOIP LS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1013 examples across 3 subgoals, of which 894 (894 unique)
satisfied the hypotheses, and found 891 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-24 -2 -1)) (X -183))
 -- ((LS NIL) (X 40))
 -- ((LS '(16)) (X 0))

Cases in which the conjecture is true include:
 [found in : "Goal'"]
 -- ((LS '(2 0 0)) (X -54))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(10 -1 0)) (X 3))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(370 3 0 0)) (X 495))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-24 -2 -1)) (X -183))
                  ((LS NIL) (X 40))
                  ((LS '(16)) (X 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::NOTLESS ACL2S::X ACL2S::LS) (ACL2S::LESS ACL2S::X ACL2S::LS)) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 1 1 1 0 1 1 0 1))) ((ACL2S::LS NIL) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0))))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 1) NIL))))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: WALK
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (insert x ls)
	       :required-expressions (less x ls) (notless x ls) 
	       :with append cons
	       :hyps (orderedp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM INSERT X LS)
  (((INTEGERP X)) ((LOIP LS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1015 examples across 3 subgoals, of which 907 (907 unique)
satisfied the hypotheses, and found 904 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS NIL) (X -180))
 -- ((LS NIL) (X 20))
 -- ((LS NIL) (X 125))

Cases in which the conjecture is true include:
 [found in : "Goal'"]
 -- ((LS '(2 -1)) (X 268))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(14 0)) (X 314))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(-34 2 -1)) (X -275))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS NIL) (X -180))
                  ((LS NIL) (X 20))
                  ((LS NIL) (X 125))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::LESS ACL2S::X ACL2S::LS) (ACL2S::NOTLESS ACL2S::X ACL2S::LS)) ACL2S::Q '(((ACL2S::LS NIL) (ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 0 0 1 0 1 1 0 1))) ((ACL2S::LS NIL) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1))) ((ACL2S::LS NIL) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1 1 1)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 0 1 1 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1 1 1) NIL))) 
"form tested" 
(IMPLIES (AND (INTEGERP ACL2S::X) (ACL2S::LOIP ACL2S::LS) (ACL2S::ORDEREDP ACL2S::LS)) (EQUAL (ACL2S::INSERT ACL2S::X ACL2S::LS) (APPEND (ACL2S::LESS ACL2S::X ACL2S::LS) (APPEND (ACL2S::NOTLESS ACL2S::X ACL2S::LS) (CONS ACL2S::X ACL2S::LS))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 11 examples across 1 subgoals, of which 10 (10 unique) satisfied
the hypotheses, and found 3 counterexamples and 7 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-2)) (X -4))
 -- ((LS '(358)) (X 435))
 -- ((LS '(0)) (X 16))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS NIL) (X 293))
 -- ((LS NIL) (X -5))
 -- ((LS NIL) (X 495))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-2)) (X -4))
                  ((LS '(358)) (X 435))
                  ((LS '(0)) (X 16))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::LESS ACL2S::X ACL2S::LS) (ACL2S::NOTLESS ACL2S::X ACL2S::LS)) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 0 0 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 0 0 1 1 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 1 0 1 1))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 1))) ((ACL2S::LS NIL) (ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 0 0 1 0 1 1 0 1))) ((ACL2S::LS NIL) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1))) ((ACL2S::LS NIL) (ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1 1 1)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 0 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 1 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 0 1 1 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1 1 1) NIL))) 
"form tested" 
(IMPLIES (AND (INTEGERP ACL2S::X) (ACL2S::LOIP ACL2S::LS) (ACL2S::ORDEREDP ACL2S::LS)) (EQUAL (ACL2S::INSERT ACL2S::X ACL2S::LS) (APPEND (ACL2S::LESS ACL2S::X ACL2S::LS) (CONS ACL2S::X (ACL2S::NOTLESS ACL2S::X ACL2S::LS))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 1324 (1324 unique)
satisfied the hypotheses, and found 0 counterexamples and 1324 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(-29)) (X 17))
 -- ((LS NIL) (X 430))
 -- ((LS '(-1)) (X 4))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (INTEGERP X)
              (LOIP LS)
              (ORDEREDP LS))
         (EQUAL (INSERT X LS)
                (APPEND (LESS X LS)
                        (CONS X (NOTLESS X LS)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(load "top" :uncertified-okp t)


ACL2 Error in TOP-LEVEL:  The symbol LOAD (in package "COMMON-LISP")
has neither a function nor macro definition in ACL2.  Moreover, this
symbol is in the main Lisp package; hence, you cannot define it in
ACL2.  See :DOC near-misses.  Note:  this error occurred in the context
(LOAD "top" :UNCERTIFIED-OKP T).

ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.76 seconds (prove: 0.00, print: 0.00, other: 2.76)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 xor (a b)
  :input-contract (and (booleanp a) (booleanp b))
  :output-contract (booleanp (xor a b))
  (not (equal a b)))


ACL2 Error in ( DEFUN XOR ...):  The name XOR is in use as a function.
Note that the proposed argument list for XOR, (A B), differs from the
existing argument list, (ACL2::P ACL2::Q).
The redefinition feature is currently off.  See :DOC ld-redefinition-
action.


Note: XOR has already been defined as a system name; that is, it is
built into ACL2.


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.26 seconds (prove: 0.00, print: 0.00, other: 0.26)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(defunc2 my-xor (a b)
  :input-contract (and (booleanp a) (booleanp b))
  :output-contract (booleanp (my-xor a b))
  (not (equal a b)))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.18 seconds
Form:  ( DEFUN MY-XOR ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM MY-XOR-CONTRACT ...)
Time:  0.11 seconds (prove: 0.02, print: 0.00, other: 0.09)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.11 seconds (prove: 0.02, print: 0.00, other: 0.09)
Form:  ( VERIFY-GUARDS MY-XOR ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.17 seconds

Function Name : MY-XOR 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.75 seconds (prove: 0.04, print: 0.00, other: 0.71)
Prover steps counted:  75
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (and p (or q (not q)))
	       :hyps (booleanp p) (booleanp q))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IF P (IF Q Q (NOT Q)) 'NIL) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 398 (398 unique)
satisfied the hypotheses, and found 398 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Q T) (P NIL))
 -- ((Q NIL) (P NIL))
 -- ((Q T) (P T))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q T) (P NIL))
                  ((Q NIL) (P NIL))
                  ((Q T) (P T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Q T) (ACL2S::P NIL)) ((ACL2S::Q NIL) (ACL2S::P NIL)) ((ACL2S::Q T) (ACL2S::P T))) '(NIL NIL T)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::P) (BOOLEANP ACL2S::Q)) (EQUAL (AND ACL2S::P (OR ACL2S::Q (NOT ACL2S::Q))) ACL2S::P)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 288 (288 unique)
satisfied the hypotheses, and found 0 counterexamples and 288 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q T) (P NIL))
 -- ((Q NIL) (P T))
 -- ((Q NIL) (P NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (AND P (OR Q (NOT Q))) P))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (and p (or q (not q)))
	       ;:hyps (booleanp p) (booleanp q)
	       )

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IF P (IF Q Q (NOT Q)) 'NIL) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 999 (999 unique)
satisfied the hypotheses, and found 999 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((P '(5 . 5)) (Q '(0 . 0)))
 -- ((P 0) (Q 0))
 -- ((P '(0 . 5)) (Q '(ACL2::BA)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((P '(5 . 5)) (Q '(0 . 0)))
                  ((P 0) (Q 0))
                  ((P '(0 . 5)) (Q '(ACL2::BA)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::P (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Q (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::Q) (ACL2S::ALLP ACL2S::P)) (EQUAL (AND ACL2S::P (OR ACL2S::Q (NOT ACL2S::Q))) ACL2S::Q)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 8 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 3 counterexamples and 5 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((P '(0)) (Q NIL))
 -- ((P '((7 . 1) -1/4 . 0)) (Q NIL))
 -- ((P NIL) (Q #\A))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((P '((0 #\B) (1 -2))) (Q 'ACL2::BA))
 -- ((P "AAABAB") (Q '(0 . 40)))
 -- ((P '((T . 0) 0 . 1)) (Q 'ACL2::OKGC))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((P '(0)) (Q NIL))
                  ((P '((7 . 1) -1/4 . 0)) (Q NIL))
                  ((P NIL) (Q #\A))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::Q NIL)) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) (ACL2S::INTERNAL-NUMBER (0))))) (ACL2S::Q NIL)) ((ACL2S::P NIL) (ACL2S::Q (ACL2S::INTERNAL-CHAR #\A))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::P (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Q (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)))) '(T T NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::Q) (ACL2S::ALLP ACL2S::P)) (EQUAL (AND ACL2S::P (OR ACL2S::Q (NOT ACL2S::Q))) NIL)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 14 examples across 1 subgoals, of which 14 (14 unique) satisfied
the hypotheses, and found 11 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((P 0) (Q NIL))
 -- ((P '((T . 0) 8 . "A")) (Q '(0 . -3)))
 -- ((P '((2 6) (3 0))) (Q '((2 . ACL2::A) 5 . 5)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((P NIL) (Q '(#\A 2)))
 -- ((P NIL) (Q NIL))
 -- ((P NIL) (Q '(2 . 28)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((P 0) (Q NIL))
                  ((P '((T . 0) 8 . "A")) (Q '(0 . -3)))
                  ((P '((2 6) (3 0)))
                   (Q '((2 . ACL2::A) 5 . 5)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::P (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Q NIL)) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-STRING #\A)))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (1) 1 1)))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-VARSYMBOL A)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::Q NIL)) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) (ACL2S::INTERNAL-NUMBER (0))))) (ACL2S::Q NIL)) ((ACL2S::P NIL) (ACL2S::Q (ACL2S::INTERNAL-CHAR #\A))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::P (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Q (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)))) '(T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (1) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-VARSYMBOL A)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))) T T NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::Q) (ACL2S::ALLP ACL2S::P)) (EQUAL (AND ACL2S::P (OR ACL2S::Q (NOT ACL2S::Q))) NIL)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 9 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 6 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((P '(#\B #\A #\J #\C #\C)) (Q '(-1)))
 -- ((P '(-3/7 . -1)) (Q NIL))
 -- ((P '(-1/3 2)) (Q '(#\A . "A")))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((P NIL) (Q #\B))
 -- ((P NIL) (Q '("ABBAAAA" . 324)))
 -- ((P NIL) (Q '(ACL2::BBAA ACL2::ABA)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((P '(#\B #\A #\J #\C #\C)) (Q '(-1)))
                  ((P '(-3/7 . -1)) (Q NIL))
                  ((P '(-1/3 2)) (Q '(#\A . "A")))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\J) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\C) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\C) NIL)))))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1)) (ACL2S::INTERNAL-NUMBER (1) 1))) (ACL2S::Q NIL)) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-STRING #\A)))) ((ACL2S::P (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Q NIL)) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-STRING #\A)))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (1) 1 1)))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-VARSYMBOL A)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::Q NIL)) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) (ACL2S::INTERNAL-NUMBER (0))))) (ACL2S::Q NIL)) ((ACL2S::P NIL) (ACL2S::Q (ACL2S::INTERNAL-CHAR #\A))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::P (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Q (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::P (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))) (ACL2S::Q (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL) T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-STRING #\A)) T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (1) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-VARSYMBOL A)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1))) T T NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::Q) (ACL2S::ALLP ACL2S::P)) (EQUAL (AND ACL2S::P (OR ACL2S::Q (NOT ACL2S::Q))) NIL)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 8 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 5 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((P '((ACL2::A . 1) T . 0)) (Q -7))
 -- ((P T) (Q "A"))
 -- ((P '(-1/3)) (Q '(-320 . 81)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((P NIL) (Q T))
 -- ((P NIL) (Q '((T 1) ("A" 0))))
 -- ((P NIL) (Q '(#\A #\A #\A #\A #\C)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((P '((ACL2::A . 1) T . 0)) (Q -7))
                  ((P T) (Q "A"))
                  ((P '(-1/3)) (Q '(-320 . 81)))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (and (booleanp p)
                     (booleanp q))
                (equal (and p (or q (not q)))
                       p)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:EXECUTABLE-COUNTERPART NOT)
        (:FAKE-RUNE-FOR-TYPE-SET NIL))
Warnings:  Invariant-risk
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.07)
Prover steps counted:  65

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 135 (135 unique)
satisfied the hypotheses, and found 0 counterexamples and 135 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((Q T) (P NIL))
 -- ((Q NIL) (P NIL))
 -- ((Q T) (P T))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (equal (equal (or p q) p) q)
	       :hyps (booleanp p) (booleanp q))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EQUAL (EQUAL (IF P P Q) P) Q)
  NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 422 (422 unique)
satisfied the hypotheses, and found 422 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Q NIL) (P T))
 -- ((Q NIL) (P NIL))
 -- ((Q T) (P T))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q NIL) (P T))
                  ((Q NIL) (P NIL))
                  ((Q T) (P T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Q NIL) (ACL2S::P T)) ((ACL2S::Q NIL) (ACL2S::P NIL)) ((ACL2S::Q T) (ACL2S::P T))) '(NIL NIL T)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::P) (BOOLEANP ACL2S::Q)) (EQUAL (EQUAL (EQUAL (OR ACL2S::P ACL2S::Q) ACL2S::P) ACL2S::Q) ACL2S::Q)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Q T) (P NIL))
 [found in : "Goal"]
(IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL Q (EQUAL (EQUAL (OR P Q) P) Q)))

 -- ((Q T) (P NIL))
 [found in : "Goal''"]
(IMPLIES (BOOLEANP Q) (NOT Q))
 -- ((Q T) (P NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q T) (P T))
 -- ((Q NIL) (P T))
 -- ((Q NIL) (P NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q T) (P NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Q T) (ACL2S::P NIL)) ((ACL2S::Q NIL) (ACL2S::P T)) ((ACL2S::Q NIL) (ACL2S::P NIL)) ((ACL2S::Q T) (ACL2S::P T))) '(NIL NIL NIL T)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::P) (BOOLEANP ACL2S::Q)) (EQUAL (EQUAL (EQUAL (OR ACL2S::P ACL2S::Q) ACL2S::P) ACL2S::Q) NIL)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Q T) (P T))
 [found in : "Goal"]
(IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (EQUAL (EQUAL (OR P Q) P) Q)
                NIL))

 -- ((Q T) (P T))
 [found in : "Subgoal 2'"]
NIL
 -- ((Q T) (P T))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q T) (P NIL))
 -- ((Q NIL) (P T))
 -- ((Q NIL) (P NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q T) (P T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Q T) (ACL2S::P T)) ((ACL2S::Q T) (ACL2S::P NIL)) ((ACL2S::Q NIL) (ACL2S::P T)) ((ACL2S::Q NIL) (ACL2S::P NIL)) ((ACL2S::Q T) (ACL2S::P T))) '(T NIL NIL NIL T)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::P) (BOOLEANP ACL2S::Q)) (EQUAL (EQUAL (EQUAL (OR ACL2S::P ACL2S::Q) ACL2S::P) ACL2S::Q) NIL)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Q T) (P T))
 [found in : "Goal"]
(IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (EQUAL (EQUAL (OR P Q) P) Q)
                NIL))

 -- ((Q T) (P T))
 [found in : "Subgoal 2'"]
NIL
 -- ((Q T) (P T))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q NIL) (P NIL))
 -- ((Q NIL) (P T))
 -- ((Q T) (P NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q T) (P T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Q T) (ACL2S::P T)) ((ACL2S::Q T) (ACL2S::P T)) ((ACL2S::Q T) (ACL2S::P NIL)) ((ACL2S::Q NIL) (ACL2S::P T)) ((ACL2S::Q NIL) (ACL2S::P NIL)) ((ACL2S::Q T) (ACL2S::P T))) '(T T NIL NIL NIL T)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::P) (BOOLEANP ACL2S::Q)) (EQUAL (EQUAL (EQUAL (OR ACL2S::P ACL2S::Q) ACL2S::P) ACL2S::Q) NIL)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Q T) (P T))
 [found in : "Goal"]
(IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (EQUAL (EQUAL (OR P Q) P) Q)
                NIL))

 -- ((Q T) (P T))
 [found in : "Subgoal 2'"]
NIL
 -- ((Q T) (P T))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q NIL) (P T))
 -- ((Q T) (P NIL))
 -- ((Q NIL) (P NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q T) (P T))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defgroup boolexprs and or not equal)
ALL-GROUPS
ACL2S !>(suggest-lemma (and p (or q (not q)))
	       :hyps (booleanp p) (booleanp q)
	       :with boolexprs)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IF P (IF Q Q (NOT Q)) 'NIL) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 392 (392 unique)
satisfied the hypotheses, and found 392 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Q NIL) (P NIL))
 -- ((Q NIL) (P T))
 -- ((Q T) (P T))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q NIL) (P NIL))
                  ((Q NIL) (P T))
                  ((Q T) (P T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Q NIL) (ACL2S::P NIL)) ((ACL2S::Q NIL) (ACL2S::P T)) ((ACL2S::Q T) (ACL2S::P T))) '(NIL T T)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::P) (BOOLEANP ACL2S::Q)) (EQUAL (AND ACL2S::P (OR ACL2S::Q (NOT ACL2S::Q))) ACL2S::P)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 259 (259 unique)
satisfied the hypotheses, and found 0 counterexamples and 259 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q T) (P NIL))
 -- ((Q NIL) (P T))
 -- ((Q NIL) (P NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (AND P (OR Q (NOT Q))) P))(test? (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (AND P (OR Q (NOT Q))) P)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6FE>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6FE>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(test? (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (AND P (OR Q (NOT Q))) P)))

Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 260 (260 unique)
satisfied the hypotheses, and found 0 counterexamples and 260 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q T) (P T))
 -- ((Q NIL) (P T))
 -- ((Q NIL) (P NIL))

Test? proved the conjecture under consideration. Therefore, no counterexamples
exist. 
ACL2S !>(thm (implies (and (booleanp p)
                     (booleanp q))
                (equal (and p (or q (not q)))
                       p)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:EXECUTABLE-COUNTERPART NOT)
        (:FAKE-RUNE-FOR-TYPE-SET NIL))
Warnings:  Invariant-risk
Time:  0.04 seconds (prove: 0.02, print: 0.00, other: 0.02)
Prover steps counted:  65

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 119 (119 unique)
satisfied the hypotheses, and found 0 counterexamples and 119 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((Q NIL) (P NIL))
 -- ((Q NIL) (P T))
 -- ((Q T) (P T))

Proof succeeded.
ACL2S !>(suggest-lemma (equal (equal (or p q) p) q)
	       :with boolexprs
	       :hyps (booleanp p) (booleanp q))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EQUAL (EQUAL (IF P P Q) P) Q)
  NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 247 (247 unique)
satisfied the hypotheses, and found 3 counterexamples and 244 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (BOOLEANP P) (NOT (BOOLEANP Q)))
 -- ((Q NIL) (P T))
 -- ((Q T) (P T))
 -- ((Q T) (P NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q NIL) (P T))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Q T) (P T))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Q NIL) (P NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q NIL) (P T))
                  ((Q T) (P T))
                  ((Q T) (P NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Q NIL) (ACL2S::P T)) ((ACL2S::Q T) (ACL2S::P T)) ((ACL2S::Q T) (ACL2S::P NIL))) '(NIL T NIL)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::P) (BOOLEANP ACL2S::Q)) (EQUAL (EQUAL (EQUAL (OR ACL2S::P ACL2S::Q) ACL2S::P) ACL2S::Q) (AND ACL2S::Q ACL2S::P))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 238 (238 unique)
satisfied the hypotheses, and found 0 counterexamples and 238 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q T) (P T))
 -- ((Q NIL) (P NIL))
 -- ((Q NIL) (P T))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (EQUAL (EQUAL (OR P Q) P) Q)
                (AND Q P)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(test? (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (EQUAL (EQUAL (OR P Q) P) Q)
                (AND Q P))))

Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 250 (250 unique)
satisfied the hypotheses, and found 0 counterexamples and 250 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q NIL) (P NIL))
 -- ((Q T) (P T))
 -- ((Q NIL) (P T))

Test? proved the conjecture under consideration. Therefore, no counterexamples
exist. 
ACL2S !>(thm (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (EQUAL (EQUAL (OR P Q) P) Q)
                (AND Q P))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:DEFINITION IFF)
        (:REWRITE ACL2::EQUAL-OF-BOOLEANS-REWRITE))
Warnings:  Invariant-risk
Time:  0.05 seconds (prove: 0.02, print: 0.00, other: 0.03)
Prover steps counted:  112

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 120 (120 unique)
satisfied the hypotheses, and found 0 counterexamples and 120 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((Q NIL) (P NIL))
 -- ((Q T) (P T))
 -- ((Q T) (P NIL))

Proof succeeded.
ACL2S !>(defconst *secret-message*
  '(NIL NIL T NIL T T T NIL NIL NIL NIL T T NIL NIL NIL T NIL NIL T NIL
    NIL T NIL NIL NIL T T NIL NIL T T NIL NIL T NIL T NIL T T T NIL
    T NIL NIL T NIL NIL T NIL T T NIL NIL NIL T NIL NIL T NIL T T T
    T NIL T T T NIL T T T T NIL T NIL NIL NIL T T NIL NIL NIL NIL T
    NIL T NIL T T NIL T NIL NIL T NIL T T T NIL NIL T T NIL T NIL
    NIL NIL T T NIL NIL NIL T NIL T NIL NIL T NIL NIL NIL NIL T NIL
    T T T NIL NIL T NIL T NIL T NIL T NIL T NIL T NIL NIL T T NIL
    NIL NIL T NIL T NIL NIL T NIL T NIL T NIL NIL T NIL NIL NIL T T
    T NIL T T NIL NIL T T T NIL NIL NIL T NIL T T NIL T T T NIL T
    NIL NIL T NIL NIL NIL T NIL T T T NIL NIL NIL NIL T T NIL NIL
    NIL T NIL NIL T NIL NIL T NIL NIL NIL NIL NIL T T T NIL NIL T T
    NIL T T T T T T T T T T T NIL NIL T NIL NIL T NIL T T T NIL T T
    T NIL T NIL NIL NIL T NIL NIL NIL NIL NIL NIL T T NIL T T T T
    NIL T NIL NIL NIL T NIL NIL T NIL T T T T NIL T T NIL NIL T T
    NIL T NIL NIL T NIL NIL T NIL T T NIL NIL NIL T T NIL T NIL NIL
    T NIL NIL T NIL NIL T T T T T NIL NIL T T NIL NIL T T NIL NIL T
    NIL T NIL NIL T T NIL T NIL NIL NIL T NIL T NIL NIL T NIL NIL T
    T NIL NIL T NIL T NIL T NIL T NIL T T NIL T T NIL T T NIL NIL T
    NIL T NIL NIL NIL T NIL NIL T NIL NIL T NIL NIL NIL T NIL T NIL
    T T NIL NIL T NIL T NIL T NIL T T T T NIL T NIL T NIL T NIL NIL
    T NIL NIL NIL T NIL NIL T T NIL NIL NIL T NIL T T NIL T T T T
    NIL NIL T T NIL NIL T T NIL T NIL))

Summary
Form:  ( DEFCONST *SECRET-MESSAGE* ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
 *SECRET-MESSAGE*
ACL2S !>(defdata lob (listof boolean))
 Predicate events...
Form:  ( DEFUN LOBP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOBP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LOBP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOBP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOB ...)
Form:  ( DEFTHM LOB=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOB-BUILTIN ...)
Form:  ( DEFUN NTH-LOB/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  1.05 seconds (prove: 0.68, print: 0.00, other: 0.37)
 Registering type...
Form:  ( DEFUN NTH-LOB ...)
Form:  ( ENCAPSULATE (((NTH-LOB * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOB/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOB/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOB NTH-LOB-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOB/ACC NTH-LOB/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.09 seconds (prove: 0.68, print: 0.00, other: 0.41)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (lobp *secret-message*) T)
 :PASSED
ACL2S !>(test? (lobp *secret-message*))

Q.E.D.

 
(LOBP '(NIL NIL T NIL T T T NIL NIL NIL
            NIL T T NIL NIL NIL T NIL NIL T NIL NIL
            T NIL NIL NIL T T NIL NIL T T NIL NIL T
            NIL T NIL T T T NIL T NIL NIL T NIL NIL
            T NIL T T NIL NIL NIL T NIL NIL T NIL
            T T T T NIL T T T NIL T T T T NIL T NIL
            NIL NIL T T NIL NIL NIL NIL T NIL T NIL
            T T NIL T NIL NIL T NIL T T T NIL NIL
            T T NIL T NIL NIL NIL T T NIL NIL NIL
            T NIL T NIL NIL T NIL NIL NIL NIL T NIL
            T T T NIL NIL T NIL T NIL T NIL T NIL
            T NIL T NIL NIL T T NIL NIL NIL T NIL
            T NIL NIL T NIL T NIL T NIL NIL T NIL
            NIL NIL T T T NIL T T NIL NIL T T T NIL
            NIL NIL T NIL T T NIL T T T NIL T NIL
            NIL T NIL NIL NIL T NIL T T T NIL NIL
            NIL NIL T T NIL NIL NIL T NIL NIL T NIL
            NIL T NIL NIL NIL NIL NIL T T T NIL NIL
            T T NIL T T T T T T T T T T T NIL NIL T
            NIL NIL T NIL T T T NIL T T T NIL T NIL
            NIL NIL T NIL NIL NIL NIL NIL NIL T T
            NIL T T T T NIL T NIL NIL NIL T NIL NIL
            T NIL T T T T NIL T T NIL NIL T T NIL T
            NIL NIL T NIL NIL T NIL T T NIL NIL NIL
            T T NIL T NIL NIL T NIL NIL T NIL NIL T
            T T T T NIL NIL T T NIL NIL T T NIL NIL
            T NIL T NIL NIL T T NIL T NIL NIL NIL
            T NIL T NIL NIL T NIL NIL T T NIL NIL T
            NIL T NIL T NIL T NIL T T NIL T T NIL T
            T NIL NIL T NIL T NIL NIL NIL T NIL NIL
            T NIL NIL T NIL NIL NIL T NIL T NIL T T
            NIL NIL T NIL T NIL T NIL T T T T NIL T
            NIL T NIL T NIL NIL T NIL NIL NIL T NIL
            NIL T T NIL NIL NIL T NIL T T NIL T T
            T T NIL NIL T T NIL NIL T T NIL T NIL))
evaluates to T. Nothing to test!

Test? proved the conjecture under consideration. Therefore, no counterexamples
exist. 
ACL2S !>(defconst *chars*
  '(#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n 
    #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z
    #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N 
    #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z #\Space 
    #\: #\- #\* #\/ #\Newline #\? #\, #\. #\' #\( #\)))

Summary
Form:  ( DEFCONST *CHARS* ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
 *CHARS*
ACL2S !>(defdata char (enum *chars*))
Form:  ( DEFCONST *CHAR-VALUES* ...)
Form:  ( MAKE-EVENT (LET ...))
 Predicate events...
Form:  ( DEFUN CHARP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (CHARP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules.")

 (CHARP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules.")

Form:  ( DEFTHM ACL2::DEF=>CHAR ...)
Form:  ( DEFTHM ACL2::CHAR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-CHAR-BUILTIN ...)
Form:  ( DEFUN NTH-CHAR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.06)
 Registering type...
Form:  ( DEFUN NTH-CHAR ...)
Form:  ( ENCAPSULATE (((NTH-CHAR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-CHAR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-CHAR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-CHAR NTH-CHAR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-CHAR/ACC NTH-CHAR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.13 seconds (prove: 0.02, print: 0.00, other: 0.10)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata lochar (listof char))
 Predicate events...
Form:  ( DEFUN LOCHARP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOCHARP-IMPLIES-TLP ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOCHARP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOCHAR ...)
Form:  ( DEFTHM LOCHAR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOCHAR-BUILTIN ...)
Form:  ( DEFUN NTH-LOCHAR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.82 seconds (prove: 0.50, print: 0.00, other: 0.31)
 Registering type...
Form:  ( DEFUN NTH-LOCHAR ...)
Form:  ( ENCAPSULATE (((NTH-LOCHAR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOCHAR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOCHAR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOCHAR NTH-LOCHAR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOCHAR/ACC NTH-LOCHAR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.85 seconds (prove: 0.50, print: 0.00, other: 0.35)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata bv (list boolean boolean boolean boolean boolean boolean))
 Predicate events...
Form:  ( DEFUN BVP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BVP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BVP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM BV=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-BV-BUILTIN ...)
Form:  ( DEFUN NTH-BV/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.14 seconds (prove: 0.02, print: 0.00, other: 0.12)
 Registering type...
Form:  ( DEFUN NTH-BV ...)
Form:  ( ENCAPSULATE (((NTH-BV * ...) ...) ...) ...)
Form:  ( DEFUN NTH-BV/ACC ...)
Form:  ( ENCAPSULATE (((NTH-BV/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-BV NTH-BV-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-BV/ACC NTH-BV/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.17 seconds (prove: 0.02, print: 0.00, other: 0.15)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata lobv (listof bv))
 Predicate events...
Form:  ( DEFUN LOBVP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOBVP-IMPLIES-TLP ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOBVP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOBV ...)
Form:  ( DEFTHM LOBV=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
(defdata pair (list char bv))
Form:  ( DEFTHM CONS-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOBV-BUILTIN ...)
Form:  ( DEFUN NTH-LOBV/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  1.04 seconds (prove: 0.71, print: 0.00, other: 0.34)
 Registering type...
Form:  ( DEFUN NTH-LOBV ...)
Form:  ( ENCAPSULATE (((NTH-LOBV * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOBV/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOBV/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOBV NTH-LOBV-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOBV/ACC NTH-LOBV/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.08 seconds (prove: 0.71, print: 0.00, other: 0.37)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !> Predicate events...
Form:  ( DEFUN PAIRP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (PAIRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (PAIRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM PAIR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-PAIR-BUILTIN ...)
Form:  ( DEFUN NTH-PAIR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.07 seconds (prove: 0.01, print: 0.00, other: 0.06)
 Registering type...
Form:  ( DEFUN NTH-PAIR ...)
Form:  ( ENCAPSULATE (((NTH-PAIR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-PAIR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-PAIR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-PAIR NTH-PAIR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-PAIR/ACC NTH-PAIR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.11 seconds (prove: 0.01, print: 0.00, other: 0.10)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata plist (listof pair))
 Predicate events...
Form:  ( DEFUN PLISTP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::PLISTP-IMPLIES-TLP ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: PLISTP relatively complete for Tau.
Form:  ( DEFTHM DEF=>PLIST ...)
Form:  ( DEFTHM PLIST=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-PLIST-BUILTIN ...)
Form:  ( DEFUN NTH-PLIST/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  1.05 seconds (prove: 0.73, print: 0.00, other: 0.32)
 Registering type...
Form:  ( DEFUN NTH-PLIST ...)
Form:  ( ENCAPSULATE (((NTH-PLIST * ...) ...) ...) ...)
Form:  ( DEFUN NTH-PLIST/ACC ...)
Form:  ( ENCAPSULATE (((NTH-PLIST/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-PLIST NTH-PLIST-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-PLIST/ACC NTH-PLIST/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.09 seconds (prove: 0.73, print: 0.00, other: 0.36)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:program
ACL2S p!>(defunc2 reverse (ls)
  :input-contract (listp ls)
  :output-contract (listp (reverse ls))
  (cond ((endp ls) nil)
        (t (append (reverse (rest ls)) (cons (first ls) nil)))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol REST
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S p!>(defunc2 reverse (ls)
  :input-contract (listp ls)
  :output-contract (listp (reverse ls))
  (cond ((endp ls) nil)
        (t (append (reverse (cdr ls)) (cons (car ls) nil)))))


ACL2 Error in ( DEFUN REVERSE ...):  The name REVERSE is in use as
a function.  Note that the proposed argument list for REVERSE, (LS),
differs from the existing argument list, (ACL2::X).
The redefinition feature is currently off.  See :DOC ld-redefinition-
action.


Note: REVERSE has already been defined as a system name; that is, it
is built into ACL2.


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.29 seconds (prove: 0.00, print: 0.00, other: 0.29)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S p!>(defunc2 bv-add1-aux (bits)
  :input-contract (true-listp bits)
  :output-contract (true-listp (bv-add1-aux bits))
  (cond ((equal bits nil) nil)
        ((car bits) (cons nil (bv-add1-aux (cdr bits))))
        ((not (car bits)) (cons t (cdr bits)))
        (t bits)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Query: Testing function contract ... 
Elapsed Run Time: 0.22 seconds
Form:  ( DEFUN BV-ADD1-AUX ...)
Elapsed Run Time: 0.01 seconds

Function Name : BV-ADD1-AUX 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN BV-ADD1-AUX ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.52 seconds (prove: 0.00, print: 0.00, other: 0.52)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(defunc2 bv-add1 (bits)
  :input-contract (bvp bits)
  :output-contract (bvp (bv-add1 bits))
  (reverse (bv-add1-aux (reverse bits))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Query: Testing function contract ... 
Elapsed Run Time: 0.28 seconds
Form:  ( DEFUN BV-ADD1 ...)
Elapsed Run Time: 0.01 seconds

Function Name : BV-ADD1 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN BV-ADD1 ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.56 seconds (prove: 0.00, print: 0.00, other: 0.56)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(defunc2 char->bv-map (chars bv)
   :input-contract (and (locharp chars) (bvp bv))
   :output-contract (plistp (char->bv-map chars bv))
   (cond ((endp chars) nil)
         (t (cons (cons (car chars) (cons bv nil))
		  (char->bv-map (cdr chars) (bv-add1 bv))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY CHAR->BV-MAP))
             '(CDR CHARS))
 (EXTRA-INFO '(:GUARD (:BODY CHAR->BV-MAP))
             '(CAR CHARS))
 (BVP BV)
 (LOCHARP CHARS)
 (NOT (ENDP CHARS))
 (NOT (CONSP CHARS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)

Query: Testing function contract ... 
Elapsed Run Time: 0.30 seconds
Form:  ( DEFUN CHAR->BV-MAP ...)
Elapsed Run Time: 0.01 seconds

Function Name : CHAR->BV-MAP 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN CHAR->BV-MAP ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.60 seconds (prove: 0.00, print: 0.00, other: 0.60)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(defconst *bv-char-map*
  (char->bv-map *chars* '(nil nil nil nil nil nil)))

Summary
Form:  ( DEFCONST *BV-CHAR-MAP* ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
 *BV-CHAR-MAP*
ACL2S p!>(defunc2 find-char (c p)
  :input-contract (and (charp c) (plistp p))
  :output-contract (pair-nilp (find-char c p))
  (cond ((endp p) nil)
        ((equal (car (car p)) c) (car p))
        (t (find-char c (cdr p)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR (CAR P)))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (CONSP (CAR P))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (EQUAL (CAR (CAR P)) C)
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CDR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (EQUAL (CAR (CAR P)) C))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)

Query: Testing function contract ... 
Cgen/Error: The input form is ill-formed, see below:

ACL2 Error in test? check:  The symbol PAIR-NILP (in package "ACL2S")
has neither a function nor macro definition in ACL2.  Please define
it.  See :DOC near-misses.  Note:  this error occurred in the context
(PAIR-NILP (FIND-CHAR C P)).

Elapsed Run Time: 0.36 seconds
Form:  ( DEFUN FIND-CHAR ...)

ACL2 Error in ( DEFUN FIND-CHAR ...):  See :DOC failure.

******** FAILED ********
Form:  ( PROGN (DEFUN FIND-CHAR ...) ...)
Elapsed Run Time: 0.00 seconds


FAILED EVENTS: 
(PROGN (DEFUN FIND-CHAR (C P)
              (DECLARE (XARGS :GUARD (AND (CHARP C) (PLISTP P))
                              :VERIFY-GUARDS NIL
                              :NORMALIZE NIL))
              (MBE :LOGIC (IF (AND (CHARP C) (PLISTP P))
                              (COND ((ENDP P) NIL)
                                    ((EQUAL (CAR (CAR P)) C) (CAR P))
                                    (T (FIND-CHAR C (CDR P))))
                              (ACL2S-UNDEFINED 'FIND-CHAR (LIST C P)))
                   :EXEC (COND ((ENDP P) NIL)
                               ((EQUAL (CAR (CAR P)) C) (CAR P))
                               (T (FIND-CHAR C (CDR P)))))))

Something that we could not assign blame to has FAILED! The failure
might be due to the definition rule or the induction scheme associated
with this function definition. Chances are that there is a problem
with your definition. To debug this further, please consult an expert.

HARD ACL2 ERROR in DEFUNC:  
Submit the events shown above to replicate the failure.


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.66 seconds (prove: 0.00, print: 0.00, other: 0.66)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(defunc find-char (c p)
  :input-contract (and (charp c) (plistp p))
  :output-contract (pair-nilp (find-char c p))
  (cond ((endp p) nil)
        ((equal (first (first p)) c) (first p))
        (t (find-char c (rest p)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR (CAR P)))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (CONSP (CAR P))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (EQUAL (CAR (CAR P)) C)
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CDR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (EQUAL (CAR (CAR P)) C))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)

Query: Testing function contract ... 
Cgen/Error: The input form is ill-formed, see below:

ACL2 Error in test? check:  The symbol PAIR-NILP (in package "ACL2S")
has neither a function nor macro definition in ACL2.  Please define
it.  See :DOC near-misses.  Note:  this error occurred in the context
(PAIR-NILP (FIND-CHAR C P)).

Elapsed Run Time: 0.37 seconds
Form:  ( DEFUN FIND-CHAR ...)

ACL2 Error in ( DEFUN FIND-CHAR ...):  See :DOC failure.

******** FAILED ********
Form:  ( PROGN (DEFUN FIND-CHAR ...) ...)
Elapsed Run Time: 0.00 seconds


FAILED EVENTS: 
(PROGN (DEFUN FIND-CHAR (C P)
              (DECLARE (XARGS :GUARD (AND (CHARP C) (PLISTP P))
                              :VERIFY-GUARDS NIL
                              :NORMALIZE NIL))
              (MBE :LOGIC (IF (AND (CHARP C) (PLISTP P))
                              (COND ((ENDP P) NIL)
                                    ((EQUAL (FIRST (FIRST P)) C) (FIRST P))
                                    (T (FIND-CHAR C (REST P))))
                              (ACL2S-UNDEFINED 'FIND-CHAR (LIST C P)))
                   :EXEC (COND ((ENDP P) NIL)
                               ((EQUAL (FIRST (FIRST P)) C) (FIRST P))
                               (T (FIND-CHAR C (REST P)))))))

Something that we could not assign blame to has FAILED! The failure
might be due to the definition rule or the induction scheme associated
with this function definition. Chances are that there is a problem
with your definition. To debug this further, please consult an expert.

HARD ACL2 ERROR in DEFUNC:  
Submit the events shown above to replicate the failure.


TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(defunc2 find-char (c p)
  :input-contract (and (charp c) (plistp p))
  :output-contract (pair-nilp (find-char c p))
  (cond ((endp p) nil)
        ((equal (car (car p)) c) (car p))
        (t (find-char c (cdr p)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR (CAR P)))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (CONSP (CAR P))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (EQUAL (CAR (CAR P)) C)
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CDR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (EQUAL (CAR (CAR P)) C))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)

Query: Testing function contract ... 
Cgen/Error: The input form is ill-formed, see below:

ACL2 Error in test? check:  The symbol PAIR-NILP (in package "ACL2S")
has neither a function nor macro definition in ACL2.  Please define
it.  See :DOC near-misses.  Note:  this error occurred in the context
(PAIR-NILP (FIND-CHAR C P)).

Elapsed Run Time: 0.36 seconds
Form:  ( DEFUN FIND-CHAR ...)

ACL2 Error in ( DEFUN FIND-CHAR ...):  See :DOC failure.

******** FAILED ********
Form:  ( PROGN (DEFUN FIND-CHAR ...) ...)
Elapsed Run Time: 0.00 seconds


FAILED EVENTS: 
(PROGN (DEFUN FIND-CHAR (C P)
              (DECLARE (XARGS :GUARD (AND (CHARP C) (PLISTP P))
                              :VERIFY-GUARDS NIL
                              :NORMALIZE NIL))
              (MBE :LOGIC (IF (AND (CHARP C) (PLISTP P))
                              (COND ((ENDP P) NIL)
                                    ((EQUAL (CAR (CAR P)) C) (CAR P))
                                    (T (FIND-CHAR C (CDR P))))
                              (ACL2S-UNDEFINED 'FIND-CHAR (LIST C P)))
                   :EXEC (COND ((ENDP P) NIL)
                               ((EQUAL (CAR (CAR P)) C) (CAR P))
                               (T (FIND-CHAR C (CDR P)))))))

Something that we could not assign blame to has FAILED! The failure
might be due to the definition rule or the induction scheme associated
with this function definition. Chances are that there is a problem
with your definition. To debug this further, please consult an expert.

HARD ACL2 ERROR in DEFUNC:  
Submit the events shown above to replicate the failure.


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.66 seconds (prove: 0.00, print: 0.00, other: 0.66)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(defdata pair-nil (oneof nil pair))
 Predicate events...
Form:  ( DEFUN PAIR-NILP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: PAIR-NILP relatively complete for Tau.
Form:  ( DEFTHM DEF=>PAIR-NIL ...)
Form:  ( DEFTHM PAIR-NIL=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-PAIR-NIL-BUILTIN ...)
Form:  ( DEFUN NTH-PAIR-NIL/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
 Registering type...
Form:  ( DEFUN NTH-PAIR-NIL ...)
Form:  ( ENCAPSULATE (((NTH-PAIR-NIL * ...) ...) ...) ...)
Form:  ( DEFUN NTH-PAIR-NIL/ACC ...)
Form:  ( ENCAPSULATE (((NTH-PAIR-NIL/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-PAIR-NIL NTH-PAIR-NIL-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-PAIR-NIL/ACC NTH-PAIR-NIL/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.12 seconds (prove: 0.02, print: 0.00, other: 0.09)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(defunc2 find-char (c p)
  :input-contract (and (charp c) (plistp p))
  :output-contract (pair-nilp (find-char c p))
  (cond ((endp p) nil)
        ((equal (car (car p)) c) (car p))
        (t (find-char c (cdr p)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR (CAR P)))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (CONSP (CAR P))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (EQUAL (CAR (CAR P)) C)
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CDR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (EQUAL (CAR (CAR P)) C))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)

Query: Testing function contract ... 
Elapsed Run Time: 0.41 seconds
Form:  ( DEFUN FIND-CHAR ...)
Elapsed Run Time: 0.01 seconds

Function Name : FIND-CHAR 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN FIND-CHAR ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.72 seconds (prove: 0.00, print: 0.00, other: 0.72)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(check= (find-char #\W *bv-char-map*)
        '(#\W (t t nil nil nil nil)))
 :PASSED
ACL2S p!>(check= (find-bv '(t t nil nil nil nil) *bv-char-map*)
        '(#\W (t t nil nil nil nil)))


ACL2 Error in CHECK=:  The symbol FIND-BV (in package "ACL2S") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(FIND-BV '(T T NIL NIL NIL NIL) *BV-CHAR-MAP*).

ACL2S p!>(defunc2 find-bv (b p)
  :input-contract (and (bvp b) (plistp p))
  :output-contract (pair-nilp (find-bv b p))
  (cond ((endp p) nil)
        ((equal (car (cdr (car p))) b) (car p))
        (t (find-bv b (cdr p)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-BV))
             '(CAR P))
 (PLISTP P)
 (BVP B)
 (NOT (ENDP P))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-BV))
             '(CDR (CAR P)))
 (PLISTP P)
 (BVP B)
 (NOT (ENDP P))
 (NOT (CONSP (CAR P))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-BV))
             '(CADR (CAR P)))
 (PLISTP P)
 (BVP B)
 (NOT (ENDP P))
 (NOT (CONSP (CDR (CAR P)))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-BV))
             '(CAR P))
 (PLISTP P)
 (BVP B)
 (NOT (ENDP P))
 (EQUAL (CAR (CDR (CAR P))) B)
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-BV))
             '(CDR P))
 (PLISTP P)
 (BVP B)
 (NOT (ENDP P))
 (NOT (EQUAL (CAR (CDR #)) B))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)

Query: Testing function contract ... 
Elapsed Run Time: 1.44 seconds
Form:  ( DEFUN FIND-BV ...)
Elapsed Run Time: 0.01 seconds

Function Name : FIND-BV 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN FIND-BV ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.79 seconds (prove: 0.00, print: 0.00, other: 1.79)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(check= (find-bv '(t t nil nil nil nil) *bv-char-map*)
        '(#\W (t t nil nil nil nil)))
 :PASSED
ACL2S p!>(defunc2 char-bv (c)
   :input-contract (charp c)
   :output-contract (bvp (char-bv c))
   (car (cdr (find-char c *bv-char-map*))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Query: Testing function contract ... 
Elapsed Run Time: 0.61 seconds
Form:  ( DEFUN CHAR-BV ...)
Elapsed Run Time: 0.01 seconds

Function Name : CHAR-BV 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN CHAR-BV ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.90 seconds (prove: 0.00, print: 0.00, other: 0.90)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(check= (char-bv #\W) '(t t nil nil nil nil))
 :PASSED
ACL2S p!>(check= (bv-char '(t t nil nil nil nil)) #\W)


ACL2 Error in CHECK=:  The symbol BV-CHAR (in package "ACL2S") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(BV-CHAR '(T T NIL NIL NIL NIL)).

ACL2S p!>(defunc2 xor-bv (b1 b2)
  :input-contract (and (lobp b1) (lobp b2))
  :output-contract (lobp (xor-bv b1 b2))
  (cond ((endp b1) nil)
        ((endp b2) nil)
        (t (let ((p (car b1)) (q (car b2))
		 (res (xor-bv (cdr b1) (cdr b2))))
             (cond ((and p q) (cons nil res))
                   ((and (not p) (not q)) (cons nil res))
                   (t (cons t res)))))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  ((SUCCEED) (SUCCEED)) can't be destructured against the lambda list (GS), because it contains 2 elements, and exactly 1 are expected.
While executing: (:INTERNAL CCL::NX1-COMPILE-LAMBDA)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S p!>:q

Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
? (in-package "ACL2S")
#<Package "ACL2S">
? (miniKanrenize '(cond ((endp b1) nil)
        ((endp b2) nil)
        (t (let ((p (car b1)) (q (car b2))
		 (res (xor-bv (cdr b1) (cdr b2))))
             (cond ((and p q) (cons nil res))
                   ((and (not p) (not q)) (cons nil res))
                   (t (cons t res)))))) 'dest)
? bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.74 seconds (prove: 0.00, print: 0.00, other: 2.74)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.83 seconds (prove: 0.00, print: 0.00, other: 2.83)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 my-xor (a b)
  :input-contract (and (booleanp a) (booleanp b))
  :output-contract (booleanp (my-xor a b))
  (not (equal a b)))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.13 seconds
Form:  ( DEFUN MY-XOR ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM MY-XOR-CONTRACT ...)
Time:  0.08 seconds (prove: 0.01, print: 0.00, other: 0.07)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.01, print: 0.00, other: 0.07)
Form:  ( VERIFY-GUARDS MY-XOR ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : MY-XOR 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.54 seconds (prove: 0.03, print: 0.00, other: 0.51)
Prover steps counted:  75
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defgroup boolexprs and or not equal)
ALL-GROUPS
ACL2S !>(suggest-lemma (and p (or q (not q)))
	       :hyps (booleanp p) (booleanp q)
	       :with boolexprs)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IF P (IF Q Q (NOT Q)) 'NIL) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 398 (398 unique)
satisfied the hypotheses, and found 398 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Q T) (P NIL))
 -- ((Q NIL) (P NIL))
 -- ((Q T) (P T))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q T) (P NIL))
                  ((Q NIL) (P NIL))
                  ((Q T) (P T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Q T) (ACL2S::P NIL)) ((ACL2S::Q NIL) (ACL2S::P NIL)) ((ACL2S::Q T) (ACL2S::P T))) '(NIL NIL T)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::P) (BOOLEANP ACL2S::Q)) (EQUAL (AND ACL2S::P (OR ACL2S::Q (NOT ACL2S::Q))) ACL2S::P)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 288 (288 unique)
satisfied the hypotheses, and found 0 counterexamples and 288 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q T) (P NIL))
 -- ((Q NIL) (P T))
 -- ((Q NIL) (P NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (AND P (OR Q (NOT Q))) P))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(test? (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (AND P (OR Q (NOT Q))) P)))

Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 257 (257 unique)
satisfied the hypotheses, and found 0 counterexamples and 257 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q NIL) (P NIL))
 -- ((Q T) (P T))
 -- ((Q NIL) (P T))

Test? proved the conjecture under consideration. Therefore, no counterexamples
exist. 
ACL2S !>(thm (implies (and (booleanp p)
                     (booleanp q))
                (equal (and p (or q (not q)))
                       p)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:EXECUTABLE-COUNTERPART NOT)
        (:FAKE-RUNE-FOR-TYPE-SET NIL))
Warnings:  Invariant-risk
Time:  0.05 seconds (prove: 0.02, print: 0.00, other: 0.03)
Prover steps counted:  65

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 132 (132 unique)
satisfied the hypotheses, and found 0 counterexamples and 132 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((Q NIL) (P NIL))
 -- ((Q T) (P T))
 -- ((Q NIL) (P T))

Proof succeeded.
ACL2S !>(suggest-lemma (equal (equal (or p q) p) q)
	       :with boolexprs
	       :hyps (booleanp p) (booleanp q))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EQUAL (EQUAL (IF P P Q) P) Q)
  NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1006 examples across 3 subgoals, of which 253 (253 unique)
satisfied the hypotheses, and found 3 counterexamples and 250 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (BOOLEANP P) (NOT (BOOLEANP Q)))
 -- ((Q T) (P T))
 -- ((Q NIL) (P T))
 -- ((Q NIL) (P NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q NIL) (P T))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Q T) (P T))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Q T) (P NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q T) (P T))
                  ((Q NIL) (P T))
                  ((Q NIL) (P NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Q T) (ACL2S::P T)) ((ACL2S::Q NIL) (ACL2S::P T)) ((ACL2S::Q NIL) (ACL2S::P NIL))) '(T NIL NIL)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::P) (BOOLEANP ACL2S::Q)) (EQUAL (EQUAL (EQUAL (OR ACL2S::P ACL2S::Q) ACL2S::P) ACL2S::Q) ACL2S::Q)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Q T) (P NIL))
 [found in : "Goal"]
(IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL Q (EQUAL (EQUAL (OR P Q) P) Q)))

 -- ((Q T) (P NIL))
 [found in : "Goal''"]
(IMPLIES (BOOLEANP Q) (NOT Q))
 -- ((Q T) (P NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q NIL) (P T))
 -- ((Q T) (P T))
 -- ((Q NIL) (P NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Q T) (P NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Q T) (ACL2S::P NIL)) ((ACL2S::Q T) (ACL2S::P T)) ((ACL2S::Q NIL) (ACL2S::P T)) ((ACL2S::Q NIL) (ACL2S::P NIL))) '(NIL T NIL NIL)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::P) (BOOLEANP ACL2S::Q)) (EQUAL (EQUAL (EQUAL (OR ACL2S::P ACL2S::Q) ACL2S::P) ACL2S::Q) (AND ACL2S::Q ACL2S::P))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 233 (233 unique)
satisfied the hypotheses, and found 0 counterexamples and 233 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q NIL) (P T))
 -- ((Q NIL) (P NIL))
 -- ((Q T) (P T))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (EQUAL (EQUAL (OR P Q) P) Q)
                (AND Q P)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(test? (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (EQUAL (EQUAL (OR P Q) P) Q)
                (AND Q P))))

Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 240 (240 unique)
satisfied the hypotheses, and found 0 counterexamples and 240 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Q T) (P T))
 -- ((Q NIL) (P NIL))
 -- ((Q NIL) (P T))

Test? proved the conjecture under consideration. Therefore, no counterexamples
exist. 
ACL2S !>(thm (IMPLIES (AND (BOOLEANP P) (BOOLEANP Q))
         (EQUAL (EQUAL (EQUAL (OR P Q) P) Q)
                (AND Q P))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:DEFINITION IFF)
        (:REWRITE ACL2::EQUAL-OF-BOOLEANS-REWRITE))
Warnings:  Invariant-risk
Time:  0.05 seconds (prove: 0.02, print: 0.00, other: 0.03)
Prover steps counted:  112

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 106 (106 unique)
satisfied the hypotheses, and found 0 counterexamples and 106 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((Q NIL) (P NIL))
 -- ((Q NIL) (P T))
 -- ((Q T) (P T))

Proof succeeded.
ACL2S !>(defconst *secret-message*
  '(NIL NIL T NIL T T T NIL NIL NIL NIL T T NIL NIL NIL T NIL NIL T NIL
    NIL T NIL NIL NIL T T NIL NIL T T NIL NIL T NIL T NIL T T T NIL
    T NIL NIL T NIL NIL T NIL T T NIL NIL NIL T NIL NIL T NIL T T T
    T NIL T T T NIL T T T T NIL T NIL NIL NIL T T NIL NIL NIL NIL T
    NIL T NIL T T NIL T NIL NIL T NIL T T T NIL NIL T T NIL T NIL
    NIL NIL T T NIL NIL NIL T NIL T NIL NIL T NIL NIL NIL NIL T NIL
    T T T NIL NIL T NIL T NIL T NIL T NIL T NIL T NIL NIL T T NIL
    NIL NIL T NIL T NIL NIL T NIL T NIL T NIL NIL T NIL NIL NIL T T
    T NIL T T NIL NIL T T T NIL NIL NIL T NIL T T NIL T T T NIL T
    NIL NIL T NIL NIL NIL T NIL T T T NIL NIL NIL NIL T T NIL NIL
    NIL T NIL NIL T NIL NIL T NIL NIL NIL NIL NIL T T T NIL NIL T T
    NIL T T T T T T T T T T T NIL NIL T NIL NIL T NIL T T T NIL T T
    T NIL T NIL NIL NIL T NIL NIL NIL NIL NIL NIL T T NIL T T T T
    NIL T NIL NIL NIL T NIL NIL T NIL T T T T NIL T T NIL NIL T T
    NIL T NIL NIL T NIL NIL T NIL T T NIL NIL NIL T T NIL T NIL NIL
    T NIL NIL T NIL NIL T T T T T NIL NIL T T NIL NIL T T NIL NIL T
    NIL T NIL NIL T T NIL T NIL NIL NIL T NIL T NIL NIL T NIL NIL T
    T NIL NIL T NIL T NIL T NIL T NIL T T NIL T T NIL T T NIL NIL T
    NIL T NIL NIL NIL T NIL NIL T NIL NIL T NIL NIL NIL T NIL T NIL
    T T NIL NIL T NIL T NIL T NIL T T T T NIL T NIL T NIL T NIL NIL
    T NIL NIL NIL T NIL NIL T T NIL NIL NIL T NIL T T NIL T T T T
    NIL NIL T T NIL NIL T T NIL T NIL))

Summary
Form:  ( DEFCONST *SECRET-MESSAGE* ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
 *SECRET-MESSAGE*
ACL2S !>(defdata lob (listof boolean))
 Predicate events...
Form:  ( DEFUN LOBP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOBP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LOBP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOBP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOB ...)
Form:  ( DEFTHM LOB=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOBP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOB-BUILTIN ...)
Form:  ( DEFUN NTH-LOB/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  1.00 seconds (prove: 0.64, print: 0.00, other: 0.36)
 Registering type...
Form:  ( DEFUN NTH-LOB ...)
Form:  ( ENCAPSULATE (((NTH-LOB * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOB/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOB/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOB NTH-LOB-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOB/ACC NTH-LOB/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.03 seconds (prove: 0.64, print: 0.00, other: 0.39)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (lobp *secret-message*) T)
 :PASSED
ACL2S !>(test? (lobp *secret-message*))

Q.E.D.

 
(LOBP '(NIL NIL T NIL T T T NIL NIL NIL
            NIL T T NIL NIL NIL T NIL NIL T NIL NIL
            T NIL NIL NIL T T NIL NIL T T NIL NIL T
            NIL T NIL T T T NIL T NIL NIL T NIL NIL
            T NIL T T NIL NIL NIL T NIL NIL T NIL
            T T T T NIL T T T NIL T T T T NIL T NIL
            NIL NIL T T NIL NIL NIL NIL T NIL T NIL
            T T NIL T NIL NIL T NIL T T T NIL NIL
            T T NIL T NIL NIL NIL T T NIL NIL NIL
            T NIL T NIL NIL T NIL NIL NIL NIL T NIL
            T T T NIL NIL T NIL T NIL T NIL T NIL
            T NIL T NIL NIL T T NIL NIL NIL T NIL
            T NIL NIL T NIL T NIL T NIL NIL T NIL
            NIL NIL T T T NIL T T NIL NIL T T T NIL
            NIL NIL T NIL T T NIL T T T NIL T NIL
            NIL T NIL NIL NIL T NIL T T T NIL NIL
            NIL NIL T T NIL NIL NIL T NIL NIL T NIL
            NIL T NIL NIL NIL NIL NIL T T T NIL NIL
            T T NIL T T T T T T T T T T T NIL NIL T
            NIL NIL T NIL T T T NIL T T T NIL T NIL
            NIL NIL T NIL NIL NIL NIL NIL NIL T T
            NIL T T T T NIL T NIL NIL NIL T NIL NIL
            T NIL T T T T NIL T T NIL NIL T T NIL T
            NIL NIL T NIL NIL T NIL T T NIL NIL NIL
            T T NIL T NIL NIL T NIL NIL T NIL NIL T
            T T T T NIL NIL T T NIL NIL T T NIL NIL
            T NIL T NIL NIL T T NIL T NIL NIL NIL
            T NIL T NIL NIL T NIL NIL T T NIL NIL T
            NIL T NIL T NIL T NIL T T NIL T T NIL T
            T NIL NIL T NIL T NIL NIL NIL T NIL NIL
            T NIL NIL T NIL NIL NIL T NIL T NIL T T
            NIL NIL T NIL T NIL T NIL T T T T NIL T
            NIL T NIL T NIL NIL T NIL NIL NIL T NIL
            NIL T T NIL NIL NIL T NIL T T NIL T T
            T T NIL NIL T T NIL NIL T T NIL T NIL))
evaluates to T. Nothing to test!

Test? proved the conjecture under consideration. Therefore, no counterexamples
exist. 
ACL2S !>(defconst *chars*
  '(#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n 
    #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z
    #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N 
    #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z #\Space 
    #\: #\- #\* #\/ #\Newline #\? #\, #\. #\' #\( #\)))

Summary
Form:  ( DEFCONST *CHARS* ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
 *CHARS*
ACL2S !>(defdata char (enum *chars*))
Form:  ( DEFCONST *CHAR-VALUES* ...)
Form:  ( MAKE-EVENT (LET ...))
 Predicate events...
Form:  ( DEFUN CHARP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (CHARP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules.")

 (CHARP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules.")

Form:  ( DEFTHM ACL2::DEF=>CHAR ...)
Form:  ( DEFTHM ACL2::CHAR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-CHAR-BUILTIN ...)
Form:  ( DEFUN NTH-CHAR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
 Registering type...
Form:  ( DEFUN NTH-CHAR ...)
Form:  ( ENCAPSULATE (((NTH-CHAR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-CHAR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-CHAR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-CHAR NTH-CHAR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-CHAR/ACC NTH-CHAR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.12 seconds (prove: 0.02, print: 0.00, other: 0.10)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata lochar (listof char))
 Predicate events...
Form:  ( DEFUN LOCHARP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOCHARP-IMPLIES-TLP ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOCHARP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOCHAR ...)
Form:  ( DEFTHM LOCHAR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOCHARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOCHAR-BUILTIN ...)
Form:  ( DEFUN NTH-LOCHAR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.80 seconds (prove: 0.49, print: 0.00, other: 0.32)
 Registering type...
Form:  ( DEFUN NTH-LOCHAR ...)
Form:  ( ENCAPSULATE (((NTH-LOCHAR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOCHAR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOCHAR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOCHAR NTH-LOCHAR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOCHAR/ACC NTH-LOCHAR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.84 seconds (prove: 0.49, print: 0.00, other: 0.36)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata bv (list boolean boolean boolean boolean boolean boolean))
 Predicate events...
Form:  ( DEFUN BVP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BVP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BVP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM BV=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-BV-BUILTIN ...)
Form:  ( DEFUN NTH-BV/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.14 seconds (prove: 0.02, print: 0.00, other: 0.12)
 Registering type...
Form:  ( DEFUN NTH-BV ...)
Form:  ( ENCAPSULATE (((NTH-BV * ...) ...) ...) ...)
Form:  ( DEFUN NTH-BV/ACC ...)
Form:  ( ENCAPSULATE (((NTH-BV/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-BV NTH-BV-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-BV/ACC NTH-BV/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.18 seconds (prove: 0.02, print: 0.00, other: 0.16)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata lobv (listof bv))
 Predicate events...
Form:  ( DEFUN LOBVP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOBVP-IMPLIES-TLP ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOBVP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOBV ...)
Form:  ( DEFTHM LOBV=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
(defdata pair (list char bv))
Form:  ( DEFTHM LAST-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOBVP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOBV-BUILTIN ...)
Form:  ( DEFUN NTH-LOBV/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  1.04 seconds (prove: 0.73, print: 0.00, other: 0.31)
 Registering type...
Form:  ( DEFUN NTH-LOBV ...)
Form:  ( ENCAPSULATE (((NTH-LOBV * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOBV/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOBV/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOBV NTH-LOBV-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOBV/ACC NTH-LOBV/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.08 seconds (prove: 0.73, print: 0.00, other: 0.35)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !> Predicate events...
Form:  ( DEFUN PAIRP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (PAIRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (PAIRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM PAIR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-PAIR-BUILTIN ...)
Form:  ( DEFUN NTH-PAIR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.08 seconds (prove: 0.01, print: 0.00, other: 0.07)
 Registering type...
Form:  ( DEFUN NTH-PAIR ...)
Form:  ( ENCAPSULATE (((NTH-PAIR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-PAIR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-PAIR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-PAIR NTH-PAIR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-PAIR/ACC NTH-PAIR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.12 seconds (prove: 0.01, print: 0.00, other: 0.11)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata plist (listof pair))
 Predicate events...
Form:  ( DEFUN PLISTP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::PLISTP-IMPLIES-TLP ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: PLISTP relatively complete for Tau.
Form:  ( DEFTHM DEF=>PLIST ...)
Form:  ( DEFTHM PLIST=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
:program
Form:  ( DEFTHM NTH-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-PLISTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-PLIST-BUILTIN ...)
Form:  ( DEFUN NTH-PLIST/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  1.07 seconds (prove: 0.73, print: 0.00, other: 0.34)
 Registering type...
Form:  ( DEFUN NTH-PLIST ...)
Form:  ( ENCAPSULATE (((NTH-PLIST * ...) ...) ...) ...)
Form:  ( DEFUN NTH-PLIST/ACC ...)
Form:  ( ENCAPSULATE (((NTH-PLIST/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-PLIST NTH-PLIST-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-PLIST/ACC NTH-PLIST/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.11 seconds (prove: 0.73, print: 0.00, other: 0.38)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>ACL2S p!>(defunc2 bv-add1-aux (bits)
  :input-contract (true-listp bits)
  :output-contract (true-listp (bv-add1-aux bits))
  (cond ((equal bits nil) nil)
        ((car bits) (cons nil (bv-add1-aux (cdr bits))))
        ((not (car bits)) (cons t (cdr bits)))
        (t bits)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Query: Testing function contract ... 
Elapsed Run Time: 0.22 seconds
Form:  ( DEFUN BV-ADD1-AUX ...)
Elapsed Run Time: 0.01 seconds

Function Name : BV-ADD1-AUX 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN BV-ADD1-AUX ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.49 seconds (prove: 0.00, print: 0.00, other: 0.49)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(defunc2 bv-add1 (bits)
  :input-contract (bvp bits)
  :output-contract (bvp (bv-add1 bits))
  (reverse (bv-add1-aux (reverse bits))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Query: Testing function contract ... 
Elapsed Run Time: 0.27 seconds
Form:  ( DEFUN BV-ADD1 ...)
Elapsed Run Time: 0.01 seconds

Function Name : BV-ADD1 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN BV-ADD1 ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.54 seconds (prove: 0.00, print: 0.00, other: 0.54)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(check= (bv-add1 '(t t t t t t)) '(nil nil nil nil nil nil))
 :PASSED
ACL2S p!>(check= (bv-add1 '(t t nil nil nil t)) '(t t nil nil t nil))
 :PASSED
ACL2S p!>(check= (bv-add1 '(t nil t nil t t)) '(t nil t t nil nil))
 :PASSED
ACL2S p!>(defunc2 char->bv-map (chars bv)
   :input-contract (and (locharp chars) (bvp bv))
   :output-contract (plistp (char->bv-map chars bv))
   (cond ((endp chars) nil)
         (t (cons (cons (car chars) (cons bv nil))
		  (char->bv-map (cdr chars) (bv-add1 bv))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY CHAR->BV-MAP))
             '(CDR CHARS))
 (EXTRA-INFO '(:GUARD (:BODY CHAR->BV-MAP))
             '(CAR CHARS))
 (BVP BV)
 (LOCHARP CHARS)
 (NOT (ENDP CHARS))
 (NOT (CONSP CHARS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)

Query: Testing function contract ... 
Elapsed Run Time: 0.29 seconds
Form:  ( DEFUN CHAR->BV-MAP ...)
Elapsed Run Time: 0.01 seconds

Function Name : CHAR->BV-MAP 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN CHAR->BV-MAP ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.59 seconds (prove: 0.00, print: 0.00, other: 0.59)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(check= (first (char->bv-map *chars* '(nil nil nil nil nil nil)))
        '(#\a (nil nil nil nil nil nil)))
 :PASSED
ACL2S p!>(check= (nth 54 (char->bv-map *chars* '(nil nil nil nil nil nil)))
        '(#\- (t t nil t t nil)))
 :PASSED
ACL2S p!>(check= (nth 48 (char->bv-map *chars* '(t nil t nil t nil)))
        '(#\W (nil t t nil t nil)))
 :PASSED
ACL2S p!>(defconst *bv-char-map*
  (char->bv-map *chars* '(nil nil nil nil nil nil)))

Summary
Form:  ( DEFCONST *BV-CHAR-MAP* ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
 *BV-CHAR-MAP*
ACL2S p!>(defdata pair-nil (oneof nil pair))
 Predicate events...
Form:  ( DEFUN PAIR-NILP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: PAIR-NILP relatively complete for Tau.
Form:  ( DEFTHM DEF=>PAIR-NIL ...)
Form:  ( DEFTHM PAIR-NIL=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-PAIR-NIL-BUILTIN ...)
Form:  ( DEFUN NTH-PAIR-NIL/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
 Registering type...
Form:  ( DEFUN NTH-PAIR-NIL ...)
Form:  ( ENCAPSULATE (((NTH-PAIR-NIL * ...) ...) ...) ...)
Form:  ( DEFUN NTH-PAIR-NIL/ACC ...)
Form:  ( ENCAPSULATE (((NTH-PAIR-NIL/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-PAIR-NIL NTH-PAIR-NIL-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-PAIR-NIL/ACC NTH-PAIR-NIL/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.12 seconds (prove: 0.02, print: 0.00, other: 0.10)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(defunc2 find-char (c p)
  :input-contract (and (charp c) (plistp p))
  :output-contract (pair-nilp (find-char c p))
  (cond ((endp p) nil)
        ((equal (car (car p)) c) (car p))
        (t (find-char c (cdr p)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR (CAR P)))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (CONSP (CAR P))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CAR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (EQUAL (CAR (CAR P)) C)
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-CHAR))
             '(CDR P))
 (PLISTP P)
 (CHARP C)
 (NOT (ENDP P))
 (NOT (EQUAL (CAR (CAR P)) C))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)

Query: Testing function contract ... 
Elapsed Run Time: 0.40 seconds
Form:  ( DEFUN FIND-CHAR ...)
Elapsed Run Time: 0.01 seconds

Function Name : FIND-CHAR 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN FIND-CHAR ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.69 seconds (prove: 0.00, print: 0.00, other: 0.69)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(check= (find-char #\W *bv-char-map*)
        '(#\W (t t nil nil nil nil)))
 :PASSED
ACL2S p!>(defunc2 find-bv (b p)
  :input-contract (and (bvp b) (plistp p))
  :output-contract (pair-nilp (find-bv b p))
  (cond ((endp p) nil)
        ((equal (car (cdr (car p))) b) (car p))
        (t (find-bv b (cdr p)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-BV))
             '(CAR P))
 (PLISTP P)
 (BVP B)
 (NOT (ENDP P))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-BV))
             '(CDR (CAR P)))
 (PLISTP P)
 (BVP B)
 (NOT (ENDP P))
 (NOT (CONSP (CAR P))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-BV))
             '(CADR (CAR P)))
 (PLISTP P)
 (BVP B)
 (NOT (ENDP P))
 (NOT (CONSP (CDR (CAR P)))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-BV))
             '(CAR P))
 (PLISTP P)
 (BVP B)
 (NOT (ENDP P))
 (EQUAL (CAR (CDR (CAR P))) B)
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY FIND-BV))
             '(CDR P))
 (PLISTP P)
 (BVP B)
 (NOT (ENDP P))
 (NOT (EQUAL (CAR (CDR #)) B))
 (NOT (CONSP P)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)

Query: Testing function contract ... 
Elapsed Run Time: 0.50 seconds
Form:  ( DEFUN FIND-BV ...)
Elapsed Run Time: 0.01 seconds

Function Name : FIND-BV 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN FIND-BV ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.82 seconds (prove: 0.00, print: 0.00, other: 0.82)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(check= (find-bv '(t t nil nil nil nil) *bv-char-map*)
        '(#\W (t t nil nil nil nil)))
 :PASSED
ACL2S p!>(defunc2 char-bv (c)
   :input-contract (charp c)
   :output-contract (bvp (char-bv c))
   (car (cdr (find-char c *bv-char-map*))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Query: Testing function contract ... 
Elapsed Run Time: 0.61 seconds
Form:  ( DEFUN CHAR-BV ...)
Elapsed Run Time: 0.01 seconds

Function Name : CHAR-BV 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN CHAR-BV ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.90 seconds (prove: 0.00, print: 0.00, other: 0.90)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(check= (char-bv #\W) '(t t nil nil nil nil))
 :PASSED
ACL2S p!>(defunc bv-char (b)
  :input-contract (bvp b)
  :output-contract (charp (bv-char b))
  (first (find-bv b *bv-char-map*)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Query: Testing function contract ... 
Elapsed Run Time: 0.54 seconds
Form:  ( DEFUN BV-CHAR ...)
Elapsed Run Time: 0.01 seconds

Function Name : BV-CHAR 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN BV-CHAR ...) ...)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(check= (bv-char '(t t nil nil nil nil)) #\W)
 :PASSED
ACL2S p!>(defunc2 xor-bv (b1 b2)
  :input-contract (and (lobp b1) (lobp b2))
  :output-contract (lobp (xor-bv b1 b2))
  (cond ((endp b1) nil)
        ((endp b2) nil)
        (t (let ((p (car b1)) (q (car b2))
		 (res (xor-bv (cdr b1) (cdr b2))))
             (cond ((and p q) (cons nil res))
                   ((and (not p) (not q)) (cons nil res))
                   (t (cons t res)))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY XOR-BV))
             '(CDR B1))
 (EXTRA-INFO '(:GUARD (:BODY XOR-BV))
             '(CAR B1))
 (LOBP B2)
 (LOBP B1)
 (NOT (ENDP B1))
 (NOT (ENDP B2))
 (NOT (CONSP B1)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)



ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY XOR-BV))
             '(CDR B2))
 (EXTRA-INFO '(:GUARD (:BODY XOR-BV))
             '(CAR B2))
 (LOBP B2)
 (LOBP B1)
 (NOT (ENDP B1))
 (NOT (ENDP B2))
 (NOT (CONSP B2)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)

Query: Testing function contract ... 
Elapsed Run Time: 0.40 seconds
Form:  ( DEFUN XOR-BV ...)
Elapsed Run Time: 0.01 seconds

Function Name : XOR-BV 
Termination proven -------- [ ] 
Function Contract proven -- [ ] 
Body Contracts proven ----- [ ]
Form:  ( PROGN (DEFUN XOR-BV ...) ...)

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.74 seconds (prove: 0.00, print: 0.00, other: 0.74)
 NIL

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S p!>(check= (xor-bv '(t nil t nil t t) '(t t nil nil nil t))
        '(nil t t nil t nil))
 :PASSED
ACL2S p!>(check= (xor-bv '(t nil t nil t t nil t) '(t t nil nil nil t))
        '(nil t t nil t nil))
 :PASSED
ACL2S p!>(suggest-lemma (bvp (xor-bv b1 b2))
	       :hyps (bvp b1) (bvp b2))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S p!>> ("The formula ~#0~[named ~x1~/~x1~] contains a call of the ~
               function~#2~[ ~&2~/s ~&2~], the guards of which have not yet ~
               been verified.  See :DOC verify-guards."
      (#\0 . 1)
      (#\1 BVP (XOR-BV B1 B2))
      (#\2 XOR-BV))
ACL2S p!>>Bye.

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value #\0 is not of the expected type SEQUENCE.
While executing: CCL::SEQUENCE-TYPE
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S p!>(defdata bv (list boolean boolean boolean boolean boolean boolean))
 Predicate events...
Form:  ( DEFTHM BVP-TESTTHM ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BVP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BVP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM BV=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-BV-BUILTIN ...)
Form:  ( DEFUN NTH-BV/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.07 seconds (prove: 0.03, print: 0.00, other: 0.04)
 Registering type...


HARD ACL2 ERROR in REGISTER-TYPE:  
 BV is already a registered defdata type.




ACL2 Error in ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...)):  Evaluation
aborted.  To debug see :DOC print-gv, see :DOC trace, and see :DOC
wet.

Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.07 seconds (prove: 0.03, print: 0.00, other: 0.04)
ACL2S p!>(suggest-lemma (bvp (xor-bv b1 b2))
	       :hyps (bvp b1) (bvp b2))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S p!>> ("The formula ~#0~[named ~x1~/~x1~] contains a call of the ~
               function~#2~[ ~&2~/s ~&2~], the guards of which have not yet ~
               been verified.  See :DOC verify-guards."
      (#\0 . 1)
      (#\1 BVP (XOR-BV B1 B2))
      (#\2 XOR-BV))
ACL2S p!>>Bye.

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value #\0 is not of the expected type SEQUENCE.
While executing: CCL::SEQUENCE-TYPE
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S p!>(defunc2 xor-bv (b1 b2)
  :input-contract (and (lobp b1) (lobp b2))
  :output-contract (lobp (xor-bv b1 b2))
  (cond ((endp b1) nil)
        ((endp b2) nil)
        (t (let ((p (car b1)) (q (car b2))
		 (res (xor-bv (cdr b1) (cdr b2))))
             (cond ((and p q) (cons nil res))
                   ((and (not p) (not q)) (cons nil res))
                   (t (cons t res)))))))


ACL2 Error in ( DEFUN XOR-BV ...):  The name XOR-BV is in use as a
function.  Note that the proposed body for XOR-BV,

(COND ((ENDP B1) NIL)
      ((ENDP B2) NIL)
      (T (LET ((P #) (Q #) (RES #))
              (COND (# #) (# #) (T #))))),

differs from the existing body,

(LET
 ((_RET1 (IF (AND # #)
             (COND # # #)
             (ACL2S-UNDEFINED # #))))
 (IF
  (LOBP _RET1)
  _RET1
  (ER
   HARD 'XOR-BV
   "**Output contract violation**: ~x0 with argument list ~x1 returned ~x2.~%"
   'XOR-BV
   (LIST B1 B2)
   _RET1))).

The redefinition feature is currently off.  See :DOC ld-redefinition-
action.
(See :DOC set-iprint to be able to see elided values in this message.)


Note: XOR-BV was previously defined at the top level.


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.35 seconds (prove: 0.00, print: 0.00, other: 0.35)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S p!>(suggest-lemma (bvp (xor-bv b1 b2))
	       :hyps (bvp b1) (bvp b2))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S p!>> ("The formula ~#0~[named ~x1~/~x1~] contains a call of the ~
               function~#2~[ ~&2~/s ~&2~], the guards of which have not yet ~
               been verified.  See :DOC verify-guards."
      (#\0 . 1)
      (#\1 BVP (XOR-BV B1 B2))
      (#\2 XOR-BV))
ACL2S p!>>Bye.

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value #\0 is not of the expected type SEQUENCE.
While executing: CCL::SEQUENCE-TYPE
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S p!>(verify-guards xor-bv)

ACL2 Observation in TOP-LEVEL:  VERIFY-GUARDS events are skipped when
the default-defun-mode is :PROGRAM.
 NIL
ACL2S p!>(suggest-lemma (bvp (xor-bv b1 b2))
	       :hyps (bvp b1) (bvp b2))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S p!>> ("The formula ~#0~[named ~x1~/~x1~] contains a call of the ~
               function~#2~[ ~&2~/s ~&2~], the guards of which have not yet ~
               been verified.  See :DOC verify-guards."
      (#\0 . 1)
      (#\1 BVP (XOR-BV B1 B2))
      (#\2 XOR-BV))
ACL2S p!>>Bye.

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value #\0 is not of the expected type SEQUENCE.
While executing: CCL::SEQUENCE-TYPE
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S p!>Bye.
bash-3.2$ pwd
/Users/benboskin/lemmas/acl2s-raw
bash-3.2$ c d..
bash: c: command not found
bash-3.2$ cd ..
bash-3.2$ cd ..
bash-3.2$ pwd
/Users/benboskin
bash-3.2$ cp Desktop/ACL2s-practice/hw5.lisp homework5.lisp
bash-3.2$ mv homework5.lisp lemmas/acl2s-raw/homework5.lisp
bash-3.2$ pwd
/Users/benboskin
bash-3.2$ cd lemmas/acl2s-raw/
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top.lisp" :uncertified-okp t)


ACL2 Error in ( INCLUDE-BOOK "top.lisp" ...):  The file 
"/Users/benboskin/lemmas/acl2s-raw/top.lisp.lisp" does not exist.


Summary
Form:  ( INCLUDE-BOOK "top.lisp" ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)

ACL2 Error in ( INCLUDE-BOOK "top.lisp" ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.74 seconds (prove: 0.00, print: 0.00, other: 2.74)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 len2 (x)
     :input-contract (true-listp x)
     :output-contract (natp (len2 x))
     (if (endp x)
	 0
       (+ 1 (len2 (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LEN2))
             '(CDR X))
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.40 seconds
Form:  ( DEFUN LEN2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LEN2-CONTRACT ...)
Time:  0.14 seconds (prove: 0.09, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.14 seconds (prove: 0.09, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LEN2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : LEN2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.87 seconds (prove: 0.15, print: 0.00, other: 0.72)
Prover steps counted:  3008
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 in2 (a l)
  :input-contract (true-listp l)
  :output-contract (booleanp (in2 a l))
  (if (endp l)
      nil
    (or (equal a (car l)) (in2 a (cdr l)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CAR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CAR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (EQUAL A (CAR L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CDR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (EQUAL A (CAR L)))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.57 seconds
Form:  ( DEFUN IN2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN2-CONTRACT ...)
Time:  0.17 seconds (prove: 0.11, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.17 seconds (prove: 0.11, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS IN2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.23 seconds

Function Name : IN2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.09 seconds (prove: 0.22, print: 0.00, other: 0.87)
Prover steps counted:  3679
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc app2 (x y)
  :input-contract (and (true-listp x) (true-listp y))
  :output-contract (true-listp (app2 x y))
  (if (endp x)
      y
    (cons (car x) (app2 (cdr x) y))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY APP2))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY APP2))
             '(CAR X))
 (TRUE-LISTP Y)
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.60 seconds
Form:  ( DEFUN APP2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM APP2-CONTRACT ...)
Time:  0.19 seconds (prove: 0.12, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.19 seconds (prove: 0.12, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS APP2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.26 seconds

Function Name : APP2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (len2 (app2 x (app2 y z)))
	       :with len2 app2 cons car cdr)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM LEN2 (APP2 X (APP2 Y Z)))
  (((TRUE-LISTP Y))
   ((TRUE-LISTP (APP2 X (APP2 Y Z))))
   ((TRUE-LISTP X))
   ((TRUE-LISTP Z))
   ((TRUE-LISTP (APP2 Y Z)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1437 (1437 unique)
satisfied the hypotheses, and found 1437 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z '(ACL2::BA ACL2::A)) (X NIL) (Y '(#C(2 2) 0 0)))
 -- ((Z '(36)) (X NIL) (Y '(10)))
 -- ((Z NIL) (X '(10 0 0)) (Y NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z '(ACL2::BA ACL2::A))
                   (X NIL)
                   (Y '(#C(2 2) 0 0)))
                  ((Z '(36)) (X NIL) (Y '(10)))
                  ((Z NIL) (X '(10 0 0)) (Y NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::X NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 0 1) NIL)) (ACL2S::X NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1) NIL))) ((ACL2S::Z NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::Y NIL))) '((ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: LOOKUP
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (len2 (app2 x (app2 y z)))
	       :required-expressions len2 app2
	       :with len2 app2 cons car cdr)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM LEN2 (APP2 X (APP2 Y Z)))
  (((TRUE-LISTP Y))
   ((TRUE-LISTP (APP2 X (APP2 Y Z))))
   ((TRUE-LISTP X))
   ((TRUE-LISTP Z))
   ((TRUE-LISTP (APP2 Y Z)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1460 (1460 unique)
satisfied the hypotheses, and found 1460 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z '(-1)) (X '(-1)) (Y NIL))
 -- ((Z '(0)) (X '(-59)) (Y NIL))
 -- ((Z '(128)) (X NIL) (Y NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z '(-1)) (X '(-1)) (Y NIL))
                  ((Z '(0)) (X '(-59)) (Y NIL))
                  ((Z '(128)) (X NIL) (Y NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::LEN2 ACL2S::APP2) ACL2S::Q '(((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::Y NIL)) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1 1 1) NIL)) (ACL2S::Y NIL)) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 0 0 0 1) NIL)) (ACL2S::X NIL) (ACL2S::Y NIL))) '((ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1)))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (len2 (app2 x (app2 y z)))
	       :required-expressions len2 app2 x y z
	       )

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM LEN2 (APP2 X (APP2 Y Z)))
  (((TRUE-LISTP Y))
   ((TRUE-LISTP (APP2 X (APP2 Y Z))))
   ((TRUE-LISTP X))
   ((TRUE-LISTP Z))
   ((TRUE-LISTP (APP2 Y Z)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1457 (1457 unique)
satisfied the hypotheses, and found 1457 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z NIL) (X '(ACL2::CABC ACL2::A ACL2::A)) (Y NIL))
 -- ((Z NIL) (X '((1 . T) 0 0 0)) (Y '(ACL2::BA ACL2::A)))
 -- ((Z NIL) (X NIL) (Y NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z NIL)
                   (X '(ACL2::CABC ACL2::A ACL2::A))
                   (Y NIL))
                  ((Z NIL)
                   (X '((1 . T) 0 0 0))
                   (Y '(ACL2::BA ACL2::A)))
                  ((Z NIL) (X NIL) (Y NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::LEN2 ACL2S::APP2 ACL2S::X ACL2S::Y ACL2S::Z) ACL2S::Q '(((ACL2S::Z NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL CABC) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) (ACL2S::Y NIL)) ((ACL2S::Z NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) T) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) ((ACL2S::Z NIL) (ACL2S::X NIL) (ACL2S::Y NIL))) '((ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 1 1) (ACL2S::INTERNAL-NUMBER (0))))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: EQUAL
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (len2 (app2 x (app2 y z)))
	       :required-expressions len2 (app2 x y) z
	       )

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM LEN2 (APP2 X (APP2 Y Z)))
  (((TRUE-LISTP Y))
   ((TRUE-LISTP (APP2 X (APP2 Y Z))))
   ((TRUE-LISTP X))
   ((TRUE-LISTP Z))
   ((TRUE-LISTP (APP2 Y Z)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1446 (1446 unique)
satisfied the hypotheses, and found 1446 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z NIL) (X NIL) (Y NIL))
 -- ((Z NIL) (X '(ACL2::BABAAA)) (Y '((#\C #\B #\B #\A) #\B 0)))
 -- ((Z NIL) (X '(1)) (Y '(NIL NIL NIL)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z NIL) (X NIL) (Y NIL))
                  ((Z NIL)
                   (X '(ACL2::BABAAA))
                   (Y '((#\C #\B #\B #\A) #\B 0)))
                  ((Z NIL) (X '(1)) (Y '(NIL NIL NIL)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::LEN2 (ACL2S::APP2 ACL2S::X ACL2S::Y) ACL2S::Z) ACL2S::Q '(((ACL2S::Z NIL) (ACL2S::X NIL) (ACL2S::Y NIL)) ((ACL2S::Z NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) NIL)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\C) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::Z NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)) (ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) '((ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: LOOKUP
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (len2 (app2 x (app2 y z)))
	       :required-expressions len2 app2 (app2 x y) z
	       )

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM LEN2 (APP2 X (APP2 Y Z)))
  (((TRUE-LISTP Y))
   ((TRUE-LISTP (APP2 X (APP2 Y Z))))
   ((TRUE-LISTP X))
   ((TRUE-LISTP Z))
   ((TRUE-LISTP (APP2 Y Z)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1458 (1458 unique)
satisfied the hypotheses, and found 1458 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z NIL) (X NIL) (Y '(0)))
 -- ((Z NIL) (X '(0)) (Y '(0)))
 -- ((Z '(-1 0)) (X '(ACL2::ABBAAAA)) (Y '(2)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z NIL) (X NIL) (Y '(0)))
                  ((Z NIL) (X '(0)) (Y '(0)))
                  ((Z '(-1 0))
                   (X '(ACL2::ABBAAAA))
                   (Y '(2)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::LEN2 ACL2S::APP2 (ACL2S::APP2 ACL2S::X ACL2S::Y) ACL2S::Z) ACL2S::Q '(((ACL2S::Z NIL) (ACL2S::X NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::Z NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABBAAAA) NIL)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)))) '((ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: CCL::%PR-INTEGER
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:u
   d       4:x(DEFUNC2 IN2 (A L) ...)
ACL2S !>(defunc2 app2 (x y)
  :input-contract (and (true-listp x) (true-listp y))
  :output-contract (true-listp (app2 x y))
  (if (endp x)
      y
    (cons (car x) (app2 (cdr x) y))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY APP2))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY APP2))
             '(CAR X))
 (TRUE-LISTP Y)
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 1.16 seconds
Form:  ( DEFUN APP2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM APP2-CONTRACT ...)
Time:  0.19 seconds (prove: 0.13, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.19 seconds (prove: 0.13, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS APP2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.25 seconds

Function Name : APP2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.68 seconds (prove: 0.93, print: 0.00, other: 0.75)
Prover steps counted:  14124
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (len2 (app2 x (app2 y z)))
	       :required-expressions len2 (app2 (app2 x y) z)
	       )

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM LEN2 (APP2 X (APP2 Y Z)))
  (((TRUE-LISTP Y))
   ((TRUE-LISTP (APP2 X (APP2 Y Z))))
   ((TRUE-LISTP X))
   ((TRUE-LISTP Z))
   ((TRUE-LISTP (APP2 Y Z)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1473 (1473 unique)
satisfied the hypotheses, and found 1473 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z NIL) (X NIL) (Y '(0)))
 -- ((Z '(959 18 1 1)) (X NIL) (Y NIL))
 -- ((Z NIL) (X NIL) (Y '(4)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z NIL) (X NIL) (Y '(0)))
                  ((Z '(959 18 1 1)) (X NIL) (Y NIL))
                  ((Z NIL) (X NIL) (Y '(4)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::LEN2 (ACL2S::APP2 (ACL2S::APP2 ACL2S::X ACL2S::Y) ACL2S::Z)) ACL2S::Q '(((ACL2S::Z NIL) (ACL2S::X NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 1 1 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) (ACL2S::X NIL) (ACL2S::Y NIL)) ((ACL2S::Z NIL) (ACL2S::X NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)))) '((ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 1))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::Y) (TRUE-LISTP (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Z) (TRUE-LISTP (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (EQUAL (ACL2S::LEN2 (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (ACL2S::LEN2 (ACL2S::APP2 (ACL2S::APP2 ACL2S::X ACL2S::Y) ACL2S::Z)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 1415 (1415 unique)
satisfied the hypotheses, and found 0 counterexamples and 1415 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Z NIL) (X '(-1)) (Y NIL))
 -- ((Z NIL) (X NIL) (Y '(-1)))
 -- ((Z '(0 0)) (X NIL) (Y NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP Y)
              (TRUE-LISTP (APP2 X (APP2 Y Z)))
              (TRUE-LISTP X)
              (TRUE-LISTP Z)
              (TRUE-LISTP (APP2 Y Z)))
         (EQUAL (LEN2 (APP2 X (APP2 Y Z)))
                (LEN2 (APP2 (APP2 X Y) Z))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (len2 (app2 x (app2 y z)))
	       :required-expressions len2 app2 
	       )

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM LEN2 (APP2 X (APP2 Y Z)))
  (((TRUE-LISTP Y))
   ((TRUE-LISTP (APP2 X (APP2 Y Z))))
   ((TRUE-LISTP X))
   ((TRUE-LISTP Z))
   ((TRUE-LISTP (APP2 Y Z)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1442 (1442 unique)
satisfied the hypotheses, and found 1442 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z NIL) (X NIL) (Y NIL))
 -- ((Z '(0)) (X NIL) (Y '(-1)))
 -- ((Z '(ACL2::BA)) (X NIL) (Y NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z NIL) (X NIL) (Y NIL))
                  ((Z '(0)) (X NIL) (Y '(-1)))
                  ((Z '(ACL2::BA)) (X NIL) (Y NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::LEN2 ACL2S::APP2) ACL2S::Q '(((ACL2S::Z NIL) (ACL2S::X NIL) (ACL2S::Y NIL)) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)) (ACL2S::X NIL) (ACL2S::Y NIL))) '((ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::Y) (TRUE-LISTP (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Z) (TRUE-LISTP (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (EQUAL (ACL2S::LEN2 (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (ACL2S::LEN2 (ACL2S::APP2 ACL2S::Z ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 6 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z '(-1)) (X '(0 NIL NIL)) (Y '(0 0)))
 -- ((Z '(17 6)) (X '(#\D #\C #\D #\C #\O)) (Y NIL))
 -- ((Z '(13)) (X '(-1 1)) (Y '(-3)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Z '(12 1 0)) (X NIL) (Y '(4 1 0)))
 -- ((Z '(2 0)) (X NIL) (Y NIL))
 -- ((Z '(0 0)) (X NIL) (Y '(ACL2::A NIL)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z '(-1)) (X '(0 NIL NIL)) (Y '(0 0)))
                  ((Z '(17 6))
                   (X '(#\D #\C #\D #\C #\O))
                   (Y NIL))
                  ((Z '(13)) (X '(-1 1)) (Y '(-3)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::LEN2 ACL2S::APP2) ACL2S::Q '(((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\D) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\C) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\D) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\C) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\O) NIL)))))) (ACL2S::Y NIL)) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1) NIL))) ((ACL2S::Z NIL) (ACL2S::X NIL) (ACL2S::Y NIL)) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)) (ACL2S::X NIL) (ACL2S::Y NIL))) '((ACL2S::INTERNAL-NUMBER (0) 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::Y) (TRUE-LISTP (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Z) (TRUE-LISTP (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (EQUAL (ACL2S::LEN2 (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (ACL2S::LEN2 (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Z ACL2S::Y))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 1496 (1496 unique)
satisfied the hypotheses, and found 0 counterexamples and 1496 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Z '(346)) (X '(-1 -1)) (Y NIL))
 -- ((Z '(4 NIL)) (X '(#C(2 1))) (Y '(1 0)))
 -- ((Z '(-1 0)) (X NIL) (Y NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP Y)
              (TRUE-LISTP (APP2 X (APP2 Y Z)))
              (TRUE-LISTP X)
              (TRUE-LISTP Z)
              (TRUE-LISTP (APP2 Y Z)))
         (EQUAL (LEN2 (APP2 X (APP2 Y Z)))
                (LEN2 (APP2 X (APP2 Z Y)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (len2 (app2 x (app2 y z)))
	       :required-expressions len2 (app2 x y)
	       :with list-ops
	       )

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM LEN2 (APP2 X (APP2 Y Z)))
  (((TRUE-LISTP Y))
   ((TRUE-LISTP (APP2 X (APP2 Y Z))))
   ((TRUE-LISTP X))
   ((TRUE-LISTP Z))
   ((TRUE-LISTP (APP2 Y Z)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1445 (1445 unique)
satisfied the hypotheses, and found 1445 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z NIL) (X '(0 0)) (Y '(0 0)))
 -- ((Z '(-1)) (X '(-1 0)) (Y '(1)))
 -- ((Z '(167)) (X NIL) (Y '("CCCD" "BBAA" "BA")))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z NIL) (X '(0 0)) (Y '(0 0)))
                  ((Z '(-1)) (X '(-1 0)) (Y '(1)))
                  ((Z '(167))
                   (X NIL)
                   (Y '("CCCD" "BBAA" "BA")))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::LEN2 (ACL2S::APP2 ACL2S::X ACL2S::Y)) ACL2S::Q '(((ACL2S::Z NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 0 1 0 1) NIL)) (ACL2S::X NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\C #\C #\C #\D) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\B #\B #\A #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\B #\A) NIL)))))) '((ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::Y) (TRUE-LISTP (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Z) (TRUE-LISTP (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (EQUAL (ACL2S::LEN2 (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (ACL2S::LEN2 (ACL2S::APP2 (ACL2S::APP2 ACL2S::X ACL2S::Y) ACL2S::Z)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 1369 (1369 unique)
satisfied the hypotheses, and found 0 counterexamples and 1369 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Z '(825 13 1)) (X NIL) (Y NIL))
 -- ((Z '(0)) (X NIL) (Y NIL))
 -- ((Z NIL) (X NIL) (Y NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP Y)
              (TRUE-LISTP (APP2 X (APP2 Y Z)))
              (TRUE-LISTP X)
              (TRUE-LISTP Z)
              (TRUE-LISTP (APP2 Y Z)))
         (EQUAL (LEN2 (APP2 X (APP2 Y Z)))
                (LEN2 (APP2 (APP2 X Y) Z))))(thm (IMPLIES (AND (TRUE-LISTP Y)
              (TRUE-LISTP (APP2 X (APP2 Y Z)))
              (TRUE-LISTP X)
              (TRUE-LISTP Z)
              (TRUE-LISTP (APP2 Y Z)))
         (EQUAL (LEN2 (APP2 X (APP2 Y Z)))
                (LEN2 (APP2 (APP2 X Y) Z)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14DDB18E>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14DDB18E>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (AND (TRUE-LISTP Y)
              (TRUE-LISTP (APP2 X (APP2 Y Z)))
              (TRUE-LISTP X)
              (TRUE-LISTP Z)
              (TRUE-LISTP (APP2 Y Z)))
         (EQUAL (LEN2 (APP2 X (APP2 Y Z)))
                (LEN2 (APP2 (APP2 X Y) Z)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Perhaps we can prove *1 by induction.  Nine induction schemes are suggested
by this conjecture.  Subsumption reduces that number to six.  These
merge into three derived induction schemes.  However, two of these
are flawed and so we are left with one viable candidate.  

We will induct according to a scheme suggested by (APP2 X Y).  This
suggestion was produced using the :induction rules APP2-INDUCTION-SCHEME,
APP2-INDUCTION-SCHEME-FROM-DEFINITION and TRUE-LISTP.  If we let (:P X Y Z)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (AND (TRUE-LISTP X) (TRUE-LISTP Y)))
              (:P X Y Z))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP Y))
                   (NOT (ENDP X))
                   (:P (CDR X) Y Z))
              (:P X Y Z))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP Y))
                   (ENDP X))
              (:P X Y Z))).
This induction is justified by the same argument used to admit APP2.
When applied to the goal at hand the above induction scheme produces
four nontautological subgoals.
Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal is COMPLETED!

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:DEFINITION APP2-DEFINITION-RULE)
        (:DEFINITION ENDP)
        (:DEFINITION LEN2-DEFINITION-RULE)
        (:DEFINITION NOT)
        (:DEFINITION TRUE-LISTP)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION APP2-INDUCTION-SCHEME)
        (:INDUCTION APP2-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION TRUE-LISTP)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE ACL2::TRUE-LISTP-WHEN-ATOM)
        (:TYPE-PRESCRIPTION APP2-CONTRACT))
Warnings:  Invariant-risk
Time:  0.39 seconds (prove: 0.31, print: 0.00, other: 0.08)
Prover steps counted:  14965

**Summary of Cgen/testing**
We tested 1000 examples across 1 subgoals, of which 936 (936 unique)
satisfied the hypotheses, and found 0 counterexamples and 936 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((Z '(-1)) (X NIL) (Y '(278)))
 -- ((Z '(T NIL)) (X NIL) (Y '(-1)))
 -- ((Z '(ACL2::V)) (X NIL) (Y '(NIL T)))

Proof succeeded.
ACL2S !>(suggest-lemma (equal x y)
	       :required-expressions (in2 a x)
	       :with list-ops
	       :hyps (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EQUAL X Y) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1500 (1500 unique)
satisfied the hypotheses, and found 1500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(12 0)) (X '(1 0)))
 -- ((Y '(1)) (X '(911 27 0)))
 -- ((Y NIL) (X '(-2/7)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(12 0)) (X '(1 0)))
                  ((Y '(1)) (X '(911 27 0)))
                  ((Y NIL) (X '(-2/7)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 0 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1)) NIL)))) '(NIL NIL NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (equal x y)
	       :required-expressions (in2 a x)
	       :with list-ops equal
	       :hyps (true-listp x) (true-listp y) (allp a))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EQUAL X Y) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1497 (1497 unique)
satisfied the hypotheses, and found 1497 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A 0) (Y NIL) (X '(2 0 0)))
 -- ((A '(0 . 20)) (Y '(#\B #\B #\A #\B #\A #\A #\C)) (X NIL))
 -- ((A -83/13) (Y '(-1)) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A 0) (Y NIL) (X '(2 0 0)))
                  ((A '(0 . 20))
                   (Y '(#\B #\B #\A #\B #\A #\A #\C))
                   (X NIL))
                  ((A -83/13) (Y '(-1)) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\C) NIL)))))))) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X NIL))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (ACL2S::ALLP ACL2S::A)) (EQUAL (EQUAL ACL2S::X ACL2S::Y) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::A))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 7 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 3 counterexamples and 4 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '(78 133)) (Y NIL) (X NIL))
 -- ((A '(0 . -1/2)) (Y NIL) (X NIL))
 -- ((A 0) (Y NIL) (X NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A NIL) (Y NIL) (X NIL))
 -- ((A '(50 9)) (Y '(31 4 1)) (X '(0 0)))
 -- ((A #\A) (Y NIL) (X '(ACL2::DBBBB ACL2::CA ACL2::A ACL2::A)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '(78 133)) (Y NIL) (X NIL))
                  ((A '(0 . -1/2)) (Y NIL) (X NIL))
                  ((A 0) (Y NIL) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 0 0 0 1) NIL))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\C) NIL)))))))) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X NIL))) '(T T T NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (ACL2S::ALLP ACL2S::A)) (EQUAL (EQUAL ACL2S::X ACL2S::Y) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 11 examples across 1 subgoals, of which 11 (11 unique) satisfied
the hypotheses, and found 3 counterexamples and 8 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '(-1/4 . 0)) (Y NIL) (X '(0)))
 -- ((A '((ACL2::A . 0) 0 . -2)) (Y NIL) (X '(0)))
 -- ((A NIL) (Y NIL) (X '(0 0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '(0 0)) (Y NIL) (X NIL))
 -- ((A '(0 NIL)) (Y '(-1)) (X NIL))
 -- ((A NIL) (Y '(-1)) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '(-1/4 . 0)) (Y NIL) (X '(0)))
                  ((A '((ACL2::A . 0) 0 . -2))
                   (Y NIL)
                   (X '(0)))
                  ((A NIL) (Y NIL) (X '(0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) (ACL2S::INTERNAL-NUMBER (0)))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (1) 0 1)))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::A NIL) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 0 0 0 1) NIL))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\C) NIL)))))))) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X NIL))) '(NIL NIL NIL T T T NIL NIL NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (equal x y)
	       :required-expressions (in2 a x) (in2 a y)
	       :with list-ops equal
	       :hyps (true-listp x) (true-listp y) (allp a))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EQUAL X Y) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1496 (1496 unique)
satisfied the hypotheses, and found 1496 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '(T . 0)) (Y NIL) (X '(0)))
 -- ((A #\B) (Y '(0 0)) (X NIL))
 -- ((A '(#\T #\B #\J #\F)) (Y NIL) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '(T . 0)) (Y NIL) (X '(0)))
                  ((A #\B) (Y '(0 0)) (X NIL))
                  ((A '(#\T #\B #\J #\F))
                   (Y NIL)
                   (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-NUMBER (0)))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CHAR #\B)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\T) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\J) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\F) NIL))))) (ACL2S::Y NIL) (ACL2S::X NIL))) '(NIL NIL T)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (ACL2S::ALLP ACL2S::A)) (EQUAL (EQUAL ACL2S::X ACL2S::Y) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::Y) (EQUAL ACL2S::Y ACL2S::X))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 80 examples across 1 subgoals, of which 80 (80 unique) satisfied
the hypotheses, and found 3 counterexamples and 77 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A NIL) (Y '(0 10 NIL)) (X '(ACL2::V ACL2::BA)))
 -- ((A 0) (Y '(0)) (X '(ACL2::BA)))
 -- ((A 0) (Y NIL) (X '(0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A #\B) (Y NIL) (X '(16)))
 -- ((A '("A" . 0)) (Y NIL) (X '(-1)))
 -- ((A NIL) (Y '("ADDB" "BABAAA" "A" "A")) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A NIL)
                   (Y '(0 10 NIL))
                   (X '(ACL2::V ACL2::BA)))
                  ((A 0) (Y '(0)) (X '(ACL2::BA)))
                  ((A 0) (Y NIL) (X '(0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::A NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL V) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)))) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-NUMBER (0)))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CHAR #\B)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\T) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\J) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\F) NIL))))) (ACL2S::Y NIL) (ACL2S::X NIL))) '(NIL NIL NIL NIL NIL T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: WALK
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (equal x y)
	       :required-expressions equal (in2 a x) (in2 a y)
	       :with list-ops equal
	       :hyps (true-listp x) (true-listp y) (allp a))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EQUAL X Y) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1497 (1497 unique)
satisfied the hypotheses, and found 1497 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A NIL) (Y '(0)) (X NIL))
 -- ((A '(T . T)) (Y '(0)) (X '(ACL2::A)))
 -- ((A '((ACL2::A . T) 1)) (Y NIL) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A NIL) (Y '(0)) (X NIL))
                  ((A '(T . T)) (Y '(0)) (X '(ACL2::A)))
                  ((A '((ACL2::A . T) 1))
                   (Y NIL)
                   (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::A NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS T T)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) T) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::Y NIL) (ACL2S::X NIL))) '(NIL NIL T)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (ACL2S::ALLP ACL2S::A)) (EQUAL (EQUAL ACL2S::X ACL2S::Y) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::Y) (EQUAL ACL2S::Y NIL))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 6 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A 0) (Y '(-1 0)) (X '(ACL2::ABA)))
 -- ((A '((1 . 6) 0 . T)) (Y NIL) (X '(11 -3 0)))
 -- ((A '((T . T) NIL)) (Y NIL) (X '(3)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '(T T)) (Y NIL) (X NIL))
 -- ((A #\B) (Y '(2)) (X '(0)))
 -- ((A NIL) (Y '(ACL2::H)) (X '(149 #\A)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A 0) (Y '(-1 0)) (X '(ACL2::ABA)))
                  ((A '((1 . 6) 0 . T))
                   (Y NIL)
                   (X '(11 -3 0)))
                  ((A '((T . T) NIL)) (Y NIL) (X '(3)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABA) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) T))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T T) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) ((ACL2S::A NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS T T)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) T) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::Y NIL) (ACL2S::X NIL))) '(NIL NIL NIL NIL NIL T)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (ACL2S::ALLP ACL2S::A)) (EQUAL (EQUAL ACL2S::X ACL2S::Y) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (EQUAL (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::Y) ACL2S::A) (EQUAL NIL ACL2S::X))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 12 examples across 1 subgoals, of which 12 (12 unique) satisfied
the hypotheses, and found 3 counterexamples and 9 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '((1 T) (ACL2::A T))) (Y '(0 0)) (X NIL))
 -- ((A NIL) (Y NIL) (X '(0)))
 -- ((A NIL) (Y '(-1)) (X '(-51)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A 0) (Y NIL) (X NIL))
 -- ((A '(#\A ACL2::A)) (Y '(0 0)) (X '(-68 NIL T)))
 -- ((A '(-103 . 0)) (Y NIL) (X '((2) T 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '((1 T) (ACL2::A T)))
                   (Y '(0 0))
                   (X NIL))
                  ((A NIL) (Y NIL) (X '(0)))
                  ((A NIL) (Y '(-1)) (X '(-51)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS T NIL)) NIL))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL)) ((ACL2S::A NIL) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::A NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 1 1) NIL))) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABA) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) T))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T T) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) ((ACL2S::A NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS T T)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) T) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::Y NIL) (ACL2S::X NIL))) '(NIL NIL NIL NIL NIL NIL NIL NIL T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (equal x y)
	       :required-expressions equal (in2 a x) (in2 a y)
	       :with list-ops equal
	       :hyps (true-listp x) (true-listp y) (allp a))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EQUAL X Y) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1496 (1496 unique)
satisfied the hypotheses, and found 1496 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '((NIL) T . T)) (Y '(ACL2::A ACL2::A)) (X NIL))
 -- ((A #\B) (Y '(-13/4 0)) (X NIL))
 -- ((A #\A) (Y NIL) (X '(NIL T)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '((NIL) T . T))
                   (Y '(ACL2::A ACL2::A))
                   (X NIL))
                  ((A #\B) (Y '(-13/4 0)) (X NIL))
                  ((A #\A) (Y NIL) (X '(NIL T)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL NIL) (ACL2S::INTERNAL-CONS T T))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CHAR #\B)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CHAR #\A)) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL))))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (ACL2S::ALLP ACL2S::A)) (EQUAL (EQUAL ACL2S::X ACL2S::Y) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::Y) NIL)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 7 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 3 counterexamples and 4 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '(0 1)) (Y NIL) (X NIL))
 -- ((A '(34)) (Y NIL) (X NIL))
 -- ((A 0) (Y NIL) (X '(0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '(("A" 2) (NIL -1/2))) (Y '(0)) (X NIL))
 -- ((A '(#\C #\L #\H #\N)) (Y NIL) (X '(0)))
 -- ((A '(0 . -147)) (Y '(675 31)) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '(0 1)) (Y NIL) (X NIL))
                  ((A '(34)) (Y NIL) (X NIL))
                  ((A 0) (Y NIL) (X '(0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 1) NIL)) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL NIL) (ACL2S::INTERNAL-CONS T T))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CHAR #\B)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CHAR #\A)) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL))))) '(T T NIL NIL NIL NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (equal x y)
	       :required-expressions (equal (in2 a x) (in2 a y))
	       :with list-ops equal
	       :hyps (true-listp x) (true-listp y) (allp a))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EQUAL X Y) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1482 (1482 unique)
satisfied the hypotheses, and found 1482 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A NIL) (Y '(6)) (X NIL))
 -- ((A '(NIL . 1)) (Y NIL) (X '(-1)))
 -- ((A #\B) (Y '(ACL2::BA)) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A NIL) (Y '(6)) (X NIL))
                  ((A '(NIL . 1)) (Y NIL) (X '(-1)))
                  ((A #\B) (Y '(ACL2::BA)) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y))) ACL2S::Q '(((ACL2S::A NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL)) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CHAR #\B)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)) (ACL2S::X NIL))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (ACL2S::ALLP ACL2S::A)) (EQUAL (EQUAL ACL2S::X ACL2S::Y) (EQUAL (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::A))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 17 examples across 1 subgoals, of which 17 (17 unique) satisfied
the hypotheses, and found 3 counterexamples and 14 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A T) (Y '(122 24)) (X '(5)))
 -- ((A '(2)) (Y NIL) (X NIL))
 -- ((A 0) (Y NIL) (X NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A -9/34) (Y '(0 0 NIL NIL)) (X '(0)))
 -- ((A '(0 . T)) (Y '(NIL (NIL T) 0)) (X '(-2)))
 -- ((A '((0 T) (T T))) (Y '(1)) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A T) (Y '(122 24)) (X '(5)))
                  ((A '(2)) (Y NIL) (X NIL))
                  ((A 0) (Y NIL) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y))) ACL2S::Q '(((ACL2S::A T) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 1) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL)) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CHAR #\B)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)) (ACL2S::X NIL))) '(NIL T T NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (ACL2S::ALLP ACL2S::A)) (EQUAL (EQUAL ACL2S::X ACL2S::Y) (EQUAL (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) (EQUAL ACL2S::Y ACL2S::X)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 44 examples across 1 subgoals, of which 44 (44 unique) satisfied
the hypotheses, and found 3 counterexamples and 41 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A NIL) (Y NIL) (X '(0 NIL 0)))
 -- ((A 0) (Y NIL) (X '(4 0)))
 -- ((A 0) (Y NIL) (X '(0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '(-2 . 3)) (Y '(-1/2 0)) (X '("AAAAAD" "BABAAA")))
 -- ((A '(48 8 NIL)) (Y '(14 7 0)) (X '(ACL2::D)))
 -- ((A '((0 0) (0 #\A))) (Y NIL) (X '(-9 0 T)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A NIL) (Y NIL) (X '(0 NIL 0)))
                  ((A 0) (Y NIL) (X '(4 0)))
                  ((A 0) (Y NIL) (X '(0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y))) ACL2S::Q '(((ACL2S::A NIL) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::A T) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 1) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL)) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::A (ACL2S::INTERNAL-CHAR #\B)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)) (ACL2S::X NIL))) '(NIL NIL NIL NIL T T NIL NIL NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (in2 a x)
	       :required-expressions y
	       :with list-ops
	       :hyps (true-listp x) (true-listp y) (allp a) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 A X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 488 (488 unique)
satisfied the hypotheses, and found 488 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (TRUE-LISTP X) (NOT (ALLP A)))
 -- ((A '(-67)) (Y '((0) NIL 0)) (X '((0) NIL 0)))
 -- ((A T) (Y NIL) (X NIL))
 -- ((A 'ACL2::A) (Y '(0 0)) (X '(0 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '(-67))
                   (Y '((0) NIL 0))
                   (X '((0) NIL 0)))
                  ((A T) (Y NIL) (X NIL))
                  ((A 'ACL2::A) (Y '(0 0)) (X '(0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::Y) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 0 0 1) NIL)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::A T) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) '(NIL NIL NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: WALK
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>  C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: CCL::FD-READ
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(suggest-lemma (in2 3 x)
	       :required-expressions y
	       :with list-ops
	       :hyps (true-listp x) (true-listp y) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 '3 X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 268 (268 unique)
satisfied the hypotheses, and found 268 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(NOT (TRUE-LISTP X))
 -- ((Y '(-10 0)) (X '(-10 0)))
 -- ((Y '(19)) (X '(19)))
 -- ((Y NIL) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-10 0)) (X '(-10 0)))
                  ((Y '(19)) (X '(19)))
                  ((Y NIL) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::Y) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1) NIL))) ((ACL2S::Y NIL) (ACL2S::X NIL))) '(NIL NIL NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (in2 3 x)
	       :required-expressions (in2 3 y)
	       :with list-ops
	       :hyps (true-listp x) (true-listp y) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 '3 X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 456 (456 unique)
satisfied the hypotheses, and found 456 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(NOT (TRUE-LISTP X))
 -- ((Y '(0 0)) (X '(0 0)))
 -- ((Y '(0 0 T)) (X '(0 0 T)))
 -- ((Y '(0)) (X '(0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0 0)) (X '(0 0)))
                  ((Y '(0 0 T)) (X '(0 0 T)))
                  ((Y '(0)) (X '(0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 (ACL2S::INTERNAL-NUMBER (0) 1 1) ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T NIL))))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 3 ACL2S::X) (ACL2S::IN2 3 ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


Q.E.D.

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP X)
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (EQUAL X Y))
         (EQUAL (IN2 3 X) (IN2 3 Y)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (in2 a x)
	       :required-expressions (in2 a y)
	       :with list-ops
	       :hyps (true-listp x) (true-listp y) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 A X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 492 (492 unique)
satisfied the hypotheses, and found 492 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (ALLP A) (NOT (TRUE-LISTP X)))
 -- ((Y '(5 1)) (X '(5 1)) (A #\B))
 -- ((Y '(3)) (X '(3)) (A '(27 "A")))
 -- ((Y NIL) (X NIL) (A "A"))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(5 1)) (X '(5 1)) (A #\B))
                  ((Y '(3)) (X '(3)) (A '(27 "A")))
                  ((Y NIL) (X NIL) (A "A"))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-CHAR #\B))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) NIL)))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-STRING #\A)))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


Q.E.D.

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP X)
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (EQUAL X Y))
         (EQUAL (IN2 A X) (IN2 A Y)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (in2 a x)
	       :required-expressions  a y
	       :with list-ops
	       :hyps (true-listp x) (true-listp y) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 A X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 456 (456 unique)
satisfied the hypotheses, and found 456 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (ALLP A) (NOT (TRUE-LISTP X)))
 -- ((Y NIL) (X NIL) (A NIL))
 -- ((Y NIL) (X NIL) (A 0))
 -- ((Y '(0 NIL)) (X '(0 NIL)) (A T))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y NIL) (X NIL) (A NIL))
                  ((Y NIL) (X NIL) (A 0))
                  ((Y '(0 NIL)) (X '(0 NIL)) (A T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::A ACL2S::Y) ACL2S::Q '(((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::A T))) '(NIL NIL NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: EQUAL
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (in2 a x)
	       :required-expressions in2
	       :with list-ops
	       :hyps (true-listp x) (true-listp y) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 A X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 500 (500 unique)
satisfied the hypotheses, and found 500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (ALLP A) (NOT (TRUE-LISTP X)))
 -- ((Y NIL) (X NIL) (A '(-361 . 49)))
 -- ((Y NIL) (X NIL) (A '(ACL2::BA)))
 -- ((Y NIL) (X NIL) (A '((0 -2) (0 -1))))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y NIL) (X NIL) (A '(-361 . 49)))
                  ((Y NIL) (X NIL) (A '(ACL2::BA)))
                  ((Y NIL) (X NIL) (A '((0 -2) (0 -1))))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::IN2) ACL2S::Q '(((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 0 1 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1)))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) NIL))))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::Y ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION IFF))


([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (ALLP A)
              (TRUE-LISTP X)
              (NOT (IN2 A X)))
         (NOT (IN2 X X)))

*1 (Subgoal 2) is pushed for proof by induction.

])

**Summary of Cgen/testing**
We tested 607 examples across 2 subgoals, of which 489 (489 unique)
satisfied the hypotheses, and found 3 counterexamples and 486 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Subgoal 1"]
(IMPLIES (AND (ALLP A) (TRUE-LISTP X) (IN2 A X)) (IN2 X X))
 -- ((Y '(0 0)) (X '(0 0)) (A 0))
 -- ((Y '(NIL (-1) 0)) (X '(NIL (-1) 0)) (A NIL))
 -- ((Y '(T NIL)) (X '(T NIL)) (A NIL))

Cases in which the conjecture is true include:
 [found in : "Subgoal 2"]
 -- ((Y NIL) (X NIL) (A '(1 . -28)))
 -- ((Y NIL) (X NIL) (A '((NIL 1) (1 NIL))))
 -- ((Y '(2)) (X '(2)) (A '(0 . 6)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0 0)) (X '(0 0)) (A 0))
                  ((Y '(NIL (-1) 0))
                   (X '(NIL (-1) 0))
                   (A NIL))
                  ((Y '(T NIL)) (X '(T NIL)) (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::IN2) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::A NIL)) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 0 1 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1)))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) NIL))))) '(T T T NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


Q.E.D.

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP X)
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (EQUAL X Y))
         (EQUAL (IN2 A X) (IN2 A Y)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (in2 a x)
	       :required-expressions; in2
	       :with in2 app2 equal
	       :hyps (true-listp x) (true-listp y) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 A X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 500 (500 unique)
satisfied the hypotheses, and found 500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (ALLP A) (NOT (TRUE-LISTP X)))
 -- ((Y '(0 0)) (X '(0 0)) (A '(20 . 0)))
 -- ((Y '(0)) (X '(0)) (A #\A))
 -- ((Y '(ACL2::A ACL2::A)) (X '(ACL2::A ACL2::A)) (A '((NIL NIL) (T NIL))))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0 0)) (X '(0 0)) (A '(20 . 0)))
                  ((Y '(0)) (X '(0)) (A #\A))
                  ((Y '(ACL2::A ACL2::A))
                   (X '(ACL2::A ACL2::A))
                   (A '((NIL NIL) (T NIL))))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-CHAR #\A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL)) NIL))))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) NIL)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 57 examples across 1 subgoals, of which 47 (47 unique) satisfied
the hypotheses, and found 3 counterexamples and 44 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (AND (ALLP A) (TRUE-LISTP X)) (NOT (IN2 A X)))
 -- ((Y '(2 0)) (X '(2 0)) (A 0))
 -- ((Y '(0 0)) (X '(0 0)) (A 0))
 -- ((Y '(7 14 0 0)) (X '(7 14 0 0)) (A 0))

Cases in which the conjecture is true include:
 [found in : "Goal''"]
 -- ((Y NIL) (X NIL) (A 0))
 -- ((Y '(6)) (X '(6)) (A '((T) T)))
 -- ((Y NIL) (X NIL) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(2 0)) (X '(2 0)) (A 0))
                  ((Y '(0 0)) (X '(0 0)) (A 0))
                  ((Y '(7 14 0 0))
                   (X '(7 14 0 0))
                   (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-CHAR #\A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL)) NIL))))) '(T T T NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


Q.E.D.

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP X)
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (EQUAL X Y))
         (EQUAL (IN2 A X) (IN2 A Y)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (in2 a x)
	       :with in2 app2 equal cons
	       :hyps (true-listp x) (true-listp y) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 A X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 500 (500 unique)
satisfied the hypotheses, and found 500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (ALLP A) (NOT (TRUE-LISTP X)))
 -- ((Y '(-1 0)) (X '(-1 0)) (A '(-1)))
 -- ((Y '(4 6 1 0)) (X '(4 6 1 0)) (A '(8 . 0)))
 -- ((Y '(-55 14 -1)) (X '(-55 14 -1)) (A '(#\M . 3/14)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-1 0)) (X '(-1 0)) (A '(-1)))
                  ((Y '(4 6 1 0))
                   (X '(4 6 1 0))
                   (A '(8 . 0)))
                  ((Y '(-55 14 -1))
                   (X '(-55 14 -1))
                   (A '(#\M . 3/14)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\M) (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1)))))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) NIL)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 16 examples across 1 subgoals, of which 15 (15 unique) satisfied
the hypotheses, and found 3 counterexamples and 12 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (AND (ALLP A) (TRUE-LISTP X)) (NOT (IN2 A X)))
 -- ((Y '(160 #\A NIL)) (X '(160 #\A NIL)) (A NIL))
 -- ((Y '(0)) (X '(0)) (A 0))
 -- ((Y '(5 0 0)) (X '(5 0 0)) (A 0))

Cases in which the conjecture is true include:
 [found in : "Goal''"]
 -- ((Y NIL) (X NIL) (A 0))
 -- ((Y '(#\A)) (X '(#\A)) (A '(0)))
 -- ((Y '(ACL2::ACAAAC)) (X '(ACL2::ACAAAC)) (A '((T) 1 . 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(160 #\A NIL))
                   (X '(160 #\A NIL))
                   (A NIL))
                  ((Y '(0)) (X '(0)) (A 0))
                  ((Y '(5 0 0)) (X '(5 0 0)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 0 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 0 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\M) (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1)))))) '(T T T NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


Q.E.D.

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP X)
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (EQUAL X Y))
         (EQUAL (IN2 A X) (IN2 A Y)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (in2 a x)
	       :with in2 app2 equal cons car cdr
	       :hyps (true-listp x) (true-listp y) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 A X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 500 (500 unique)
satisfied the hypotheses, and found 500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (ALLP A) (NOT (TRUE-LISTP X)))
 -- ((Y '(-13 1 T)) (X '(-13 1 T)) (A 0))
 -- ((Y NIL) (X NIL) (A '(1 1)))
 -- ((Y '(3)) (X '(3)) (A '(#\A 1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-13 1 T)) (X '(-13 1 T)) (A 0))
                  ((Y NIL) (X NIL) (A '(1 1)))
                  ((Y '(3)) (X '(3)) (A '(#\A 1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) NIL)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 86 examples across 1 subgoals, of which 85 (85 unique) satisfied
the hypotheses, and found 3 counterexamples and 82 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (AND (ALLP A) (TRUE-LISTP X)) (NOT (IN2 A X)))
 -- ((Y '(0 NIL)) (X '(0 NIL)) (A NIL))
 -- ((Y '(ACL2::A ACL2::A)) (X '(ACL2::A ACL2::A)) (A 'ACL2::A))
 -- ((Y '(T NIL NIL)) (X '(T NIL NIL)) (A NIL))

Cases in which the conjecture is true include:
 [found in : "Goal''"]
 -- ((Y NIL) (X NIL) (A '(#\A #\A #\B #\A #\A)))
 -- ((Y NIL) (X NIL) (A '(NIL)))
 -- ((Y '(44 5 1)) (X '(44 5 1)) (A '(0 0 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0 NIL)) (X '(0 NIL)) (A NIL))
                  ((Y '(ACL2::A ACL2::A))
                   (X '(ACL2::A ACL2::A))
                   (A 'ACL2::A))
                  ((Y '(T NIL NIL))
                   (X '(T NIL NIL))
                   (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) '(T T T NIL NIL NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: UNIFY
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (in2 a x)
	       :with in2 app2 equal cons
	       :hyps (true-listp x) (true-listp y) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 A X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 458 (458 unique)
satisfied the hypotheses, and found 458 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (ALLP A) (NOT (TRUE-LISTP X)))
 -- ((Y NIL) (X NIL) (A #\A))
 -- ((Y '(0)) (X '(0)) (A '(1 . 0)))
 -- ((Y NIL) (X NIL) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y NIL) (X NIL) (A #\A))
                  ((Y '(0)) (X '(0)) (A '(1 . 0)))
                  ((Y NIL) (X NIL) (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CHAR #\A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A NIL))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) NIL)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 128 examples across 1 subgoals, of which 128 (128 unique)
satisfied the hypotheses, and found 3 counterexamples and 125 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (AND (ALLP A) (TRUE-LISTP X)) (NOT (IN2 A X)))
 -- ((Y '(T NIL)) (X '(T NIL)) (A NIL))
 -- ((Y '(22 0)) (X '(22 0)) (A 0))
 -- ((Y '(NIL)) (X '(NIL)) (A NIL))

Cases in which the conjecture is true include:
 [found in : "Goal''"]
 -- ((Y '(0 0)) (X '(0 0)) (A '(0 0)))
 -- ((Y '(ACL2::ADABD ACL2::O)) (X '(ACL2::ADABD ACL2::O)) (A '(4 -1/2 0)))
 -- ((Y NIL) (X NIL) (A '(0 . T)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(T NIL)) (X '(T NIL)) (A NIL))
                  ((Y '(22 0)) (X '(22 0)) (A 0))
                  ((Y '(NIL)) (X '(NIL)) (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::A NIL)) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CHAR #\A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A NIL))) '(T T T NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


Q.E.D.

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP X)
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (EQUAL X Y))
         (EQUAL (IN2 A X) (IN2 A Y)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 91 (91 unique)
satisfied the hypotheses, and found 91 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(-1)) (X '(-1 0)) (A 0))
 -- ((Y NIL) (X '(NIL 0 T NIL NIL)) (A NIL))
 -- ((Y NIL) (X '(0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-1)) (X '(-1 0)) (A 0))
                  ((Y NIL) (X '(NIL 0 T NIL NIL)) (A NIL))
                  ((Y NIL) (X '(0)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::A NIL)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T T)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 63 (63 unique)
satisfied the hypotheses, and found 0 counterexamples and 63 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(11 -1 -1)) (X '(0 NIL NIL T)) (A 0))
 -- ((Y '(0 NIL)) (X '(0)) (A NIL))
 -- ((Y NIL) (X '(NIL NIL)) (A NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y))
         (EQUAL T T))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions or
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1046 examples across 3 subgoals, of which 63 (63 unique)
satisfied the hypotheses, and found 3 counterexamples and 60 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (IN2 A (APP2 X Y)) (TRUE-LISTP X)) (NOT (TRUE-LISTP Y)))
 -- ((Y '(((NIL . 1) NIL . T) 0 0 NIL)) (X NIL) (A 0))
 -- ((Y '(0 0)) (X NIL) (A 0))
 -- ((Y '(-19)) (X '(((NIL) NIL . 1) (NIL 0) T NIL)) (A T))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(((T . T) NIL) (T) NIL 0)) (X NIL) (A NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y NIL) (X '(0 0 NIL)) (A NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(0)) (X NIL) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(((NIL . 1) NIL . T) 0 0 NIL))
                   (X NIL)
                   (A 0))
                  ((Y '(0 0)) (X NIL) (A 0))
                  ((Y '(-19))
                   (X '(((NIL) NIL . 1) (NIL 0) T NIL))
                   (A T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS NIL T)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL NIL) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0) 1))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::A T))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR T ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 51 (51 unique)
satisfied the hypotheses, and found 0 counterexamples and 51 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(-1 0)) (X NIL) (A 0))
 -- ((Y NIL) (X '(0 1 NIL NIL)) (A NIL))
 -- ((Y '(0)) (X '(0 0)) (A 0))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y))
         (EQUAL T (OR T Y)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (in2 a x)
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 94 (94 unique)
satisfied the hypotheses, and found 94 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(74)) (X '(0 0)) (A 0))
 -- ((Y '(T)) (X '(0 0)) (A 0))
 -- ((Y '(0 T T)) (X '(-1 0)) (A T))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(74)) (X '(0 0)) (A 0))
                  ((Y '(T)) (X '(0 0)) (A 0))
                  ((Y '(0 T T)) (X '(-1 0)) (A T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 0 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A T))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) T))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 71 (71 unique)
satisfied the hypotheses, and found 0 counterexamples and 71 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(0)) (X '((#\A #\B #\A) 0 0 NIL)) (A NIL))
 -- ((Y '(ACL2::CGE ACL2::O)) (X '(5 0 0)) (A 0))
 -- ((Y '(-2)) (X '(48 -1/4 NIL)) (A NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y))
         (EQUAL T (OR (IN2 A X) T)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (in2 a x) (in2 a y)
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1114 examples across 3 subgoals, of which 57 (57 unique)
satisfied the hypotheses, and found 3 counterexamples and 54 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (IN2 A (APP2 X Y)) (TRUE-LISTP X)) (NOT (TRUE-LISTP Y)))
 -- ((Y '(NIL NIL)) (X NIL) (A NIL))
 -- ((Y '(860 0 0 1)) (X '(7 1)) (A 0))
 -- ((Y NIL) (X '(0)) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '((0 . 0) NIL T 0)) (X NIL) (A NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(0 NIL)) (X NIL) (A NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(-1 0)) (X '(0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL NIL)) (X NIL) (A NIL))
                  ((Y '(860 0 0 1)) (X '(7 1)) (A 0))
                  ((Y NIL) (X '(0)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 0 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (NOT (IN2 A X)))
         (IN2 A Y))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 78 (78 unique)
satisfied the hypotheses, and found 0 counterexamples and 78 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '((0 NIL) NIL 0 NIL)) (X '(-1)) (A 0))
 -- ((Y NIL) (X '(NIL T)) (A NIL))
 -- ((Y NIL) (X '((0 . 1) NIL 0 0)) (A NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y))
         (EQUAL T (OR (IN2 A X) (IN2 A Y))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.69 seconds (prove: 0.00, print: 0.00, other: 2.69)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 len2 (x)
     :input-contract (true-listp x)
     :output-contract (natp (len2 x))
     (if (endp x)
	 0
       (+ 1 (len2 (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LEN2))
             '(CDR X))
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.40 seconds
Form:  ( DEFUN LEN2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LEN2-CONTRACT ...)
Time:  0.13 seconds (prove: 0.08, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.13 seconds (prove: 0.08, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LEN2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.19 seconds

Function Name : LEN2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.87 seconds (prove: 0.15, print: 0.00, other: 0.72)
Prover steps counted:  3008
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 in2 (a l)
  :input-contract (true-listp l)
  :output-contract (booleanp (in2 a l))
  (if (endp l)
      nil
    (or (equal a (car l)) (in2 a (cdr l)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CAR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CAR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (EQUAL A (CAR L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CDR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (EQUAL A (CAR L)))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.57 seconds
Form:  ( DEFUN IN2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN2-CONTRACT ...)
Time:  0.16 seconds (prove: 0.10, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.16 seconds (prove: 0.10, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS IN2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.22 seconds

Function Name : IN2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.08 seconds (prove: 0.22, print: 0.00, other: 0.86)
Prover steps counted:  3679
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 app2 (x y)
  :input-contract (and (true-listp x) (true-listp y))
  :output-contract (true-listp (app2 x y))
  (if (endp x)
      y
    (cons (car x) (app2 (cdr x) y))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY APP2))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY APP2))
             '(CAR X))
 (TRUE-LISTP Y)
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.60 seconds
Form:  ( DEFUN APP2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM APP2-CONTRACT ...)
Time:  0.20 seconds (prove: 0.14, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.20 seconds (prove: 0.14, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS APP2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.26 seconds

Function Name : APP2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.17 seconds (prove: 0.38, print: 0.00, other: 0.79)
Prover steps counted:  14124
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defgroup list-ops len2 app2 cons car cdr)
ALL-GROUPS
ACL2S !>(suggest-lemma (len2 (app2 x (app2 y z)))
	       :required-expressions len2 (app2 x y)
	       :with list-ops)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM LEN2 (APP2 X (APP2 Y Z)))
  (((TRUE-LISTP Y))
   ((TRUE-LISTP (APP2 X (APP2 Y Z))))
   ((TRUE-LISTP X))
   ((TRUE-LISTP Z))
   ((TRUE-LISTP (APP2 Y Z)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1437 (1437 unique)
satisfied the hypotheses, and found 1437 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z '(ACL2::BA ACL2::A)) (X NIL) (Y '(#C(2 2) 0 0)))
 -- ((Z '(36)) (X NIL) (Y '(10)))
 -- ((Z NIL) (X '(10 0 0)) (Y NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z '(ACL2::BA ACL2::A))
                   (X NIL)
                   (Y '(#C(2 2) 0 0)))
                  ((Z '(36)) (X NIL) (Y '(10)))
                  ((Z NIL) (X '(10 0 0)) (Y NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::LEN2 (ACL2S::APP2 ACL2S::X ACL2S::Y)) ACL2S::Q '(((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::X NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::Z (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 0 1) NIL)) (ACL2S::X NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1) NIL))) ((ACL2S::Z NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::Y NIL))) '((ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::Y) (TRUE-LISTP (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Z) (TRUE-LISTP (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (EQUAL (ACL2S::LEN2 (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (ACL2S::LEN2 (ACL2S::APP2 ACL2S::Z (ACL2S::APP2 ACL2S::X ACL2S::Y))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 1460 (1460 unique)
satisfied the hypotheses, and found 0 counterexamples and 1460 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Z '(-1)) (X NIL) (Y '(-1)))
 -- ((Z '(0)) (X NIL) (Y '(-59)))
 -- ((Z '(128)) (X NIL) (Y NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP Y)
              (TRUE-LISTP (APP2 X (APP2 Y Z)))
              (TRUE-LISTP X)
              (TRUE-LISTP Z)
              (TRUE-LISTP (APP2 Y Z)))
         (EQUAL (LEN2 (APP2 X (APP2 Y Z)))
                (LEN2 (APP2 Z (APP2 X Y)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (len2 (app2 x (app2 y z)))
	       :required-expressions len2 (app2 x y) z
	       :with list-ops)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM LEN2 (APP2 X (APP2 Y Z)))
  (((TRUE-LISTP Y))
   ((TRUE-LISTP (APP2 X (APP2 Y Z))))
   ((TRUE-LISTP X))
   ((TRUE-LISTP Z))
   ((TRUE-LISTP (APP2 Y Z)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1457 (1457 unique)
satisfied the hypotheses, and found 1457 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Z NIL) (X '(ACL2::CABC ACL2::A ACL2::A)) (Y NIL))
 -- ((Z NIL) (X '((1 . T) 0 0 0)) (Y '(ACL2::BA ACL2::A)))
 -- ((Z NIL) (X NIL) (Y NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Z NIL)
                   (X '(ACL2::CABC ACL2::A ACL2::A))
                   (Y NIL))
                  ((Z NIL)
                   (X '((1 . T) 0 0 0))
                   (Y '(ACL2::BA ACL2::A)))
                  ((Z NIL) (X NIL) (Y NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::LEN2 (ACL2S::APP2 ACL2S::X ACL2S::Y) ACL2S::Z) ACL2S::Q '(((ACL2S::Z NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL CABC) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) (ACL2S::Y NIL)) ((ACL2S::Z NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) T) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) ((ACL2S::Z NIL) (ACL2S::X NIL) (ACL2S::Y NIL))) '((ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 1 1) (ACL2S::INTERNAL-NUMBER (0)))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::Y) (TRUE-LISTP (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Z) (TRUE-LISTP (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (EQUAL (ACL2S::LEN2 (ACL2S::APP2 ACL2S::X (ACL2S::APP2 ACL2S::Y ACL2S::Z))) (ACL2S::LEN2 (ACL2S::APP2 (ACL2S::APP2 ACL2S::X ACL2S::Y) ACL2S::Z)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 1446 (1446 unique)
satisfied the hypotheses, and found 0 counterexamples and 1446 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Z NIL) (X NIL) (Y NIL))
 -- ((Z NIL) (X '((#\C #\B #\B #\A) #\B 0)) (Y '(ACL2::BABAAA)))
 -- ((Z NIL) (X '(NIL NIL NIL)) (Y '(1)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (thm (IMPLIES (AND (TRUE-LISTP Y)
              (TRUE-LISTP (APP2 X (APP2 Y Z)))
              (TRUE-LISTP X)
              (TRUE-LISTP Z)
              (TRUE-LISTP (APP2 Y Z)))
         (EQUAL (LEN2 (APP2 X (APP2 Y Z)))
                (LEN2 (APP2 (APP2 X Y) Z)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6E6>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6E6>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (AND (TRUE-LISTP Y)
              (TRUE-LISTP (APP2 X (APP2 Y Z)))
              (TRUE-LISTP X)
              (TRUE-LISTP Z)
              (TRUE-LISTP (APP2 Y Z)))
         (EQUAL (LEN2 (APP2 X (APP2 Y Z)))
                (LEN2 (APP2 (APP2 X Y) Z)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Perhaps we can prove *1 by induction.  Nine induction schemes are suggested
by this conjecture.  Subsumption reduces that number to six.  These
merge into three derived induction schemes.  However, two of these
are flawed and so we are left with one viable candidate.  

We will induct according to a scheme suggested by (APP2 X Y).  This
suggestion was produced using the :induction rules APP2-INDUCTION-SCHEME,
APP2-INDUCTION-SCHEME-FROM-DEFINITION and TRUE-LISTP.  If we let (:P X Y Z)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (AND (TRUE-LISTP X) (TRUE-LISTP Y)))
              (:P X Y Z))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP Y))
                   (NOT (ENDP X))
                   (:P (CDR X) Y Z))
              (:P X Y Z))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP Y))
                   (ENDP X))
              (:P X Y Z))).
This induction is justified by the same argument used to admit APP2.
When applied to the goal at hand the above induction scheme produces
four nontautological subgoals.
Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal is COMPLETED!

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:DEFINITION APP2-DEFINITION-RULE)
        (:DEFINITION ENDP)
        (:DEFINITION LEN2-DEFINITION-RULE)
        (:DEFINITION NOT)
        (:DEFINITION TRUE-LISTP)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION APP2-INDUCTION-SCHEME)
        (:INDUCTION APP2-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION TRUE-LISTP)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE ACL2::TRUE-LISTP-WHEN-ATOM)
        (:TYPE-PRESCRIPTION APP2-CONTRACT))
Warnings:  Invariant-risk
Time:  0.41 seconds (prove: 0.32, print: 0.00, other: 0.09)
Prover steps counted:  14965

**Summary of Cgen/testing**
We tested 1000 examples across 1 subgoals, of which 993 (993 unique)
satisfied the hypotheses, and found 0 counterexamples and 993 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((Z NIL) (X '(5 0)) (Y NIL))
 -- ((Z '(2 0)) (X NIL) (Y NIL))
 -- ((Z '(-2)) (X '(0)) (Y '(0 NIL 0)))

Proof succeeded.
ACL2S !>(suggest-lemma (in2 a x)
	       :with in2 app2 equal cons
	       :hyps (true-listp x) (true-listp y) (equal x y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IN2 A X) (((TRUE-LISTP X))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 500 (500 unique)
satisfied the hypotheses, and found 500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (ALLP A) (NOT (TRUE-LISTP X)))
 -- ((Y '(-2)) (X '(-2)) (A '((T) T . T)))
 -- ((Y '(ACL2::BABBBB)) (X '(ACL2::BABBBB)) (A '(#\B #\A #\A #\A #\A #\B)))
 -- ((Y NIL) (X NIL) (A #C(1 1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-2)) (X '(-2)) (A '((T) T . T)))
                  ((Y '(ACL2::BABBBB))
                   (X '(ACL2::BABBBB))
                   (A '(#\B #\A #\A #\A #\A #\B)))
                  ((Y NIL) (X NIL) (A #C(1 1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS T T)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABBBB) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABBBB) NIL)) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) NIL)))))))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A NIL))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (EQUAL ACL2S::Y (CONS ACL2S::Y ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


**Summary of Cgen/testing**
We tested 43 examples across 1 subgoals, of which 43 (43 unique) satisfied
the hypotheses, and found 3 counterexamples and 40 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
(IMPLIES (AND (ALLP A) (TRUE-LISTP X)) (NOT (IN2 A X)))
 -- ((Y '(0 0 NIL)) (X '(0 0 NIL)) (A NIL))
 -- ((Y '(0 NIL)) (X '(0 NIL)) (A NIL))
 -- ((Y '(14 0)) (X '(14 0)) (A 0))

Cases in which the conjecture is true include:
 [found in : "Goal''"]
 -- ((Y NIL) (X NIL) (A '(-1)))
 -- ((Y NIL) (X NIL) (A '(NIL . T)))
 -- ((Y '(NIL NIL 0)) (X '(NIL NIL 0)) (A '((8 0) (-1/2 1))))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0 0 NIL)) (X '(0 0 NIL)) (A NIL))
                  ((Y '(0 NIL)) (X '(0 NIL)) (A NIL))
                  ((Y '(14 0)) (X '(14 0)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS T T)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABBBB) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABBBB) NIL)) (ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) NIL)))))))) ((ACL2S::Y NIL) (ACL2S::X NIL) (ACL2S::A NIL))) '(T T T NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::A) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (EQUAL ACL2S::X ACL2S::Y)) (EQUAL (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>

HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.



HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.


Q.E.D.

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (thm (IMPLIES (AND (TRUE-LISTP X)
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (EQUAL X Y))
         (EQUAL (IN2 A X) (IN2 A Y))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:CGEN-TESTING-DRIVER-LOOP :T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :CGEN-TESTING-DRIVER-LOOP (in
package "KEYWORD") has neither a function nor macro definition in ACL2.
Please define it.  See :DOC near-misses.  Note:  this error occurred
in the context (:CGEN-TESTING-DRIVER-LOOP :T).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6E6>, within "LOOP :T).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
TTAG NOTE: Adding ttag :T from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6E6>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (AND (TRUE-LISTP X)
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (EQUAL X Y))
         (EQUAL (IN2 A X) (IN2 A Y))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.


HARD ACL2 ERROR in B*:  Invalid attempt to bind Y to atom X.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: NIL
Warnings:  Invariant-risk
Time:  0.06 seconds (prove: 0.00, print: 0.00, other: 0.06)
Prover steps counted:  66

Proof succeeded.
ACL2S !>(suggest-lemma t
	       :required-expressions (in2 a x) (in2 a y)
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 101 (101 unique)
satisfied the hypotheses, and found 101 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y NIL) (X '(0)) (A 0))
 -- ((Y NIL) (X '(47 6 0)) (A 0))
 -- ((Y '(0 T NIL)) (X '(NIL 0 0)) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y NIL) (X '(0)) (A 0))
                  ((Y NIL) (X '(47 6 0)) (A 0))
                  ((Y '(0 T NIL))
                   (X '(NIL 0 0))
                   (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::A NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (NOT (IN2 A X)))
         (IN2 A Y))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 68 (68 unique)
satisfied the hypotheses, and found 0 counterexamples and 68 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(0)) (X NIL) (A 0))
 -- ((Y NIL) (X '(1 T T)) (A T))
 -- ((Y '(0)) (X '(8 1 0)) (A 0))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y))
         (EQUAL T (OR (IN2 A X) (IN2 A Y))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (in2 a x)
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1084 examples across 3 subgoals, of which 63 (63 unique)
satisfied the hypotheses, and found 3 counterexamples and 60 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (IN2 A (APP2 X Y)) (TRUE-LISTP X)) (NOT (TRUE-LISTP Y)))
 -- ((Y '(-1 0)) (X '(ACL2::A ACL2::A)) (A 'ACL2::A))
 -- ((Y NIL) (X '(0)) (A 0))
 -- ((Y '(-69)) (X '(-1 0)) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(0 0)) (X NIL) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(-1)) (X NIL) (A -1))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(ACL2::BDEF)) (X '(3 0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-1 0))
                   (X '(ACL2::A ACL2::A))
                   (A 'ACL2::A))
                  ((Y NIL) (X '(0)) (A 0))
                  ((Y '(-69)) (X '(-1 0)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 0 0 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (ACL2S::IN2 ACL2S::A ACL2S::X))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 155 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0 0)) (X '(ACL2::DCEA ACL2::BABAAA ACL2::BA)) (A 0))
 -- ((Y '(0)) (X NIL) (A 0))
 -- ((Y '((NIL NIL) 0 NIL NIL NIL)) (X NIL) (A NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(-3)) (X '(-1 0)) (A 0))
 -- ((Y '(-6 T)) (X '(0 "A" 0 NIL NIL)) (A "A"))
 -- ((Y NIL) (X '(ACL2::A)) (A 'ACL2::A))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0 0))
                   (X '(ACL2::DCEA ACL2::BABAAA ACL2::BA))
                   (A 0))
                  ((Y '(0)) (X NIL) (A 0))
                  ((Y '((NIL NIL) 0 NIL NIL NIL))
                   (X NIL)
                   (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DCEA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 0 0 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 159 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(-1 0)) (X '(ACL2::BBAABA ACL2::A)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(-2 0 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(18 7 0 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(-1 T NIL)) (X '((#\A) NIL "A" NIL)) (A NIL))
 -- ((Y NIL) (X '(-1 0)) (A 0))
 -- ((Y '(-1)) (X '(2 NIL)) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-1 0))
                   (X '(ACL2::BBAABA ACL2::A))
                   (A 0))
                  ((Y '(-2 0 0)) (X NIL) (A 0))
                  ((Y '(18 7 0 0)) (X NIL) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAABA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DCEA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 0 0 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 148 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '((#\A . #\B) NIL 0)) (X '(306 7 1)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(T NIL NIL)) (X '(-1)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL NIL)) (X NIL) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(0)) (X '(0 0 NIL NIL)) (A 0))
 -- ((Y NIL) (X '(-1 0)) (A 0))
 -- ((Y '(ACL2::BDBC)) (X '(((NIL . T) NIL) ACL2::A 0 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '((#\A . #\B) NIL 0))
                   (X '(306 7 1))
                   (A NIL))
                  ((Y '(T NIL NIL)) (X '(-1)) (A NIL))
                  ((Y '(NIL NIL)) (X NIL) (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CHAR #\B)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAABA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DCEA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 0 0 0 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 132 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(NIL NIL)) (X '((#\V) 0 T)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL ACL2::A 0 NIL)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(((T . T) T) NIL T NIL)) (X '(1 T NIL)) (A T))
 -- ((Y '(NIL)) (X '(0 #\A 0)) (A 0))
 -- ((Y NIL) (X '(NIL T)) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL NIL))
                   (X '((#\V) 0 T))
                   (A NIL))
                  ((Y '(0)) (X NIL) (A 0))
                  ((Y '(NIL ACL2::A 0 NIL))
                   (X NIL)
                   (A 0))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (in2 a x) y
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 89 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 5 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0)) (X '(2)) (A 0))
 -- ((Y '((T T) NIL 0)) (X '(ACL2::AG ACL2::BA)) (A NIL))
 -- ((Y '(NIL NIL 0)) (X '(0 0)) (A NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(ACL2::A 0 0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(NIL NIL)) (X '(-1 0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(947 6 1 0)) (X '(T)) (A T))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0)) (X '(2)) (A 0))
                  ((Y '((T T) NIL 0))
                   (X '(ACL2::AG ACL2::BA))
                   (A NIL))
                  ((Y '(NIL NIL 0)) (X '(0 0)) (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AG) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 114 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(1 NIL NIL)) (X '(-8 -3 -1)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X '(40)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(ACL2::BBAA ACL2::A)) (X '(0)) (A 0))
 -- ((Y '(-1 0)) (X '(0 0)) (A 0))
 -- ((Y NIL) (X '(0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(1 NIL NIL))
                   (X '(-8 -3 -1))
                   (A NIL))
                  ((Y '(0 0)) (X NIL) (A 0))
                  ((Y '(0)) (X '(40)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AG) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A NIL))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 65 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(NIL (NIL 0))) (X '(122 6)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL (NIL NIL) NIL NIL)) (X NIL) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL "A" 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(0 0)) (X '(-1 0)) (A 0))
 -- ((Y NIL) (X '(NIL T)) (A NIL))
 -- ((Y '(0)) (X '((-1) ACL2::A 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL (NIL 0)))
                   (X '(122 6))
                   (A NIL))
                  ((Y '(NIL (NIL NIL) NIL NIL))
                   (X NIL)
                   (A NIL))
                  ((Y '(NIL "A" 0)) (X NIL) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AG) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A NIL))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 123 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 5 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(-1 0)) (X '(-2)) (A -1))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(-1 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(5)) (X '(-1 0)) (A 0))
 -- ((Y '(7)) (X '(ACL2::BA ACL2::A ACL2::A)) (A 'ACL2::A))
 -- ((Y NIL) (X '(0 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-1 0)) (X '(-2)) (A -1))
                  ((Y '(-1 0)) (X NIL) (A 0))
                  ((Y '(0)) (X NIL) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (1) 1))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AG) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A NIL))) '(T T T T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 74 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(NIL (NIL) T 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(-1 0)) (X '(ACL2::BBAA)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X '(3)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(0)) (A 0))
 -- ((Y '(6)) (X '("A" NIL NIL)) (A NIL))
 -- ((Y '(-1 0)) (X '(NIL)) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL (NIL) T 0)) (X NIL) (A 0))
                  ((Y '(-1 0)) (X '(ACL2::BBAA)) (A 0))
                  ((Y '(0)) (X '(3)) (A 0))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")
ACL2S !>(suggest-lemma t
	       :required-expressions or (in2 a x) y
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 201 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 6 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(-1 0)) (X NIL) (A 0))
 -- ((Y '(0 0)) (X NIL) (A 0))
 -- ((Y '(46 1 NIL)) (X NIL) (A NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(0 0)) (X '(-1/7 2 NIL)) (A NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(-2)) (X '(0 NIL NIL)) (A NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y NIL) (X '(0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-1 0)) (X NIL) (A 0))
                  ((Y '(0 0)) (X NIL) (A 0))
                  ((Y '(46 1 NIL)) (X NIL) (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X NIL) (ACL2S::A NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 118 examples across 1 subgoals, of which 11 (11 unique) satisfied
the hypotheses, and found 8 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '((ACL2::A . 0) (NIL) ACL2::A NIL)) (X '(ACL2::ABABBA)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(8 0)) (X '(91)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 0)) (X '(ACL2::ABBAABD)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(0)) (A 0))
 -- ((Y NIL) (X '(0 NIL)) (A NIL))
 -- ((Y NIL) (X '((#\A) NIL 0 NIL)) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '((ACL2::A . 0) (NIL) ACL2::A NIL))
                   (X '(ACL2::ABABBA))
                   (A NIL))
                  ((Y '(8 0)) (X '(91)) (A 0))
                  ((Y '(0 0))
                   (X '(ACL2::ABBAABD))
                   (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABABBA) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABBAABD) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X NIL) (ACL2S::A NIL))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 103 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0 0 NIL)) (X '(-1)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X '(15 -1)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(28 3 0 0)) (X '(("A" . 1) T 0 NIL)) (A NIL))
 -- ((Y NIL) (X '(T NIL)) (A NIL))
 -- ((Y '(0)) (X '(98 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0 0 NIL)) (X '(-1)) (A NIL))
                  ((Y '(0)) (X NIL) (A 0))
                  ((Y '(0)) (X '(15 -1)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABABBA) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABBAABD) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X NIL) (ACL2S::A NIL))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 96 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(NIL 0 "A" 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(1/3 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 -1)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(0 0)) (X '(2 1 T)) (A T))
 -- ((Y '(T NIL)) (X '(ACL2::A 0 NIL)) (A 0))
 -- ((Y '(5 4)) (X '(NIL 0 NIL NIL)) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL 0 "A" 0)) (X NIL) (A 0))
                  ((Y '(1/3 0)) (X NIL) (A 0))
                  ((Y '(0 -1)) (X NIL) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABABBA) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABBAABD) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X NIL) (ACL2S::A NIL))) '(T T T T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 198 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 5 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(T NIL)) (X NIL) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 2 T)) (X NIL) (A T))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(3 0)) (X '(ACL2::DCE)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(NIL)) (A NIL))
 -- ((Y '(4 0)) (X '(T 0 NIL)) (A NIL))
 -- ((Y NIL) (X '(0 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(T NIL)) (X NIL) (A NIL))
                  ((Y '(0 2 T)) (X NIL) (A T))
                  ((Y '(3 0)) (X '(ACL2::DCE)) (A 0))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")
ACL2S !>(suggest-lemma t
	       :required-expressions (in2 a x) (in2 a y)
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 198 examples across 1 subgoals, of which 13 (13 unique) satisfied
the hypotheses, and found 3 counterexamples and 10 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0 0)) (X NIL) (A 0))
 -- ((Y '(-1)) (X NIL) (A -1))
 -- ((Y '(((T T) (T T)) NIL 0 NIL)) (X NIL) (A NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(0)) (X '(2 0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(0)) (X '((0) 0 NIL NIL)) (A NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y NIL) (X '(0 0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0 0)) (X NIL) (A 0))
                  ((Y '(-1)) (X NIL) (A -1))
                  ((Y '(((T T) (T T)) NIL 0 NIL))
                   (X NIL)
                   (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (1) 1))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 58 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 4 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0)) (X '(ACL2::CABAD)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL T 0 NIL)) (X '(0)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '((2 . 2) 0 T 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(13)) (X '(13 0)) (A 0))
 -- ((Y NIL) (X '(0)) (A 0))
 -- ((Y '(ACL2::A ACL2::BA)) (X '(NIL)) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0)) (X '(ACL2::CABAD)) (A 0))
                  ((Y '(NIL T 0 NIL)) (X '(0)) (A NIL))
                  ((Y '((2 . 2) 0 T 0)) (X NIL) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL CABAD) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (1) 1))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A NIL))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 182 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 5 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(NIL)) (X NIL) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL "A" 0 NIL)) (X '(ACL2::KK ACL2::A)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(#C(1 1/2) 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(#\F #\F #\D #\D #\B)) (X '(0)) (A 0))
 -- ((Y '(-24)) (X '(((NIL NIL) (NIL 0)) 0 0 NIL)) (A NIL))
 -- ((Y '(12 0 0)) (X '(0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL)) (X NIL) (A NIL))
                  ((Y '(NIL "A" 0 NIL))
                   (X '(ACL2::KK ACL2::A))
                   (A 0))
                  ((Y '(#C(1 1/2) 0)) (X NIL) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL KK) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL CABAD) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (1) 1))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A NIL))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 91 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 4 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0)) (X '(13/12)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(ACL2::A ACL2::ABA ACL2::A)) (X NIL) (A 'ACL2::A))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X '(ACL2::CBDBD)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(0)) (X '(0)) (A 0))
 -- ((Y NIL) (X '(0)) (A 0))
 -- ((Y '(ACL2::CBEA ACL2::ABAAB)) (X '(10 0 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0)) (X '(13/12)) (A 0))
                  ((Y '(ACL2::A ACL2::ABA ACL2::A))
                   (X NIL)
                   (A 'ACL2::A))
                  ((Y '(0)) (X '(ACL2::CBDBD)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL CBDBD) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL KK) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL CABAD) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (1) 1))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)) NIL)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A NIL))) '(T T T T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 164 examples across 1 subgoals, of which 10 (10 unique) satisfied
the hypotheses, and found 3 counterexamples and 7 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL (NIL NIL) 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '("A" 0)) (X NIL) (A "A"))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(-1 0)) (A 0))
 -- ((Y NIL) (X '(0 0)) (A 0))
 -- ((Y NIL) (X '((2 . 0) NIL NIL 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0)) (X NIL) (A 0))
                  ((Y '(NIL (NIL NIL) 0)) (X NIL) (A 0))
                  ((Y '("A" 0)) (X NIL) (A "A"))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")
ACL2S !>(suggest-lemma t
	       :required-expressions or (in2 a x) (in2 a y)
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 242 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(NIL ACL2::A NIL NIL)) (X '(-27)) (A 'ACL2::A))
 -- ((Y '(0)) (X '(NIL)) (A 0))
 -- ((Y '(0)) (X NIL) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(5 0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y NIL) (X '("A" "A")) (A "A"))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y NIL) (X '(0 0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL ACL2::A NIL NIL))
                   (X '(-27))
                   (A 'ACL2::A))
                  ((Y '(0)) (X '(NIL)) (A 0))
                  ((Y '(0)) (X NIL) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 65 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(#C(1/2 1) #C(2 1) 0)) (X '((NIL . 0) NIL T NIL NIL)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '((T) T 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL (NIL 0) 0 NIL)) (X '(388)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(#\B #\C #\D #\B #\A #\C)) (A #\B))
 -- ((Y '(ACL2::DD)) (X '(0 NIL)) (A NIL))
 -- ((Y '(-1)) (X '(0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(#C(1/2 1) #C(2 1) 0))
                   (X '((NIL . 0) NIL T NIL NIL))
                   (A 0))
                  ((Y '((T) T 0)) (X NIL) (A 0))
                  ((Y '(NIL (NIL 0) 0 NIL))
                   (X '(388))
                   (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 0 0 0 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 79 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0 0)) (X '(4)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL 0 NIL)) (X NIL) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL T)) (X '(1 1 1)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(NIL #\A 0 0)) (X '(-1 0)) (A 0))
 -- ((Y NIL) (X '(NIL (-1) 0 NIL)) (A NIL))
 -- ((Y NIL) (X '(459 17 1 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0 0)) (X '(4)) (A 0))
                  ((Y '(NIL 0 NIL)) (X NIL) (A NIL))
                  ((Y '(NIL T)) (X '(1 1 1)) (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 0 0 0 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 84 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 4 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '((2 . 1) "A" NIL NIL)) (X NIL) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 0)) (X '(77)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(225)) (X '(ACL2::CA T NIL NIL)) (A NIL))
 -- ((Y '(0)) (X '(0 T NIL)) (A 0))
 -- ((Y '(0)) (X '(1/4 0 NIL)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '((2 . 1) "A" NIL NIL))
                   (X NIL)
                   (A NIL))
                  ((Y '(0 0)) (X NIL) (A 0))
                  ((Y '(0 0)) (X '(77)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 0 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 0 0 0 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-VARSYMBOL A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 109 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 5 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0)) (X '(NIL)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(ACL2::A T)) (X '(7)) (A 'ACL2::A))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(1 T NIL)) (X NIL) (A T))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(45 0)) (X '(3/5 0 T NIL)) (A NIL))
 -- ((Y NIL) (X '(0 NIL NIL)) (A 0))
 -- ((Y '(-1 0)) (X '(-1 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0)) (X '(NIL)) (A 0))
                  ((Y '(ACL2::A T)) (X '(7)) (A 'ACL2::A))
                  ((Y '(1 T NIL)) (X NIL) (A T))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.71 seconds (prove: 0.00, print: 0.00, other: 2.71)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 len2 (x)
     :input-contract (true-listp x)
     :output-contract (natp (len2 x))
     (if (endp x)
	 0
       (+ 1 (len2 (cdr x)))))
(defunc2 in2 (a l)
  :input-contract (true-listp l)
  :output-contract (booleanp (in2 a l))
  (if (endp l)
      nil
    (or (equal a (car l)) (in2 a (cdr l)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LEN2))
             '(CDR X))
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)

(defunc2 app2 (x y)
  :input-contract (and (true-listp x) (true-listp y))
  :output-contract (true-listp (app2 x y))
  (if (endp x)
      y
    (cons (car x) (app2 (cdr x) y))))

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.41 seconds
Form:  ( DEFUN LEN2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LEN2-CONTRACT ...)
Time:  0.14 seconds (prove: 0.09, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.14 seconds (prove: 0.09, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LEN2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.19 seconds

Function Name : LEN2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.89 seconds (prove: 0.16, print: 0.00, other: 0.73)
Prover steps counted:  3008
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CAR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CAR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (EQUAL A (CAR L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CDR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (EQUAL A (CAR L)))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.57 seconds
Form:  ( DEFUN IN2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN2-CONTRACT ...)
Time:  0.19 seconds (prove: 0.13, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.19 seconds (prove: 0.13, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS IN2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.26 seconds

Function Name : IN2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.12 seconds (prove: 0.24, print: 0.00, other: 0.88)
Prover steps counted:  3679
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defgroup list-ops len2 app2 cons car cdr)
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY APP2))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY APP2))
             '(CAR X))
 (TRUE-LISTP Y)
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.68 seconds
Form:  ( DEFUN APP2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM APP2-CONTRACT ...)
Time:  0.24 seconds (prove: 0.18, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.24 seconds (prove: 0.18, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS APP2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.31 seconds

Function Name : APP2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.33 seconds (prove: 0.44, print: 0.00, other: 0.89)
Prover steps counted:  14124
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>ALL-GROUPS
ACL2S !>(suggest-lemma t
	       :required-expressions or (in2 a x); (in2 a y)
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 83 (83 unique)
satisfied the hypotheses, and found 83 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y NIL) (X '(-1 0)) (A 0))
 -- ((Y '(0)) (X '(0)) (A 0))
 -- ((Y NIL) (X '(0 -1)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y NIL) (X '(-1 0)) (A 0))
                  ((Y '(0)) (X '(0)) (A 0))
                  ((Y NIL) (X '(0 -1)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 113 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0)) (X '(ACL2::DCBA)) (A 0))
 -- ((Y '((#\A) 0 NIL NIL)) (X '("BA")) (A 0))
 -- ((Y '(NIL)) (X NIL) (A NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(-1)) (X '(0)) (A 0))
 -- ((Y '(3 0 0)) (X '(49 2 1 0)) (A 0))
 -- ((Y NIL) (X '(0 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0)) (X '(ACL2::DCBA)) (A 0))
                  ((Y '((#\A) 0 NIL NIL))
                   (X '("BA"))
                   (A 0))
                  ((Y '(NIL)) (X NIL) (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DCBA) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\B #\A) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (NOT (IN2 A X)))
         (IN2 A Y))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 85 (85 unique)
satisfied the hypotheses, and found 0 counterexamples and 85 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(NIL 0 0)) (X '(5 0)) (A NIL))
 -- ((Y '(NIL NIL)) (X NIL) (A NIL))
 -- ((Y NIL) (X '(-1)) (A -1))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y))
         (EQUAL T (OR (IN2 A X) (IN2 A Y))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (in2 a x); (in2 a y)
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1113 examples across 3 subgoals, of which 71 (71 unique)
satisfied the hypotheses, and found 3 counterexamples and 68 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (IN2 A (APP2 X Y)) (TRUE-LISTP X)) (NOT (TRUE-LISTP Y)))
 -- ((Y '(-1)) (X '(NIL T)) (A T))
 -- ((Y NIL) (X '(2 0 0)) (A 0))
 -- ((Y '(NIL 0 NIL NIL)) (X NIL) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(2)) (X '(0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y NIL) (X '(0 -1 0)) (A -1))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(-1)) (X '(ACL2::DBB ACL2::A)) (A 'ACL2::A))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-1)) (X '(NIL T)) (A T))
                  ((Y NIL) (X '(2 0 0)) (A 0))
                  ((Y '(NIL 0 NIL NIL)) (X NIL) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::A T)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::X ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 140 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(131 26 0 0)) (X '(ACL2::BBAA)) (A 0))
 -- ((Y '(-2 NIL T)) (X '(-447 -1 -1)) (A NIL))
 -- ((Y '(0)) (X '(-1)) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(13 5 0)) (X '(10/3 0 0)) (A 0))
 -- ((Y NIL) (X '(-3 0 0)) (A 0))
 -- ((Y '(3 0 0)) (X '(-1 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(131 26 0 0))
                   (X '(ACL2::BBAA))
                   (A 0))
                  ((Y '(-2 NIL T))
                   (X '(-447 -1 -1))
                   (A NIL))
                  ((Y '(0)) (X '(-1)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::A T)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 95 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(ACL2::A T NIL)) (X '(12 1)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(((T) T . T) T NIL 0)) (X '(-1 0)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(#\B #\A)) (X NIL) (A #\A))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '((NIL) T NIL NIL)) (X NIL) (A NIL))
 -- ((Y '(3 1)) (X '(0)) (A 0))
 -- ((Y NIL) (X '(0 NIL)) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(ACL2::A T NIL))
                   (X '(12 1))
                   (A NIL))
                  ((Y '(((T) T . T) T NIL 0))
                   (X '(-1 0))
                   (A NIL))
                  ((Y '(#\B #\A)) (X NIL) (A #\A))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS T T)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CHAR #\A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::A T)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 99 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '((2 0) (T NIL) 0 NIL)) (X '(6)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(239 0)) (X '(3 1)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(3)) (X '(0 0)) (A 0))
 -- ((Y '(1)) (X '(NIL NIL NIL)) (A NIL))
 -- ((Y NIL) (X '((0 . 0) ACL2::A NIL 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '((2 0) (T NIL) 0 NIL))
                   (X '(6))
                   (A NIL))
                  ((Y '(0 0)) (X NIL) (A 0))
                  ((Y '(239 0)) (X '(3 1)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS T T)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-CHAR #\A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::A T)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 160 examples across 1 subgoals, of which 10 (10 unique) satisfied
the hypotheses, and found 3 counterexamples and 7 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(NIL (T NIL) 0)) (X '(24)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(1 5 0)) (X '(ACL2::A)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL NIL)) (X '(0 0)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '((0 . -1/2) (NIL 0) NIL NIL NIL)) (X NIL) (A NIL))
 -- ((Y NIL) (X '(0)) (A 0))
 -- ((Y '(0)) (X '(-1 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL (T NIL) 0)) (X '(24)) (A 0))
                  ((Y '(1 5 0)) (X '(ACL2::A)) (A 0))
                  ((Y '(NIL NIL)) (X '(0 0)) (A NIL))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions or (in2 a x); (in2 a y)
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 115 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0)) (X NIL) (A 0))
 -- ((Y '(17 0)) (X NIL) (A 0))
 -- ((Y '(0 0)) (X NIL) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(-1 0)) (X '(-1 0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y NIL) (X '(271 -14 -1)) (A -1))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '((0) T NIL)) (X '(NIL NIL NIL NIL)) (A NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0)) (X NIL) (A 0))
                  ((Y '(17 0)) (X NIL) (A 0))
                  ((Y '(0 0)) (X NIL) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 87 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(3 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 1 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(0)) (A 0))
 -- ((Y NIL) (X '(-152 -2 T)) (A T))
 -- ((Y NIL) (X '((T . 1) "A" 0 NIL)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(3 0)) (X NIL) (A 0))
                  ((Y '(0 1 0)) (X NIL) (A 0))
                  ((Y '(0 0)) (X NIL) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 126 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 3 counterexamples and 5 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '((ACL2::A . 2) #\A 0 NIL)) (X '(109 11)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X '(433)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(T)) (X NIL) (A T))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(T NIL)) (X NIL) (A NIL))
 -- ((Y '(-1 0)) (X '(NIL NIL)) (A NIL))
 -- ((Y NIL) (X '(0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '((ACL2::A . 2) #\A 0 NIL))
                   (X '(109 11))
                   (A NIL))
                  ((Y '(0)) (X '(433)) (A 0))
                  ((Y '(T)) (X NIL) (A T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 0 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::X NIL) (ACL2S::A T)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 130 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 3 counterexamples and 5 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(NIL NIL)) (X '(0)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 0)) (X '(ACL2::FDD ACL2::BA)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(ACL2::BABAAA ACL2::A)) (A 'ACL2::A))
 -- ((Y NIL) (X '(1 0 0)) (A 0))
 -- ((Y '(((NIL) NIL) #\A 0 NIL NIL)) (X NIL) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL NIL)) (X '(0)) (A NIL))
                  ((Y '(0)) (X NIL) (A 0))
                  ((Y '(0 0))
                   (X '(ACL2::FDD ACL2::BA))
                   (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL FDD) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 0 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::X NIL) (ACL2S::A T)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 237 examples across 1 subgoals, of which 12 (12 unique) satisfied
the hypotheses, and found 3 counterexamples and 9 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(2 0 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0 0)) (X '(537 14)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(#\A #\A #\C #\B)) (X '(T)) (A #\A))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(1 1)) (X '(NIL (NIL NIL) 0 0)) (A NIL))
 -- ((Y NIL) (X '(0)) (A 0))
 -- ((Y '(NIL)) (X NIL) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(2 0 0)) (X NIL) (A 0))
                  ((Y '(0 0)) (X '(537 14)) (A 0))
                  ((Y '(#\A #\A #\C #\B))
                   (X '(T))
                   (A #\A))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")
ACL2S !>(suggest-lemma t
	       :required-expressions or (in2 a x)
	       :with or in2 app2
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 377 examples across 1 subgoals, of which 20 (20 unique) satisfied
the hypotheses, and found 3 counterexamples and 17 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- 
((Y '((T) NIL NIL NIL NIL)) (X '(ACL2::BABAAA ACL2::BA ACL2::A)) (A NIL))
 -- ((Y '(4 0)) (X NIL) (A 0))
 -- ((Y '(T)) (X NIL) (A T))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(-1 0)) (A -1))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y '(56 13)) (X '(7 1 0)) (A 0))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((Y NIL) (X '(NIL (0) T)) (A NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '((T) NIL NIL NIL NIL))
                   (X '(ACL2::BABAAA ACL2::BA ACL2::A))
                   (A NIL))
                  ((Y '(4 0)) (X NIL) (A 0))
                  ((Y '(T)) (X NIL) (A T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::X NIL) (ACL2S::A T))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 151 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0)) (X '(37)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(45 -1/2 T)) (X '(NIL)) (A T))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(NIL 0 "A" NIL)) (X '(0)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y NIL) (X '(0 NIL)) (A NIL))
 -- ((Y '(4 14 0)) (X '(NIL NIL T)) (A NIL))
 -- ((Y '(29 1)) (X '(NIL NIL NIL)) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0)) (X '(37)) (A 0))
                  ((Y '(45 -1/2 T)) (X '(NIL)) (A T))
                  ((Y '(NIL 0 "A" NIL))
                   (X '(0))
                   (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::A T)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::X NIL) (ACL2S::A T))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 112 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 3 counterexamples and 4 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(-1)) (X '(0)) (A -1))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(5 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '((0) "A")) (X '(483)) (A "A"))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(0 -1/2 NIL NIL)) (X '(NIL NIL NIL)) (A NIL))
 -- ((Y NIL) (X '(0)) (A 0))
 -- ((Y '(28 5)) (X '(ACL2::HC ACL2::A)) (A 'ACL2::A))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(-1)) (X '(0)) (A -1))
                  ((Y '(5 0)) (X NIL) (A 0))
                  ((Y '((0) "A")) (X '(483)) (A "A"))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (1) 1))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 1 1 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-STRING #\A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::A T)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::X NIL) (ACL2S::A T))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 156 examples across 1 subgoals, of which 10 (10 unique) satisfied
the hypotheses, and found 3 counterexamples and 7 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(NIL T 0 NIL)) (X '(ACL2::BFD ACL2::BABAAA)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(0)) (X '("A" T)) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '((NIL NIL) NIL NIL NIL)) (X '(0)) (A 0))
 -- ((Y '(0 0)) (X '(((T NIL) (T 1)) (ACL2::A) ACL2::A NIL)) (A NIL))
 -- ((Y '(NIL)) (X NIL) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL T 0 NIL))
                   (X '(ACL2::BFD ACL2::BABAAA))
                   (A NIL))
                  ((Y '(0)) (X NIL) (A 0))
                  ((Y '(0)) (X '("A" T)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BFD) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) NIL))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (1) 1))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 1 1 1 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-STRING #\A))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 0 1) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::A T)) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS T NIL) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)))) (ACL2S::A NIL)) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::X NIL) (ACL2S::A T))) '(T T T T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 77 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 3 counterexamples and 4 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(NIL)) (X '(0)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(#\B ACL2::A 0 NIL)) (X '(22)) (A NIL))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((Y '(17 5 0)) (X NIL) (A 0))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(#\A)) (X '(0 1)) (A 0))
 -- ((Y NIL) (X '(-1 0)) (A 0))
 -- ((Y '("BABBBB")) (X '(0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(NIL)) (X '(0)) (A NIL))
                  ((Y '(#\B ACL2::A 0 NIL))
                   (X '(22))
                   (A NIL))
                  ((Y '(17 5 0)) (X NIL) (A 0))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.75 seconds (prove: 0.00, print: 0.00, other: 2.75)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 len2 (x)
     :input-contract (true-listp x)
     :output-contract (natp (len2 x))
     (if (endp x)
	 0
       (+ 1 (len2 (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LEN2))
             '(CDR X))
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
(defunc2 in2 (a l)
  :input-contract (true-listp l)
  :output-contract (booleanp (in2 a l))
  (if (endp l)
      nil
    (or (equal a (car l)) (in2 a (cdr l)))))
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.42 seconds
Form:  ( DEFUN LEN2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LEN2-CONTRACT ...)
Time:  0.14 seconds (prove: 0.09, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.14 seconds (prove: 0.09, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LEN2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : LEN2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.89 seconds (prove: 0.16, print: 0.00, other: 0.73)
Prover steps counted:  3008
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CAR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CAR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (EQUAL A (CAR L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN2))
             '(CDR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (EQUAL A (CAR L)))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.57 seconds
Form:  ( DEFUN IN2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN2-CONTRACT ...)
Time:  0.17 seconds (prove: 0.11, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.17 seconds (prove: 0.11, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS IN2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.24 seconds

Function Name : IN2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.10 seconds (prove: 0.22, print: 0.00, other: 0.87)
Prover steps counted:  3679
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 app2 (x y)
  :input-contract (and (true-listp x) (true-listp y))
  :output-contract (true-listp (app2 x y))
  (if (endp x)
      y
    (cons (car x) (app2 (cdr x) y))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY APP2))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY APP2))
             '(CAR X))
 (TRUE-LISTP Y)
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.60 seconds
Form:  ( DEFUN APP2 ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM APP2-CONTRACT ...)
Time:  0.18 seconds (prove: 0.12, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.18 seconds (prove: 0.12, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS APP2 ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.25 seconds

Function Name : APP2 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.14 seconds (prove: 0.36, print: 0.00, other: 0.78)
Prover steps counted:  14124
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defgroup list-ops len2 app2 cons car cdr)
ALL-GROUPS
ACL2S !>(suggest-lemma t
	       :required-expressions or (in2 a x)
	       :with list-ops
	       :hyps (in2 a (app2 x y)) (true-listp x) (true-listp y))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 83 (83 unique)
satisfied the hypotheses, and found 83 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y NIL) (X '(-1 0)) (A 0))
 -- ((Y '(0)) (X '(0)) (A 0))
 -- ((Y NIL) (X '(0 -1)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y NIL) (X '(-1 0)) (A 0))
                  ((Y '(0)) (X '(0)) (A 0))
                  ((Y NIL) (X '(0 -1)) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) ACL2S::Y))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 113 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((Y '(0)) (X '(ACL2::DCBA)) (A 0))
 -- ((Y '((#\A) 0 NIL NIL)) (X '("BA")) (A 0))
 -- ((Y '(NIL)) (X NIL) (A NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(-1)) (X '(0)) (A 0))
 -- ((Y '(3 0 0)) (X '(49 2 1 0)) (A 0))
 -- ((Y NIL) (X '(0 0)) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((Y '(0)) (X '(ACL2::DCBA)) (A 0))
                  ((Y '((#\A) 0 NIL NIL))
                   (X '("BA"))
                   (A 0))
                  ((Y '(NIL)) (X NIL) (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(OR (ACL2S::IN2 ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DCBA) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\B #\A) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS NIL NIL)) (ACL2S::X NIL) (ACL2S::A NIL)) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::IN2 ACL2S::A (ACL2S::APP2 ACL2S::X ACL2S::Y)) (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y)) (EQUAL T (OR (ACL2S::IN2 ACL2S::A ACL2S::X) (ACL2S::IN2 ACL2S::A ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (NOT (IN2 A X)))
         (IN2 A Y))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 85 (85 unique)
satisfied the hypotheses, and found 0 counterexamples and 85 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((Y '(NIL 0 0)) (X '(5 0)) (A NIL))
 -- ((Y '(NIL NIL)) (X NIL) (A NIL))
 -- ((Y NIL) (X '(-1)) (A -1))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (thm (IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y))
         (EQUAL T (OR (IN2 A X) (IN2 A Y)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6FE>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6FE>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y))
         (EQUAL T (OR (IN2 A X) (IN2 A Y)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint:

Goal'
(IMPLIES (AND (IN2 A (APP2 X Y))
              (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (NOT (IN2 A X)))
         (IN2 A Y))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Five induction schemes are suggested
by this conjecture.  These merge into two derived induction schemes.
However, one of these is flawed and so we are left with one viable
candidate.  

We will induct according to a scheme suggested by (IN2 A X), but modified
to accommodate (TRUE-LISTP X) and (APP2 X Y).  These suggestions were
produced using the :induction rules APP2-INDUCTION-SCHEME, 
APP2-INDUCTION-SCHEME-FROM-DEFINITION, IN2-INDUCTION-SCHEME, 
IN2-INDUCTION-SCHEME-FROM-DEFINITION and TRUE-LISTP.  If we let (:P A X Y)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (TRUE-LISTP X))
              (:P A X Y))
     (IMPLIES (AND (TRUE-LISTP X)
                   (NOT (ENDP X))
                   (NOT (EQUAL A (CAR X)))
                   (:P A (CDR X) Y))
              (:P A X Y))
     (IMPLIES (AND (TRUE-LISTP X)
                   (NOT (ENDP X))
                   (EQUAL A (CAR X)))
              (:P A X Y))
     (IMPLIES (AND (TRUE-LISTP X) (ENDP X))
              (:P A X Y))).
This induction is justified by the same argument used to admit IN2.
When applied to the goal at hand the above induction scheme produces
five nontautological subgoals.
Subgoal *1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal' is COMPLETED!

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:DEFINITION APP2-DEFINITION-RULE)
        (:DEFINITION ENDP)
        (:DEFINITION IN2-DEFINITION-RULE)
        (:DEFINITION NOT)
        (:DEFINITION TRUE-LISTP)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION APP2-INDUCTION-SCHEME)
        (:INDUCTION APP2-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION IN2-INDUCTION-SCHEME)
        (:INDUCTION IN2-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION TRUE-LISTP)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE ACL2::TRUE-LISTP-WHEN-ATOM)
        (:TYPE-PRESCRIPTION APP2-CONTRACT)
        (:TYPE-PRESCRIPTION IN2-CONTRACT))
Warnings:  Invariant-risk
Time:  0.53 seconds (prove: 0.37, print: 0.00, other: 0.16)
Prover steps counted:  14762

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 55 (55 unique)
satisfied the hypotheses, and found 0 counterexamples and 55 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((Y '(2)) (X '(0)) (A 0))
 -- ((Y NIL) (X '(0 -1 0)) (A -1))
 -- ((Y '(-1)) (X '(ACL2::DBB ACL2::A)) (A 'ACL2::A))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ cp ~/Desktop/ACL2s-practice/hw6.lisp ~/lemmas/acl2s-raw/homework6.lisp
bash-3.2$ (defttag t)
bash: defttag: command not found
bash-3.2$ (include-book "top" :uncertified-okp t)
bash: include-book: command not found
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.77 seconds (prove: 0.00, print: 0.00, other: 2.77)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defthm rest-force-thm
  (implies (acl2::force (consp x))
           (equal (rest x)
                  (acl2::rest x))))


ACL2 Error in ( DEFTHM REST-FORCE-THM ...):  A :REWRITE rule generated
from REST-FORCE-THM is illegal because it rewrites the term (CDR X)
to itself!  This can happen even when you submit a rule whose left
and right sides appear to be different, in the case that those two
sides represent the same term (for example, after macroexpansion).
For general information about rewrite rules in ACL2, see :DOC rewrite.
You may wish to consider submitting a DEFTHM event ending with :RULE-
CLASSES NIL.


Summary
Form:  ( DEFTHM REST-FORCE-THM ...)
Rules: NIL
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)

ACL2 Error in ( DEFTHM REST-FORCE-THM ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(defthm first-force-thm
  (implies (acl2::force (consp x))
           (equal (first x)
                  (acl2::first x))))


ACL2 Error in ( DEFTHM FIRST-FORCE-THM ...):  A :REWRITE rule generated
from FIRST-FORCE-THM is illegal because it rewrites the term (CAR X)
to itself!  This can happen even when you submit a rule whose left
and right sides appear to be different, in the case that those two
sides represent the same term (for example, after macroexpansion).
For general information about rewrite rules in ACL2, see :DOC rewrite.
You may wish to consider submitting a DEFTHM event ending with :RULE-
CLASSES NIL.


Summary
Form:  ( DEFTHM FIRST-FORCE-THM ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)

ACL2 Error in ( DEFTHM FIRST-FORCE-THM ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(defunc2 nand (a b)
  :input-contract (and (booleanp a) (booleanp b))
  :output-contract (booleanp (nand a b))
  (not (and a b)))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.14 seconds
Form:  ( DEFUN NAND ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM NAND-CONTRACT ...)
Time:  0.09 seconds (prove: 0.01, print: 0.00, other: 0.08)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.01, print: 0.00, other: 0.08)
Form:  ( VERIFY-GUARDS NAND ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.14 seconds

Function Name : NAND 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.56 seconds (prove: 0.03, print: 0.00, other: 0.52)
Prover steps counted:  63
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(sugest-lemma (and a b)
	      :with nand
	      :hyps (booleanp a) (booleanp b))


ACL2 Error in TOP-LEVEL:  The symbol SUGEST-LEMMA (in package "ACL2S")
has neither a function nor macro definition in ACL2.  Please define
it.  See :DOC near-misses.  Note:  this error occurred in the context
(SUGEST-LEMMA (AND A B) :WITH NAND :HYPS (BOOLEANP A) (BOOLEANP B)).

ACL2S !>(suggest-lemma (and a b)
	      :with nand
	      :hyps (booleanp a) (booleanp b))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IF A B 'NIL) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 398 (398 unique)
satisfied the hypotheses, and found 398 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B T) (A NIL))
 -- ((B NIL) (A NIL))
 -- ((B T) (A T))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B T) (A NIL))
                  ((B NIL) (A NIL))
                  ((B T) (A T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::B T) (ACL2S::A NIL)) ((ACL2S::B NIL) (ACL2S::A NIL)) ((ACL2S::B T) (ACL2S::A T))) '(NIL NIL T)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::A) (BOOLEANP ACL2S::B)) (EQUAL (AND ACL2S::A ACL2S::B) ACL2S::A)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 3 counterexamples and 6 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B NIL) (A T))
 [found in : "Goal"]
(IMPLIES (AND (BOOLEANP A) (BOOLEANP B)) (EQUAL A (AND A B)))
 -- ((B NIL) (A T))
 [found in : "Goal''"]
(IMPLIES (BOOLEANP A) (NOT A))
 -- ((B NIL) (A T))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B T) (A T))
 -- ((B T) (A NIL))
 -- ((B NIL) (A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B NIL) (A T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::B NIL) (ACL2S::A T)) ((ACL2S::B T) (ACL2S::A NIL)) ((ACL2S::B NIL) (ACL2S::A NIL)) ((ACL2S::B T) (ACL2S::A T))) '(NIL NIL NIL T)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::A) (BOOLEANP ACL2S::B)) (EQUAL (AND ACL2S::A ACL2S::B) (ACL2S::NAND (ACL2S::NAND ACL2S::B ACL2S::A) (ACL2S::NAND ACL2S::B ACL2S::A)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 238 (238 unique)
satisfied the hypotheses, and found 0 counterexamples and 238 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B NIL) (A NIL))
 -- ((B NIL) (A T))
 -- ((B T) (A NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (BOOLEANP A) (BOOLEANP B))
         (EQUAL (AND A B)
                (NAND (NAND B A) (NAND B A))))(thm
 (IMPLIES (AND (BOOLEANP A) (BOOLEANP B))
         (EQUAL (AND A B)
                (NAND (NAND B A) (NAND B A)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6FE>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6FE>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm
 (IMPLIES (AND (BOOLEANP A) (BOOLEANP B))
         (EQUAL (AND A B)
                (NAND (NAND B A) (NAND B A)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:DEFINITION IFF)
        (:DEFINITION NAND-DEFINITION-RULE)
        (:REWRITE ACL2::EQUAL-OF-BOOLEANS-REWRITE))
Warnings:  Invariant-risk
Time:  0.04 seconds (prove: 0.02, print: 0.00, other: 0.03)
Prover steps counted:  103

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 128 (128 unique)
satisfied the hypotheses, and found 0 counterexamples and 128 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((B NIL) (A T))
 -- ((B T) (A T))
 -- ((B T) (A NIL))

Proof succeeded.
ACL2S !>(suggest-lemma (or a b)
	      :with nand
	      :hyps (booleanp a) (booleanp b))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM IF A A B) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1005 examples across 3 subgoals, of which 262 (262 unique)
satisfied the hypotheses, and found 3 counterexamples and 259 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (BOOLEANP A) (NOT (BOOLEANP B)))
 -- ((B NIL) (A T))
 -- ((B T) (A NIL))
 -- ((B NIL) (A NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B NIL) (A NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((B NIL) (A T))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((B T) (A T))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B NIL) (A T))
                  ((B T) (A NIL))
                  ((B NIL) (A NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::B NIL) (ACL2S::A T)) ((ACL2S::B T) (ACL2S::A NIL)) ((ACL2S::B NIL) (ACL2S::A NIL))) '(T T NIL)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::A) (BOOLEANP ACL2S::B)) (EQUAL (OR ACL2S::A ACL2S::B) (ACL2S::NAND (ACL2S::NAND ACL2S::B ACL2S::B) (ACL2S::NAND ACL2S::A ACL2S::A)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 284 (284 unique)
satisfied the hypotheses, and found 0 counterexamples and 284 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B NIL) (A NIL))
 -- ((B T) (A NIL))
 -- ((B NIL) (A T))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (BOOLEANP A) (BOOLEANP B))
         (EQUAL (OR A B)
                (NAND (NAND B B) (NAND A A)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:DEFINITION IFF)
        (:DEFINITION NAND-DEFINITION-RULE)
        (:REWRITE ACL2::EQUAL-OF-BOOLEANS-REWRITE))
Warnings:  Invariant-risk
Time:  0.05 seconds (prove: 0.02, print: 0.00, other: 0.03)
Prover steps counted:  102

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 119 (119 unique)
satisfied the hypotheses, and found 0 counterexamples and 119 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((B NIL) (A NIL))
 -- ((B T) (A T))
 -- ((B NIL) (A T))

Proof succeeded.
ACL2S !>(suggest-lemma (not a)
	      :with nand
	      :hyps (booleanp a))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM NOT A) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 6 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A NIL))
 -- ((A T))
 [found in : "Goal"]
(IMPLIES (BOOLEANP A) NIL)
 -- ((A NIL))
 -- ((A T))
 [found in : "Goal'"]
(NOT (BOOLEANP A))
 -- ((A T))
 -- ((A NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A NIL)) ((A T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::A NIL)) ((ACL2S::A T))) '(T NIL)) 
"form tested" 
(IMPLIES (AND (BOOLEANP ACL2S::A)) (EQUAL (NOT ACL2S::A) (ACL2S::NAND ACL2S::A ACL2S::A))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 4 (4 unique) satisfied
the hypotheses, and found 0 counterexamples and 4 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A NIL))
 -- ((A T))
 [found in : "Goal"]
 -- ((A NIL))
 -- ((A T))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (thm (IMPLIES (BOOLEANP A)
         (EQUAL (NOT A) (NAND A A))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6FE>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6FE>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (BOOLEANP A)
         (EQUAL (NOT A) (NAND A A))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:DEFINITION NAND-DEFINITION-RULE)
        (:DEFINITION NOT)
        (:FAKE-RUNE-FOR-TYPE-SET NIL))
Warnings:  Invariant-risk
Time:  0.04 seconds (prove: 0.02, print: 0.00, other: 0.02)
Prover steps counted:  47

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 2 (2 unique) satisfied
the hypotheses, and found 0 counterexamples and 2 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((A T))
 -- ((A NIL))

Proof succeeded.
ACL2S !>(defdata var acl2s::var)
 Predicate events...
Form:  ( DEFTHM VARP-TESTTHM ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: VARP relatively complete for Tau.
Form:  ( DEFTHM DEF=>VAR ...)
Form:  ( DEFTHM VAR=>DEF ...)
 Enumerator events...


ACL2 Error in ( DEFUN NTH-VAR-BUILTIN ...):  The name NTH-VAR-BUILTIN
is in use as a function.  Note that the proposed argument list for
NTH-VAR-BUILTIN, (DEFDATA::I1), differs from the existing argument
list, (N).
The redefinition feature is currently off.  See :DOC ld-redefinition-
action.


Note: NTH-VAR-BUILTIN was previously defined in the last of the following
books.

   [Included books, outermost to innermost:
    "/Users/benboskin/acl2/books/acl2s/base-theory.lisp"
    "/Users/benboskin/acl2/books/acl2s/defdata/top.lisp"
    "/Users/benboskin/acl2/books/acl2s/defdata/base.lisp"
    "/Users/benboskin/acl2/books/acl2s/defdata/var-book.lisp"
   ]
Form:  ( DEFUN NTH-VAR-BUILTIN ...)

ACL2 Error in ( DEFUN NTH-VAR-BUILTIN ...):  See :DOC failure.

******** FAILED ********
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)
ACL2S !>(thm (implies (varp x)
              (symbolp x)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER VAR-SYMBOLP))
Warnings:  Invariant-risk
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 500 (500 unique)
satisfied the hypotheses, and found 0 counterexamples and 500 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X 'ACL2::LXNNX))
 -- ((X 'ACL2::RXDE))
 -- ((X 'ACL2::NZ))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (varp x)
              (not (booleanp x))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:DEFINITION NOT)
        (:EXECUTABLE-COUNTERPART TAU-SYSTEM))
Warnings:  Invariant-risk
Time:  0.06 seconds (prove: 0.01, print: 0.00, other: 0.05)
Prover steps counted:  15

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (booleanp x)
              (not (varp x))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:DEFINITION NOT)
        (:EXECUTABLE-COUNTERPART TAU-SYSTEM))
Warnings:  Invariant-risk
Time:  0.06 seconds (prove: 0.01, print: 0.00, other: 0.05)
Prover steps counted:  15

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 2 (2 unique) satisfied
the hypotheses, and found 0 counterexamples and 2 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X T))
 -- ((X NIL))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-subtype var symbol)
 :REDUNDANT
ACL2S !>(defdata-disjoint var boolean)
Submitting 
(DEFTHM DEFDATA::VAR-IS-DISJOINT-WITH-BOOLEAN
        (IMPLIES (VARP DEFDATA::X)
                 (NOT (BOOLEANP DEFDATA::X)))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (varp x)
              (not (listp x))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:DEFINITION NOT)
        (:EXECUTABLE-COUNTERPART TAU-SYSTEM))
Warnings:  Invariant-risk
Time:  0.06 seconds (prove: 0.01, print: 0.00, other: 0.04)
Prover steps counted:  15

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata bex
  (oneof boolean
         var
         (list 'not bex)
         (list 'and bex bex)
         (list 'or  bex bex)))
 Predicate events...
Form:  ( DEFUN BEXP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BEXP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BEXP DEFDATA::V1) => body -- not complete. 
Reasons: 
("Unable to characterize (using tau rules) a non-disjoint union type")

Form:  ( DEFTHM DEF=>BEX ...)
 Enumerator events...
Form:  ( DEFUN NTH-BEX-BUILTIN ...)
Form:  ( DEFUN NTH-BEX/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.99 seconds (prove: 0.83, print: 0.00, other: 0.17)
 Registering type...
Form:  ( DEFUN NTH-BEX ...)
Form:  ( ENCAPSULATE (((NTH-BEX * ...) ...) ...) ...)
Form:  ( DEFUN NTH-BEX/ACC ...)
Form:  ( ENCAPSULATE (((NTH-BEX/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-BEX NTH-BEX-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-BEX/ACC NTH-BEX/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.03 seconds (prove: 0.83, print: 0.00, other: 0.20)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata bex-not (list 'not bex))
 Predicate events...
Form:  ( DEFUN BEX-NOTP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BEX-NOTP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BEX-NOTP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM BEX-NOT=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-BEX-NOT-BUILTIN ...)
Form:  ( DEFUN NTH-BEX-NOT/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.08 seconds (prove: 0.01, print: 0.00, other: 0.07)
 Registering type...
Form:  ( DEFUN NTH-BEX-NOT ...)
Form:  ( ENCAPSULATE (((NTH-BEX-NOT * ...) ...) ...) ...)
Form:  ( DEFUN NTH-BEX-NOT/ACC ...)
Form:  ( ENCAPSULATE (((NTH-BEX-NOT/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-BEX-NOT NTH-BEX-NOT-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-BEX-NOT/ACC NTH-BEX-NOT/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.12 seconds (prove: 0.01, print: 0.00, other: 0.11)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata bex-and (list 'and bex bex))
 Predicate events...
Form:  ( DEFUN BEX-ANDP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BEX-ANDP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BEX-ANDP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM BEX-AND=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-BEX-AND-BUILTIN ...)
Form:  ( DEFUN NTH-BEX-AND/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.09 seconds (prove: 0.01, print: 0.00, other: 0.08)
 Registering type...
Form:  ( DEFUN NTH-BEX-AND ...)
Form:  ( ENCAPSULATE (((NTH-BEX-AND * ...) ...) ...) ...)
Form:  ( DEFUN NTH-BEX-AND/ACC ...)
Form:  ( ENCAPSULATE (((NTH-BEX-AND/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-BEX-AND NTH-BEX-AND-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-BEX-AND/ACC NTH-BEX-AND/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.13 seconds (prove: 0.01, print: 0.00, other: 0.12)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata bex-or (list 'or bex bex))
 Predicate events...
Form:  ( DEFUN BEX-ORP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BEX-ORP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BEX-ORP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM BEX-OR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-BEX-OR-BUILTIN ...)
Form:  ( DEFUN NTH-BEX-OR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.09 seconds (prove: 0.01, print: 0.00, other: 0.08)
 Registering type...
Form:  ( DEFUN NTH-BEX-OR ...)
Form:  ( ENCAPSULATE (((NTH-BEX-OR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-BEX-OR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-BEX-OR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-BEX-OR NTH-BEX-OR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-BEX-OR/ACC NTH-BEX-OR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.13 seconds (prove: 0.01, print: 0.00, other: 0.12)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (bex-notp e)
              (bexp e)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER VAR-SYMBOLP)
        (:DEFINITION BEX-NOTP)
        (:DEFINITION BEXP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:TYPE-PRESCRIPTION BEXP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.04, print: 0.00, other: 0.05)
Prover steps counted:  612

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 330 (330 unique)
satisfied the hypotheses, and found 0 counterexamples and 330 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((E '(NOT ACL2::XXN)))
 -- ((E '(NOT ACL2::X)))
 -- ((E '(NOT (NOT T))))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-subtype bex-not bex)
Submitting 
(DEFTHM DEFDATA::BEX-NOT-IS-SUBTYPE-OF-BEX
        (IMPLIES (BEX-NOTP DEFDATA::X)
                 (BEXP DEFDATA::X))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 473 (473 unique)
satisfied the hypotheses, and found 0 counterexamples and 473 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X '(NOT ACL2::C)))
 -- ((DEFDATA::X '(NOT ACL2::I)))
 -- ((DEFDATA::X '(NOT ACL2::YX)))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (bex-andp e)
              (bexp e)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER VAR-SYMBOLP)
        (:DEFINITION BEX-ANDP)
        (:DEFINITION BEXP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:TYPE-PRESCRIPTION BEXP))
Warnings:  Invariant-risk
Time:  0.11 seconds (prove: 0.07, print: 0.00, other: 0.05)
Prover steps counted:  1618

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 427 (427 unique)
satisfied the hypotheses, and found 0 counterexamples and 427 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((E '(AND (OR T T) NIL)))
 -- ((E '(AND (OR T T) T)))
 -- ((E '(AND T T)))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-subtype bex-and bex)
Submitting 
(DEFTHM DEFDATA::BEX-AND-IS-SUBTYPE-OF-BEX
        (IMPLIES (BEX-ANDP DEFDATA::X)
                 (BEXP DEFDATA::X))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 400 (400 unique)
satisfied the hypotheses, and found 0 counterexamples and 400 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X '(AND ACL2::X T)))
 -- ((DEFDATA::X '(AND (NOT T) T)))
 -- ((DEFDATA::X '(AND ACL2::X ACL2::X)))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (bex-orp e)
              (bexp e)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER VAR-SYMBOLP)
        (:DEFINITION BEX-ORP)
        (:DEFINITION BEXP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:TYPE-PRESCRIPTION BEXP))
Warnings:  Invariant-risk
Time:  0.12 seconds (prove: 0.07, print: 0.00, other: 0.05)
Prover steps counted:  1623

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 460 (460 unique)
satisfied the hypotheses, and found 0 counterexamples and 460 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((E '(OR (OR ACL2::X T) ACL2::X)))
 -- ((E '(OR ACL2::X T)))
 -- ((E '(OR ACL2::YYY (OR T T))))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-subtype bex-or bex)
Submitting 
(DEFTHM DEFDATA::BEX-OR-IS-SUBTYPE-OF-BEX
        (IMPLIES (BEX-ORP DEFDATA::X)
                 (BEXP DEFDATA::X))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 472 (472 unique)
satisfied the hypotheses, and found 0 counterexamples and 472 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X '(OR (NOT T) NIL)))
 -- ((DEFDATA::X '(OR (AND T ACL2::X) (AND T T))))
 -- ((DEFDATA::X '(OR (NOT T) ACL2::X)))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata lovar (listof var))
 Predicate events...
Form:  ( DEFUN LOVARP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOVARP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LOVARP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOVARP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOVAR ...)
Form:  ( DEFTHM LOVAR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOVAR-BUILTIN ...)
Form:  ( DEFUN NTH-LOVAR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.93 seconds (prove: 0.60, print: 0.00, other: 0.32)
 Registering type...
Form:  ( DEFUN NTH-LOVAR ...)
Form:  ( ENCAPSULATE (((NTH-LOVAR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOVAR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOVAR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOVAR NTH-LOVAR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOVAR/ACC NTH-LOVAR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.97 seconds (prove: 0.60, print: 0.00, other: 0.36)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:u
          17:x(DEFDATA-SUBTYPE BEX-OR BEX)
ACL2S !>:u
          16:x(DEFDATA-SUBTYPE BEX-AND BEX)
ACL2S !>:u
          15:x(DEFDATA-SUBTYPE BEX-NOT BEX)
ACL2S !>:u
          14:x(DEFDATA BEX-OR (LIST # BEX ...))
ACL2S !>:u
          13:x(DEFDATA BEX-AND (LIST # BEX ...))
ACL2S !>:u
          12:x(DEFDATA BEX-NOT (LIST # BEX))
ACL2S !>:u
          11:x(DEFDATA BEX (ONEOF BOOLEAN VAR ...))
ACL2S !>:u
          10:x(DEFDATA-DISJOINT VAR BOOLEAN)
ACL2S !>(defdata2 bex
  (oneof boolean
         var
         (list 'not bex)
         (list 'and bex bex)
         (list 'or  bex bex)))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown symbol BOOLEAN
While executing: COMPILE-DEFDATA
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.82 seconds (prove: 0.00, print: 0.00, other: 2.82)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 nand (a b)
  :input-contract (and (booleanp a) (booleanp b))
  :output-contract (booleanp (nand a b))
  (not (and a b)))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.14 seconds
Form:  ( DEFUN NAND ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NAND-CONTRACT ...)
Time:  0.11 seconds (prove: 0.02, print: 0.00, other: 0.09)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.11 seconds (prove: 0.02, print: 0.00, other: 0.09)
Form:  ( VERIFY-GUARDS NAND ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.17 seconds

Function Name : NAND 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.61 seconds (prove: 0.04, print: 0.00, other: 0.57)
Prover steps counted:  63
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 bex
  (oneof boolean
         var
         (list 'not bex)
         (list 'and bex bex)
         (list 'or  bex bex)))
 Predicate events...
Form:  ( DEFUN BEXP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BEXP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BEXP DEFDATA::V1) => body -- not complete. 
Reasons: 
("Unable to characterize (using tau rules) a non-disjoint union type")

Form:  ( DEFTHM DEF=>BEX ...)
 Enumerator events...
Form:  ( DEFUN NTH-BEX-BUILTIN ...)
Form:  ( DEFUN NTH-BEX/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  1.01 seconds (prove: 0.84, print: 0.00, other: 0.18)
 Registering type...
Form:  ( DEFUN NTH-BEX ...)
Form:  ( ENCAPSULATE (((NTH-BEX * ...) ...) ...) ...)
Form:  ( DEFUN NTH-BEX/ACC ...)
Form:  ( ENCAPSULATE (((NTH-BEX/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-BEX NTH-BEX-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-BEX/ACC NTH-BEX/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.05 seconds (prove: 0.84, print: 0.00, other: 0.21)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.39 seconds (prove: 0.84, print: 0.00, other: 0.55)
Prover steps counted:  31950
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 bex-not (list 'not bex))
 Predicate events...
Form:  ( DEFUN BEX-NOTP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BEX-NOTP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BEX-NOTP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM BEX-NOT=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-BEX-NOT-BUILTIN ...)
Form:  ( DEFUN NTH-BEX-NOT/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.07 seconds (prove: 0.01, print: 0.00, other: 0.06)
 Registering type...
Form:  ( DEFUN NTH-BEX-NOT ...)
Form:  ( ENCAPSULATE (((NTH-BEX-NOT * ...) ...) ...) ...)
Form:  ( DEFUN NTH-BEX-NOT/ACC ...)
Form:  ( ENCAPSULATE (((NTH-BEX-NOT/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-BEX-NOT NTH-BEX-NOT-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-BEX-NOT/ACC NTH-BEX-NOT/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.11 seconds (prove: 0.01, print: 0.00, other: 0.10)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.39 seconds (prove: 0.01, print: 0.00, other: 0.38)
Prover steps counted:  112
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 bex-and (list 'and bex bex))
 Predicate events...
Form:  ( DEFUN BEX-ANDP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BEX-ANDP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BEX-ANDP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM BEX-AND=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-BEX-AND-BUILTIN ...)
Form:  ( DEFUN NTH-BEX-AND/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.08 seconds (prove: 0.01, print: 0.00, other: 0.07)
 Registering type...
Form:  ( DEFUN NTH-BEX-AND ...)
Form:  ( ENCAPSULATE (((NTH-BEX-AND * ...) ...) ...) ...)
Form:  ( DEFUN NTH-BEX-AND/ACC ...)
Form:  ( ENCAPSULATE (((NTH-BEX-AND/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-BEX-AND NTH-BEX-AND-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-BEX-AND/ACC NTH-BEX-AND/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.12 seconds (prove: 0.01, print: 0.00, other: 0.11)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.42 seconds (prove: 0.01, print: 0.00, other: 0.40)
Prover steps counted:  154
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 bex-or (list 'or bex bex))
 Predicate events...
Form:  ( DEFUN BEX-ORP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (BEX-ORP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (BEX-ORP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM BEX-OR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-BEX-OR-BUILTIN ...)
Form:  ( DEFUN NTH-BEX-OR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.08 seconds (prove: 0.01, print: 0.00, other: 0.07)
 Registering type...
Form:  ( DEFUN NTH-BEX-OR ...)
Form:  ( ENCAPSULATE (((NTH-BEX-OR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-BEX-OR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-BEX-OR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-BEX-OR NTH-BEX-OR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-BEX-OR/ACC NTH-BEX-OR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.12 seconds (prove: 0.01, print: 0.00, other: 0.11)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.42 seconds (prove: 0.01, print: 0.00, other: 0.41)
Prover steps counted:  154
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (bex-notp e)
              (bexp e)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER VAR-SYMBOLP)
        (:DEFINITION BEX-NOTP)
        (:DEFINITION BEXP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:TYPE-PRESCRIPTION BEXP))
Warnings:  Invariant-risk
Time:  0.10 seconds (prove: 0.04, print: 0.00, other: 0.06)
Prover steps counted:  612

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 435 (435 unique)
satisfied the hypotheses, and found 0 counterexamples and 435 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((E '(NOT ACL2::XYX)))
 -- ((E '(NOT (AND T T))))
 -- ((E '(NOT (AND ACL2::X T))))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-subtype bex-not bex)
Submitting 
(DEFTHM DEFDATA::BEX-NOT-IS-SUBTYPE-OF-BEX
        (IMPLIES (BEX-NOTP DEFDATA::X)
                 (BEXP DEFDATA::X))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 338 (338 unique)
satisfied the hypotheses, and found 0 counterexamples and 338 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X '(NOT (OR T T))))
 -- ((DEFDATA::X '(NOT (AND T T))))
 -- ((DEFDATA::X '(NOT ACL2::X)))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (bex-andp e)
              (bexp e)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER VAR-SYMBOLP)
        (:DEFINITION BEX-ANDP)
        (:DEFINITION BEXP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:TYPE-PRESCRIPTION BEXP))
Warnings:  Invariant-risk
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Prover steps counted:  1618

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 422 (422 unique)
satisfied the hypotheses, and found 0 counterexamples and 422 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((E '(AND NIL ACL2::X)))
 -- ((E '(AND (AND T T) ACL2::X)))
 -- ((E '(AND T ACL2::X)))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-subtype bex-and bex)
Submitting 
(DEFTHM DEFDATA::BEX-AND-IS-SUBTYPE-OF-BEX
        (IMPLIES (BEX-ANDP DEFDATA::X)
                 (BEXP DEFDATA::X))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 363 (363 unique)
satisfied the hypotheses, and found 0 counterexamples and 363 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X '(AND T T)))
 -- ((DEFDATA::X '(AND (OR T T) ACL2::X)))
 -- ((DEFDATA::X '(AND T ACL2::X)))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (bex-orp e)
              (bexp e)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER VAR-SYMBOLP)
        (:DEFINITION BEX-ORP)
        (:DEFINITION BEXP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:TYPE-PRESCRIPTION BEXP))
Warnings:  Invariant-risk
Time:  0.14 seconds (prove: 0.07, print: 0.00, other: 0.06)
Prover steps counted:  1623

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 447 (447 unique)
satisfied the hypotheses, and found 0 counterexamples and 447 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((E '(OR (NOT T) T)))
 -- ((E '(OR (OR T T) T)))
 -- ((E '(OR (AND T T) ACL2::X)))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-subtype bex-or bex)
Submitting 
(DEFTHM DEFDATA::BEX-OR-IS-SUBTYPE-OF-BEX
        (IMPLIES (BEX-ORP DEFDATA::X)
                 (BEXP DEFDATA::X))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 362 (362 unique)
satisfied the hypotheses, and found 0 counterexamples and 362 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X '(OR T T)))
 -- ((DEFDATA::X '(OR (OR ACL2::X ACL2::X) (NOT T))))
 -- ((DEFDATA::X '(OR T ACL2::X)))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 lovar (listof var))
 Predicate events...
Form:  ( DEFUN LOVARP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOVARP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LOVARP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOVARP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOVAR ...)
Form:  ( DEFTHM LOVAR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOVARP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOVAR-BUILTIN ...)
Form:  ( DEFUN NTH-LOVAR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.94 seconds (prove: 0.61, print: 0.00, other: 0.33)
 Registering type...
Form:  ( DEFUN NTH-LOVAR ...)
Form:  ( ENCAPSULATE (((NTH-LOVAR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOVAR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOVAR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOVAR NTH-LOVAR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOVAR/ACC NTH-LOVAR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.97 seconds (prove: 0.61, print: 0.00, other: 0.37)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.27 seconds (prove: 0.61, print: 0.00, other: 0.66)
Prover steps counted:  5332
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 in (x ls)
  :input-contract (true-listp ls)
  :output-contract (booleanp (in x ls))
  (cond
   ((endp ls) nil)
   ((equal x (car ls)) t)
   (t (in x (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (EQUAL X (CAR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.49 seconds
Form:  ( DEFUN IN ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN-CONTRACT ...)
Time:  0.19 seconds (prove: 0.13, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.19 seconds (prove: 0.13, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS IN ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.25 seconds

Function Name : IN 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.05 seconds (prove: 0.23, print: 0.00, other: 0.82)
Prover steps counted:  3920
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 bex-evaluate (be los)
  :input-contract (and (bexp be) (lovarp los))
  :output-contract (booleanp (bex-evaluate be los))
  (cond ((booleanp be) be)
        ((varp be) (in be los))
        ((bex-notp be)
         (not (bex-evaluate (car (cdr be)) los)))
        ((bex-andp be)
         (and (bex-evaluate (car (cdr be)) los)
              (bex-evaluate (car (cdr (cdr be))) los)))
        (t (or (bex-evaluate (car (cdr be)) los)
               (bex-evaluate (car (cdr (cdr be))) los)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY BEX-EVALUATE))
             '(CDR BE))
 (LOVARP LOS)
 (BEXP BE)
 (NOT (BOOLEANP BE))
 (NOT (VARP BE))
 (BEX-NOTP BE)
 (NOT (CONSP BE)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY BEX-EVALUATE))
             '(CADR BE))
 (LOVARP LOS)
 (BEXP BE)
 (NOT (BOOLEANP BE))
 (NOT (VARP BE))
 (BEX-NOTP BE)
 (NOT (CONSP (CDR BE))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY BEX-EVALUATE))
             '(CDR BE))
 (LOVARP LOS)
 (BEXP BE)
 (NOT (BOOLEANP BE))
 (NOT (VARP BE))
 (NOT (BEX-NOTP BE))
 (BEX-ANDP BE)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY BEX-EVALUATE))
             '(CADR BE))
 (LOVARP LOS)
 (BEXP BE)
 (NOT (BOOLEANP BE))
 (NOT (VARP BE))
 (NOT (BEX-NOTP BE))
 (BEX-ANDP BE)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY BEX-EVALUATE))
             '(CDR BE))
 (LOVARP LOS)
 (BEXP BE)
 (NOT (BOOLEANP BE))
 (NOT (VARP BE))
 (NOT (BEX-NOTP BE))
 (BEX-ANDP BE)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY BEX-EVALUATE))
             '(CDDR BE))
 (LOVARP LOS)
 (BEXP BE)
 (NOT (BOOLEANP BE))
 (NOT (VARP BE))
 (NOT (BEX-NOTP BE))
 (BEX-ANDP BE)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 2.92 seconds
Form:  ( DEFUN BEX-EVALUATE ...)
Time:  16.35 seconds (prove: 16.30, print: 0.00, other: 0.05)
Form:  ( DEFTHM BEX-EVALUATE-CONTRACT ...)
Time:  1.83 seconds (prove: 1.78, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  1.83 seconds (prove: 1.78, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS BEX-EVALUATE ...)
Time:  0.12 seconds (prove: 0.10, print: 0.00, other: 0.01)
Elapsed Run Time: 34.50 seconds

Function Name : BEX-EVALUATE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  37.82 seconds (prove: 35.12, print: 0.00, other: 2.69)
Prover steps counted:  1297147
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (bex-evaluate be los)
	       :with booleanp or nil equal bex-evaluate)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM BEX-EVALUATE BE LOS)
  (((BEXP BE)) ((LOVARP LOS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1445 (1445 unique)
satisfied the hypotheses, and found 1445 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LOS NIL) (BE '(AND ACL2::X T)))
 -- ((LOS '(ACL2::YLXY)) (BE '(NOT ACL2::XXYXX)))
 -- ((LOS '(ACL2::YXYY ACL2::XN)) (BE NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LOS NIL) (BE '(AND ACL2::X T)))
                  ((LOS '(ACL2::YLXY))
                   (BE '(NOT ACL2::XXYXX)))
                  ((LOS '(ACL2::YXYY ACL2::XN))
                   (BE NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS T NIL))))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YLXY) NIL)) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XXYXX) NIL)))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YXYY) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XN) NIL))) (ACL2S::BE NIL))) '(NIL T NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::BEXP ACL2S::BE) (ACL2S::LOVARP ACL2S::LOS)) (EQUAL (ACL2S::BEX-EVALUATE ACL2S::BE ACL2S::LOS) (EQUAL (BOOLEANP ACL2S::LOS) (BOOLEANP ACL2S::BE)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 9 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 6 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LOS '(ACL2::LNXYL)) (BE '(AND T ACL2::X)))
 -- ((LOS NIL) (BE '(OR T T)))
 -- ((LOS '(ACL2::YXYY)) (BE '(AND (NOT T) ACL2::X)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LOS '(ACL2::YXXYX ACL2::YYXX)) (BE '(NOT ACL2::X)))
 -- ((LOS '(ACL2::XXYXX ACL2::YX ACL2::YX)) (BE '(OR (AND T T) ACL2::X)))
 -- ((LOS '(ACL2::X)) (BE '(AND ACL2::X ACL2::X)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LOS '(ACL2::LNXYL))
                   (BE '(AND T ACL2::X)))
                  ((LOS NIL) (BE '(OR T T)))
                  ((LOS '(ACL2::YXYY))
                   (BE '(AND (NOT T) ACL2::X)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL LNXYL) NIL)) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL))))) ((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL OR) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YXYY) NIL)) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS T NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL))))) ((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS T NIL))))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YLXY) NIL)) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XXYXX) NIL)))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YXYY) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XN) NIL))) (ACL2S::BE NIL))) '(NIL T NIL NIL T NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::BEXP ACL2S::BE) (ACL2S::LOVARP ACL2S::LOS)) (EQUAL (ACL2S::BEX-EVALUATE ACL2S::BE ACL2S::LOS) (ACL2S::BEX-EVALUATE ACL2S::BE ACL2S::LOS))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 986 (986 unique)
satisfied the hypotheses, and found 0 counterexamples and 986 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LOS NIL) (BE '(NOT (OR T T))))
 -- ((LOS '(ACL2::NIY)) (BE NIL))
 -- ((LOS NIL) (BE '(AND (AND T T) (AND T T))))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (IMPLIES (AND (BEXP BE) (LOVARP LOS))
         (EQUAL (BEX-EVALUATE BE LOS)
                (BEX-EVALUATE BE LOS)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (bex-evaluate be los)
	       :required-expressions booleanp
	       :with booleanp or t nil equal bex-evaluate)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM BEX-EVALUATE BE LOS)
  (((BEXP BE)) ((LOVARP LOS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 952 (952 unique)
satisfied the hypotheses, and found 3 counterexamples and 949 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (BEXP BE) (NOT (LOVARP LOS)))
 -- ((LOS NIL) (BE '(NOT T)))
 -- ((LOS '(ACL2::XYX)) (BE NIL))
 -- ((LOS '(ACL2::YYLXX)) (BE '(NOT T)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LOS '(ACL2::YX ACL2::X)) (BE '(OR ACL2::YX ACL2::X)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LOS NIL) (BE NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LOS NIL) (BE '(NOT T)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LOS NIL) (BE '(NOT T)))
                  ((LOS '(ACL2::XYX)) (BE NIL))
                  ((LOS '(ACL2::YYLXX)) (BE '(NOT T)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(BOOLEANP) ACL2S::Q '(((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS T NIL)))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XYX) NIL)) (ACL2S::BE NIL)) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYLXX) NIL)) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS T NIL))))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::BEXP ACL2S::BE) (ACL2S::LOVARP ACL2S::LOS)) (EQUAL (ACL2S::BEX-EVALUATE ACL2S::BE ACL2S::LOS) (BOOLEANP (OR ACL2S::BE ACL2S::LOS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 8 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 5 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LOS '(ACL2::NXYXX ACL2::YX)) (BE '(NOT (NOT T))))
 -- ((LOS NIL) (BE NIL))
 -- ((LOS NIL) (BE '(AND T T)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LOS NIL) (BE '(AND ACL2::XXYXX (OR T T))))
 -- ((LOS NIL) (BE 'ACL2::ZX))
 -- ((LOS NIL) (BE 'ACL2::DTFMY))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LOS '(ACL2::NXYXX ACL2::YX))
                   (BE '(NOT (NOT T))))
                  ((LOS NIL) (BE NIL))
                  ((LOS NIL) (BE '(AND T T)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(BOOLEANP) ACL2S::Q '(((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NXYXX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) NIL))) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS T NIL)) NIL)))) ((ACL2S::LOS NIL) (ACL2S::BE NIL)) ((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))))) ((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS T NIL)))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XYX) NIL)) (ACL2S::BE NIL)) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYLXX) NIL)) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS T NIL))))) '(T NIL T NIL NIL NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions booleanp
	       :with bex-evaluate
	       :hyps (varp be) (lovarp los))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1494 (1494 unique)
satisfied the hypotheses, and found 1494 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LOS NIL) (BE 'ACL2::KF))
 -- ((LOS NIL) (BE 'ACL2::YXXYX))
 -- ((LOS '(ACL2::C ACL2::X ACL2::YX)) (BE 'ACL2::YYY))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LOS NIL) (BE 'ACL2::KF))
                  ((LOS NIL) (BE 'ACL2::YXXYX))
                  ((LOS '(ACL2::C ACL2::X ACL2::YX))
                   (BE 'ACL2::YYY))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(BOOLEANP) ACL2S::Q '(((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL KF))) ((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL YXXYX))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL C) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) NIL)))) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL YYY)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::VARP ACL2S::BE) (ACL2S::LOVARP ACL2S::LOS)) (EQUAL T (BOOLEANP (BOOLEANP ACL2S::LOS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 1000 (1000 unique)
satisfied the hypotheses, and found 0 counterexamples and 1000 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LOS '(ACL2::NYL ACL2::YX ACL2::X)) (BE 'ACL2::US))
 -- ((LOS NIL) (BE 'ACL2::XYXL))
 -- ((LOS '(ACL2::YX ACL2::X)) (BE 'ACL2::YNN))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (VARP BE) (LOVARP LOS))
         (EQUAL T (BOOLEANP (BOOLEANP LOS))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions booleanp bex-evaluate
	       :with bex-evaluate
	       :hyps (varp be) (lovarp los))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1494 (1494 unique)
satisfied the hypotheses, and found 1494 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LOS NIL) (BE 'ACL2::JTO))
 -- ((LOS NIL) (BE 'ACL2::R))
 -- ((LOS '(ACL2::XEI)) (BE 'ACL2::X1))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LOS NIL) (BE 'ACL2::JTO))
                  ((LOS NIL) (BE 'ACL2::R))
                  ((LOS '(ACL2::XEI)) (BE 'ACL2::X1))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(BOOLEANP ACL2S::BEX-EVALUATE) ACL2S::Q '(((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL JTO))) ((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL R))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XEI) NIL)) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL X1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::VARP ACL2S::BE) (ACL2S::LOVARP ACL2S::LOS)) (EQUAL T (BOOLEANP (ACL2S::BEX-EVALUATE (BOOLEANP ACL2S::LOS) ACL2S::LOS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 996 (996 unique)
satisfied the hypotheses, and found 0 counterexamples and 996 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LOS '(ACL2::YX)) (BE 'ACL2::ZYY))
 -- ((LOS NIL) (BE 'ACL2::YX))
 -- ((LOS '(ACL2::XXYXX)) (BE 'U))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (VARP BE) (LOVARP LOS))
         (EQUAL T
                (BOOLEANP (BEX-EVALUATE (BOOLEANP LOS) LOS))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions bex-evaluate booleanp
	       :hyps (varp be) (lovarp los))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1492 (1492 unique)
satisfied the hypotheses, and found 1492 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LOS '(ACL2::ZZI ACL2::XN ACL2::X ACL2::X)) (BE 'ACL2::YLYN))
 -- ((LOS '(ACL2::X)) (BE 'ACL2::S))
 -- ((LOS '(ACL2::DBL ACL2::YYXX ACL2::YYXX)) (BE 'ACL2::X41))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LOS '(ACL2::ZZI ACL2::XN ACL2::X ACL2::X))
                   (BE 'ACL2::YLYN))
                  ((LOS '(ACL2::X)) (BE 'ACL2::S))
                  ((LOS '(ACL2::DBL ACL2::YYXX ACL2::YYXX))
                   (BE 'ACL2::X41))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::BEX-EVALUATE BOOLEANP) ACL2S::Q '(((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ZZI) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XN) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL))))) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL YLYN))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL)) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL S))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DBL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYXX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYXX) NIL)))) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL X41)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::VARP ACL2S::BE) (ACL2S::LOVARP ACL2S::LOS)) (EQUAL T (ACL2S::BEX-EVALUATE (BOOLEANP T) ACL2S::LOS))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 990 (990 unique)
satisfied the hypotheses, and found 0 counterexamples and 990 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LOS NIL) (BE 'ACL2::I))
 -- ((LOS NIL) (BE 'ACL2::SF))
 -- ((LOS '(ACL2::KAK)) (BE 'ACL2::X))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (VARP BE) (LOVARP LOS))
         (EQUAL T (BEX-EVALUATE (BOOLEANP T) LOS)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions booleanp bex-evaluate
	       :hyps (varp be) (lovarp los))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1497 (1497 unique)
satisfied the hypotheses, and found 1496 counterexamples and 1 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LOS NIL) (BE 'ACL2::C2D))
 -- ((LOS NIL) (BE 'W))
 -- ((LOS '(ACL2::OD ACL2::C)) (BE 'ACL2::TW))

Cases in which the conjecture is true include:
 [found in : "Goal'"]
 -- ((LOS '(PI ACL2::YYY ACL2::YYXX)) (BE 'ACL2::R))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LOS NIL) (BE 'ACL2::C2D))
                  ((LOS NIL) (BE 'W))
                  ((LOS '(ACL2::OD ACL2::C))
                   (BE 'ACL2::TW))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(BOOLEANP ACL2S::BEX-EVALUATE) ACL2S::Q '(((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL C2D))) ((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL W))) ((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL OD) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL C) NIL))) (ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL TW)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::VARP ACL2S::BE) (ACL2S::LOVARP ACL2S::LOS)) (EQUAL T (BOOLEANP (ACL2S::BEX-EVALUATE T ACL2S::LOS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 995 (995 unique)
satisfied the hypotheses, and found 0 counterexamples and 995 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LOS '(ACL2::P ACL2::X ACL2::X)) (BE 'ACL2::NY))
 -- ((LOS '(ACL2::X)) (BE 'ACL2::J3Q))
 -- ((LOS NIL) (BE 'ACL2::XXYXX))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (VARP BE) (LOVARP LOS))
         (EQUAL T (BOOLEANP (BEX-EVALUATE T LOS)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER ACL2::LOVARP-IMPLIES-TLP)
        (:EXECUTABLE-COUNTERPART BEXP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:TYPE-PRESCRIPTION BEX-EVALUATE-CONTRACT))
Warnings:  Invariant-risk
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 500 (500 unique)
satisfied the hypotheses, and found 0 counterexamples and 500 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((LOS '(ACL2::YX)) (BE 'ACL2::YM))
 -- ((LOS '(ACL2::NLXYN ACL2::YYY)) (BE 'ACL2::IL))
 -- ((LOS '(ACL2::XN)) (BE 'ACL2::G))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 cex
  (oneof boolean
         var
         (list 'nand cex cex)))
 Predicate events...
Form:  ( DEFUN CEXP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (CEXP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (CEXP DEFDATA::V1) => body -- not complete. 
Reasons: 
("Unable to characterize (using tau rules) a non-disjoint union type")

Form:  ( DEFTHM DEF=>CEX ...)
 Enumerator events...
Form:  ( DEFUN NTH-CEX-BUILTIN ...)
Form:  ( DEFUN NTH-CEX/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.28 seconds (prove: 0.19, print: 0.00, other: 0.10)
 Registering type...
Form:  ( DEFUN NTH-CEX ...)
Form:  ( ENCAPSULATE (((NTH-CEX * ...) ...) ...) ...)
Form:  ( DEFUN NTH-CEX/ACC ...)
Form:  ( ENCAPSULATE (((NTH-CEX/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-CEX NTH-CEX-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-CEX/ACC NTH-CEX/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.32 seconds (prove: 0.19, print: 0.00, other: 0.13)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.64 seconds (prove: 0.19, print: 0.00, other: 0.46)
Prover steps counted:  5866
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 cex-evaluate (ce los)
  :input-contract (and (cexp ce) (lovarp los))
  :output-contract (booleanp (cex-evaluate ce los))
  (cond ((booleanp ce) ce)
        ((varp ce) (in ce los))
        (t (nand (cex-evaluate (car (cdr ce)) los)
                 (cex-evaluate (car (cdr (cdr ce))) los)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

([ A key checkpoint:

Goal
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY CEX-EVALUATE))
                          '(NAND (CEX-EVALUATE (CADR CE) LOS)
                                 (CEX-EVALUATE (CADDR CE) LOS)))
              (LOVARP LOS)
              (CEXP CE)
              (NOT (BOOLEANP CE))
              (NOT (VARP CE)))
         (BOOLEANP (CEX-EVALUATE (CADR CE) LOS)))

*1 (Subgoal 1'') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY CEX-EVALUATE))
                          '(NAND (CEX-EVALUATE (CADR CE) LOS)
                                 (CEX-EVALUATE (CADDR CE) LOS)))
              (LOVARP LOS)
              (CEXP CE3)
              (CONSP CE4)
              (CEXP (CAR CE4))
              (NOT (CDR CE4)))
         (BOOLEANP (CEX-EVALUATE CE3 LOS))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

([ A key checkpoint:

Goal
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY CEX-EVALUATE))
                          '(NAND (CEX-EVALUATE (CADR CE) LOS)
                                 (CEX-EVALUATE (CADDR CE) LOS)))
              (LOVARP LOS)
              (CEXP CE)
              (NOT (BOOLEANP CE))
              (NOT (VARP CE)))
         (BOOLEANP (CEX-EVALUATE (CADDR CE) LOS)))

*1 (Subgoal 1'') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY CEX-EVALUATE))
                          '(NAND (CEX-EVALUATE (CADR CE) LOS)
                                 (CEX-EVALUATE (CADDR CE) LOS)))
              (LOVARP LOS)
              (CEXP CE3)
              (CEXP CE5))
         (BOOLEANP (CEX-EVALUATE CE5 LOS))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 1.30 seconds
Form:  ( DEFUN CEX-EVALUATE ...)
Time:  3.12 seconds (prove: 3.10, print: 0.00, other: 0.02)
Form:  ( DEFTHM CEX-EVALUATE-CONTRACT ...)
Time:  0.21 seconds (prove: 0.16, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.21 seconds (prove: 0.16, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS CEX-EVALUATE ...)
Time:  0.77 seconds (prove: 0.77, print: 0.00, other: 0.01)
Elapsed Run Time: 7.61 seconds

Function Name : CEX-EVALUATE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  9.27 seconds (prove: 7.90, print: 0.00, other: 1.37)
Prover steps counted:  302892
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :with cex-evaluate
	       :hyps (lovarp los) (cexp ce))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1364 (1364 unique)
satisfied the hypotheses, and found 1364 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((CE NIL) (LOS NIL))
 -- ((CE T) (LOS '(ACL2::YX ACL2::X)))
 -- ((CE '(NAND (NAND ACL2::X T) ACL2::X)) (LOS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((CE NIL) (LOS NIL))
                  ((CE T) (LOS '(ACL2::YX ACL2::X)))
                  ((CE '(NAND (NAND ACL2::X T) ACL2::X))
                   (LOS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::CE NIL) (ACL2S::LOS NIL)) ((ACL2S::CE T) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL)))) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL)))) (ACL2S::LOS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: EQUAL
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :with booleanp cex-evaluate
	       :hyps (lovarp los) (cexp ce))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1446 (1446 unique)
satisfied the hypotheses, and found 1446 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((CE 'ACL2::XYX) (LOS '(ACL2::XYX ACL2::YX ACL2::X)))
 -- ((CE NIL) (LOS '(ACL2::YX)))
 -- ((CE '(NAND T T)) (LOS '(ACL2::YYII ACL2::YYXXY ACL2::YYXX ACL2::YX)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((CE 'ACL2::XYX)
                   (LOS '(ACL2::XYX ACL2::YX ACL2::X)))
                  ((CE NIL) (LOS '(ACL2::YX)))
                  ((CE '(NAND T T))
                   (LOS '(ACL2::YYII ACL2::YYXXY ACL2::YYXX ACL2::YX)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL XYX)) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XYX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL))))) ((ACL2S::CE NIL) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) NIL))) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYII) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYXXY) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYXX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) NIL))))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LOVARP ACL2S::LOS) (ACL2S::CEXP ACL2S::CE)) (EQUAL T (BOOLEANP (BOOLEANP ACL2S::CE)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 938 (938 unique)
satisfied the hypotheses, and found 0 counterexamples and 938 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((CE '(NAND ACL2::X T)) (LOS NIL))
 -- ((CE '(NAND T T)) (LOS NIL))
 -- ((CE '(NAND ACL2::X ACL2::X)) (LOS NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (LOVARP LOS) (CEXP CE))
         (EQUAL T (BOOLEANP (BOOLEANP CE))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions cex-evaluate
	       :with booleanp ;cex-evaluate
	       :hyps (lovarp los) (cexp ce))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1349 (1349 unique)
satisfied the hypotheses, and found 1349 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((CE 'ACL2::X1F1) (LOS NIL))
 -- ((CE T) (LOS '(ACL2::X1 ACL2::YX)))
 -- ((CE '(NAND ACL2::X T)) (LOS '(ACL2::YXYY)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((CE 'ACL2::X1F1) (LOS NIL))
                  ((CE T) (LOS '(ACL2::X1 ACL2::YX)))
                  ((CE '(NAND ACL2::X T))
                   (LOS '(ACL2::YXYY)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::CEX-EVALUATE) ACL2S::Q '(((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL X1F1)) (ACL2S::LOS NIL)) ((ACL2S::CE T) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) NIL)))) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YXYY) NIL)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LOVARP ACL2S::LOS) (ACL2S::CEXP ACL2S::CE)) (EQUAL T (ACL2S::CEX-EVALUATE (BOOLEANP (BOOLEANP ACL2S::CE)) ACL2S::CE))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 11 examples across 1 subgoals, of which 10 (10 unique) satisfied
the hypotheses, and found 7 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((CE '(NAND (NAND T T) T)) (LOS NIL))
 -- ((CE 'ACL2::R) (LOS NIL))
 -- ((CE T) (LOS '(ACL2::YYXX)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((CE '(NAND ACL2::X ACL2::X)) (LOS NIL))
 -- ((CE NIL) (LOS '(ACL2::XYYYX ACL2::X)))
 -- ((CE NIL) (LOS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((CE '(NAND (NAND T T) T)) (LOS NIL))
                  ((CE 'ACL2::R) (LOS NIL))
                  ((CE T) (LOS '(ACL2::YYXX)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::CEX-EVALUATE) ACL2S::Q '(((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::LOS NIL)) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL R)) (ACL2S::LOS NIL)) ((ACL2S::CE T) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYXX) NIL))) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL X1F1)) (ACL2S::LOS NIL)) ((ACL2S::CE T) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) NIL)))) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YXYY) NIL)))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LOVARP ACL2S::LOS) (ACL2S::CEXP ACL2S::CE)) (EQUAL T (ACL2S::CEX-EVALUATE (BOOLEANP (BOOLEANP ACL2S::CE)) ACL2S::CE))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 11 examples across 1 subgoals, of which 9 (9 unique) satisfied
the hypotheses, and found 6 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((CE 'ACL2::FUBH) (LOS NIL))
 -- ((CE 'ACL2::XLZY) (LOS NIL))
 -- ((CE '(NAND ACL2::XYX (NAND T T))) (LOS '(ACL2::ZX)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((CE '(NAND ACL2::X ACL2::X)) (LOS NIL))
 -- ((CE NIL) (LOS '(ACL2::LY)))
 -- ((CE NIL) (LOS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((CE 'ACL2::FUBH) (LOS NIL))
                  ((CE 'ACL2::XLZY) (LOS NIL))
                  ((CE '(NAND ACL2::XYX (NAND T T)))
                   (LOS '(ACL2::ZX)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::CEX-EVALUATE) ACL2S::Q '(((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL FUBH)) (ACL2S::LOS NIL)) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL XLZY)) (ACL2S::LOS NIL)) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XYX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))) NIL)))) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ZX) NIL))) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::LOS NIL)) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL R)) (ACL2S::LOS NIL)) ((ACL2S::CE T) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYXX) NIL))) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL X1F1)) (ACL2S::LOS NIL)) ((ACL2S::CE T) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) NIL)))) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YXYY) NIL)))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LOVARP ACL2S::LOS) (ACL2S::CEXP ACL2S::CE)) (EQUAL T (ACL2S::CEX-EVALUATE (BOOLEANP (BOOLEANP ACL2S::CE)) ACL2S::CE))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 22 examples across 1 subgoals, of which 20 (20 unique) satisfied
the hypotheses, and found 17 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((CE 'ACL2::KJX) (LOS '(ACL2::X1 ACL2::KN ACL2::YYXX ACL2::YX)))
 -- ((CE 'ACL2::X8RA) (LOS '(ACL2::YX ACL2::X)))
 -- ((CE T) (LOS NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((CE '(NAND ACL2::YYXX ACL2::X)) (LOS '(ACL2::X ACL2::X)))
 -- ((CE NIL) (LOS NIL))
 -- ((CE '(NAND ACL2::YYY ACL2::X)) (LOS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((CE 'ACL2::KJX)
                   (LOS '(ACL2::X1 ACL2::KN ACL2::YYXX ACL2::YX)))
                  ((CE 'ACL2::X8RA)
                   (LOS '(ACL2::YX ACL2::X)))
                  ((CE T) (LOS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::CEX-EVALUATE) ACL2S::Q '(((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL KJX)) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL KN) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYXX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) NIL)))))) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL X8RA)) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL)))) ((ACL2S::CE T) (ACL2S::LOS NIL)) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL FUBH)) (ACL2S::LOS NIL)) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL XLZY)) (ACL2S::LOS NIL)) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XYX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))) NIL)))) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ZX) NIL))) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::LOS NIL)) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL R)) (ACL2S::LOS NIL)) ((ACL2S::CE T) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YYXX) NIL))) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL X1F1)) (ACL2S::LOS NIL)) ((ACL2S::CE T) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YX) NIL)))) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS T NIL)))) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YXYY) NIL)))) '(T T T T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LOVARP ACL2S::LOS) (ACL2S::CEXP ACL2S::CE)) (EQUAL T (ACL2S::CEX-EVALUATE (BOOLEANP (BOOLEANP ACL2S::CE)) ACL2S::CE))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 21 examples across 1 subgoals, of which 20 (20 unique) satisfied
the hypotheses, and found 17 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((CE 'ACL2::XN) (LOS NIL))
 -- ((CE T) (LOS '(ACL2::NNLK)))
 -- ((CE '(NAND T T)) (LOS NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((CE '(NAND ACL2::X ACL2::YX)) (LOS '(ACL2::XYX)))
 -- ((CE NIL) (LOS '(ACL2::KB)))
 -- ((CE NIL) (LOS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((CE 'ACL2::XN) (LOS NIL))
                  ((CE T) (LOS '(ACL2::NNLK)))
                  ((CE '(NAND T T)) (LOS NIL))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions booleanp cex-evaluate
	       :with booleanp ;cex-evaluate
	       :hyps (lovarp los) (cexp ce))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1446 (1446 unique)
satisfied the hypotheses, and found 1446 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((CE '(NAND T ACL2::X)) (LOS '(ACL2::X)))
 -- ((CE 'ACL2::AK) (LOS NIL))
 -- ((CE 'ACL2::XD) (LOS '(ACL2::NJY)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((CE '(NAND T ACL2::X))
                   (LOS '(ACL2::X)))
                  ((CE 'ACL2::AK) (LOS NIL))
                  ((CE 'ACL2::XD) (LOS '(ACL2::NJY)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(BOOLEANP ACL2S::CEX-EVALUATE) ACL2S::Q '(((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL)))) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL))) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL AK)) (ACL2S::LOS NIL)) ((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL XD)) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NJY) NIL)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LOVARP ACL2S::LOS) (ACL2S::CEXP ACL2S::CE)) (EQUAL T (BOOLEANP (ACL2S::CEX-EVALUATE (BOOLEANP ACL2S::CE) ACL2S::CE)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (AND (LOVARP LOS) (CEXP CE))
         (BOOLEANP (CEX-EVALUATE (BOOLEANP CE) CE)))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1500 (1500 unique)
satisfied the hypotheses, and found 0 counterexamples and 1500 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((CE T) (LOS '(ACL2::XXN)))
 -- ((CE T) (LOS '(ACL2::NXXYY)))
 -- ((CE T) (LOS '(ACL2::YXLN)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (LOVARP LOS) (CEXP CE))
         (EQUAL T
                (BOOLEANP (CEX-EVALUATE (BOOLEANP CE) CE))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions booleanp (cex-evaluate ce los)
	       :with booleanp ;cex-evaluate
	       :hyps (lovarp los) (cexp ce))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1417 (1417 unique)
satisfied the hypotheses, and found 1417 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((CE 'ACL2::NRLXF) (LOS NIL))
 -- ((CE '(NAND (NAND ACL2::X T) (NAND T T))) (LOS '(ACL2::XXYXX)))
 -- ((CE NIL) (LOS '(ACL2::YXYYY ACL2::X ACL2::X)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((CE 'ACL2::NRLXF) (LOS NIL))
                  ((CE '(NAND (NAND ACL2::X T) (NAND T T)))
                   (LOS '(ACL2::XXYXX)))
                  ((CE NIL)
                   (LOS '(ACL2::YXYYY ACL2::X ACL2::X)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(BOOLEANP (ACL2S::CEX-EVALUATE ACL2S::CE ACL2S::LOS)) ACL2S::Q '(((ACL2S::CE (ACL2S::INTERNAL-VARSYMBOL NRLXF)) (ACL2S::LOS NIL)) ((ACL2S::CE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ACL2S::NAND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))) NIL)))) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XXYXX) NIL))) ((ACL2S::CE NIL) (ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YXYYY) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL)))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LOVARP ACL2S::LOS) (ACL2S::CEXP ACL2S::CE)) (EQUAL T (BOOLEANP (ACL2S::CEX-EVALUATE ACL2S::CE ACL2S::LOS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 947 (947 unique)
satisfied the hypotheses, and found 0 counterexamples and 947 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((CE 'ACL2::FA) (LOS NIL))
 -- ((CE 'ACL2::X3F) (LOS '(ACL2::X4 ACL2::YX ACL2::X)))
 -- ((CE 'ACL2::XXYN) (LOS '(ACL2::YX ACL2::YX ACL2::YX)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (LOVARP LOS) (CEXP CE))
         (EQUAL T (BOOLEANP (CEX-EVALUATE CE LOS)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER ACL2::LOVARP-IMPLIES-TLP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:TYPE-PRESCRIPTION CEX-EVALUATE-CONTRACT)
        (:TYPE-PRESCRIPTION CEXP))
Warnings:  Invariant-risk
Time:  0.06 seconds (prove: 0.03, print: 0.00, other: 0.04)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 453 (453 unique)
satisfied the hypotheses, and found 0 counterexamples and 453 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((CE NIL) (LOS NIL))
 -- ((CE 'ACL2::N1) (LOS NIL))
 -- ((CE '(NAND (NAND ACL2::X T) T)) (LOS '(ACL2::XXYXX ACL2::X ACL2::YX)))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 compile (be)
  :input-contract (bexp be)
  :output-contract (cexp (compile be))
  (cond ((booleanp be) be)
        ((varp be) be)
        ((bex-notp be)
         (list 'nand
               (compile (car (cdr be)))
               (compile (car (cdr be)))))
        ((bex-andp be)
         (list 'nand
               (list 'nand
                     (compile (car (cdr be)))
                     (compile (car (cdr (cdr be)))))
               (list 'nand
                     (compile (car (cdr be)))
                     (compile (car (cdr (cdr be)))))))
        (t (list 'nand
                 (list 'nand
                       (compile (car (cdr be)))
                       (compile (car (cdr be))))
                 (list 'nand
                       (compile (car (cdr (cdr be))))
                       (compile (car (cdr (cdr be)))))))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol LIST
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(defunc2 compile (be)
  :input-contract (bexp be)
  :output-contract (cexp (compile be))
  (cond ((booleanp be) be)
        ((varp be) be)
        ((bex-notp be)
         (cons 'nand
               (cons (compile (car (cdr be)))
		     (cons (compile (car (cdr be))) nil))))
        ((bex-andp be)
         (cons 'nand
               (cons (cons 'nand
			   (cons (compile (car (cdr be)))
				 (cons (compile (car (cdr (cdr be)))) nil)))
		     (cons (cons 'nand
				 (cons (compile (car (cdr be)))
				       (cons (compile (car (cdr (cdr be)))) nil)))
			   nil))))
        (t (cons 'nand
                 (cons (cons 'nand
			     (cons (compile (car (cdr be)))
				   (cons (compile (car (cdr be)))
					 nil)))
		       (cons (cons 'nand
				   (cons (compile (car (cdr (cdr be))))
					 (cons (compile (car (cdr (cdr be))))
					       nil)))
			     nil))))))


ACL2 Error in ( DEFUN COMPILE ...):  Symbols in the main Lisp package,
such as COMPILE, may not be defined or constrained.


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  10.88 seconds (prove: 0.00, print: 0.00, other: 10.88)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(defunc2 compiler (be)
  :input-contract (bexp be)
  :output-contract (cexp (compiler be))
  (cond ((booleanp be) be)
        ((varp be) be)
        ((bex-notp be)
         (cons 'nand
               (cons (compiler (car (cdr be)))
		     (cons (compiler (car (cdr be))) nil))))
        ((bex-andp be)
         (cons 'nand
               (cons (cons 'nand
			   (cons (compiler (car (cdr be)))
				 (cons (compiler (car (cdr (cdr be)))) nil)))
		     (cons (cons 'nand
				 (cons (compiler (car (cdr be)))
				       (cons (compiler (car (cdr (cdr be)))) nil)))
			   nil))))
        (t (cons 'nand
                 (cons (cons 'nand
			     (cons (compiler (car (cdr be)))
				   (cons (compiler (car (cdr be)))
					 nil)))
		       (cons (cons 'nand
				   (cons (compiler (car (cdr (cdr be))))
					 (cons (compiler (car (cdr (cdr be))))
					       nil)))
			     nil))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILER))
             '(CDR BE))
 (BEXP BE)
 (NOT (BOOLEANP BE))
 (NOT (VARP BE))
 (BEX-NOTP BE)
 (NOT (CONSP BE)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILER))
             '(CADR BE))
 (BEXP BE)
 (NOT (BOOLEANP BE))
 (NOT (VARP BE))
 (BEX-NOTP BE)
 (NOT (CONSP (CDR BE))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILER))
             '(CDR BE))
 (BEXP BE)
 (NOT (BOOLEANP BE))
 (NOT (VARP BE))
 (NOT (BEX-NOTP BE))
 (BEX-ANDP BE)
 (NOT (CONSP BE)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILER))
             '(CDDR BE))
 (EXTRA-INFO '(:GUARD (:BODY COMPILER))
             '(CADR BE))
 (BEXP BE)
 (NOT (BOOLEANP BE))
 (NOT (VARP BE))
 (NOT (BEX-NOTP BE))
 (BEX-ANDP BE)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Splitter note (see :DOC splitter) for Goal (3 subgoals).
  if-intro: ((:DEFINITION BEX-NOTP))


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 2.04 seconds
Form:  ( DEFUN COMPILER ...)
Time:  8.80 seconds (prove: 8.76, print: 0.00, other: 0.04)
Form:  ( DEFTHM COMPILER-CONTRACT ...)
Time:  0.46 seconds (prove: 0.42, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.46 seconds (prove: 0.42, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS COMPILER ...)
Time:  0.22 seconds (prove: 0.22, print: 0.00, other: 0.01)
Elapsed Run Time: 17.53 seconds

Function Name : COMPILER 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  31.43 seconds (prove: 18.14, print: 0.00, other: 13.29)
Prover steps counted:  626230
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (cexp (compile be))
	       :with boolean)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ("~@0  Note:  this error occurred in the context ~x1."
  (#\0
   "The symbol ~x0 (in package ~x1) has neither a function ~
                    nor macro definition in ACL2.  ~#2~[Please define ~
                    it~@3~/Moreover, this symbol is in the main Lisp package; ~
                    hence, you cannot define it in ACL2.~]  See :DOC ~
                    near-misses."
   (#\0 . COMPILE)
   (#\1 . "COMMON-LISP")
   (#\2 . 1)
   (#\3 . "."))
  (#\1 COMPILE BE))
ACL2S !>>Bye.

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value #\0 is not of the expected type SEQUENCE.
While executing: CCL::SEQUENCE-TYPE
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(suggest-lemma (cexp (compiler be))
	       :with boolean)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM CEXP (COMPILER BE))
  (((BEXP BE))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1283 (1283 unique)
satisfied the hypotheses, and found 1283 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((BE 'ACL2::X))
 -- ((BE 'ACL2::YXYY))
 -- ((BE 'ACL2::MA))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((BE 'ACL2::X))
                  ((BE 'ACL2::YXYY))
                  ((BE 'ACL2::MA))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL X))) ((ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL YXYY))) ((ACL2S::BE (ACL2S::INTERNAL-VARSYMBOL MA)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::BEXP ACL2S::BE)) (EQUAL (ACL2S::CEXP (ACL2S::COMPILER ACL2S::BE)) T)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 835 (835 unique)
satisfied the hypotheses, and found 0 counterexamples and 835 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((BE T))
 -- ((BE '(NOT (OR T T))))
 -- ((BE NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (BEXP BE)
         (EQUAL (CEXP (COMPILER BE)) T))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       
	       :with cexp compiler)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
 (IMPLIES (ALLP T) NIL) evaluates to NIL. Nothing to test!

Itest? found a counterexample.
 (T (:FALSIFIABLE NIL))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(NIL) '(T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: WALK
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(suggest-lemma t
	       
	       :with cexp compiler
	       :hyps (bexp be))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1290 (1290 unique)
satisfied the hypotheses, and found 1290 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((BE '(AND T T)))
 -- ((BE '(OR T T)))
 -- ((BE T))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((BE '(AND T T)))
                  ((BE '(OR T T)))
                  ((BE T))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))))) ((ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL OR) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))))) ((ACL2S::BE T))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::BEXP ACL2S::BE)) (EQUAL T (ACL2S::CEXP (ACL2S::CEXP ACL2S::BE)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 891 (891 unique)
satisfied the hypotheses, and found 0 counterexamples and 891 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((BE NIL))
 -- ((BE '(AND (AND T T) T)))
 -- ((BE '(AND ACL2::X NIL)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (thm (IMPLIES (BEXP BE)
         (EQUAL T (CEXP (CEXP BE)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14DD29F6>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14DD29F6>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (BEXP BE)
         (EQUAL T (CEXP (CEXP BE)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:EXECUTABLE-COUNTERPART TAU-SYSTEM))
Warnings:  Invariant-risk
Time:  0.05 seconds (prove: 0.02, print: 0.00, other: 0.03)
Prover steps counted:  12

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 446 (446 unique)
satisfied the hypotheses, and found 0 counterexamples and 446 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((BE 'ACL2::X7))
 -- ((BE 'ACL2::LLT))
 -- ((BE NIL))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (bex-evaluate be los)
	       :required-expressions (compiler be)
	       :with cex-evaluate)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM BEX-EVALUATE BE LOS)
  (((BEXP BE)) ((LOVARP LOS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1442 (1442 unique)
satisfied the hypotheses, and found 1442 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- 
((LOS '(ACL2::YNYKX ACL2::XXXYY ACL2::X ACL2::X)) (BE '(AND (AND T T) T)))
 -- ((LOS NIL) (BE '(NOT (OR T T))))
 -- ((LOS NIL) (BE '(NOT T)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LOS '(ACL2::YNYKX ACL2::XXXYY ACL2::X ACL2::X))
                   (BE '(AND (AND T T) T)))
                  ((LOS NIL) (BE '(NOT (OR T T))))
                  ((LOS NIL) (BE '(NOT T)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::COMPILER ACL2S::BE)) ACL2S::Q '(((ACL2S::LOS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL YNYKX) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL XXXYY) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL X) NIL))))) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AND) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL AND) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))) (ACL2S::INTERNAL-CONS T NIL))))) ((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL OR) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS T NIL))) NIL)))) ((ACL2S::LOS NIL) (ACL2S::BE (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL NOT) (ACL2S::INTERNAL-CONS T NIL))))) '(T NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::BEXP ACL2S::BE) (ACL2S::LOVARP ACL2S::LOS)) (EQUAL (ACL2S::BEX-EVALUATE ACL2S::BE ACL2S::LOS) (ACL2S::CEX-EVALUATE (ACL2S::COMPILER ACL2S::BE) ACL2S::LOS))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Splitter note (see :DOC splitter) for Goal (2 subgoals).
  if-intro: ((:DEFINITION IFF))


([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (BEXP BE)
              (LOVARP LOS)
              (NOT (BEX-EVALUATE BE LOS)))
         (NOT (CEX-EVALUATE (COMPILER BE) LOS)))

*1 (Subgoal 2) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (BEXP BE)
              (LOVARP LOS)
              (BEX-EVALUATE BE LOS))
         (CEX-EVALUATE (COMPILER BE) LOS))

*2 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *2 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 2000 examples across 4 subgoals, of which 1449 (1449 unique)
satisfied the hypotheses, and found 0 counterexamples and 1449 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LOS '(ACL2::XYYYX ACL2::YX ACL2::X)) (BE '(AND (NOT T) T)))
 -- ((LOS NIL) (BE '(OR T T)))
 -- ((LOS NIL) (BE NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (BEXP BE) (LOVARP LOS))
         (EQUAL (BEX-EVALUATE BE LOS)
                (CEX-EVALUATE (COMPILER BE) LOS))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Goal (2 subgoals).
  if-intro: ((:DEFINITION IFF))

Subgoal 2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (BEXP BE)
              (LOVARP LOS)
              (NOT (BEX-EVALUATE BE LOS)))
         (NOT (CEX-EVALUATE (COMPILER BE) LOS)))

*1 (Subgoal 2) is pushed for proof by induction.

])
Subgoal 1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (BEXP BE)
              (LOVARP LOS)
              (BEX-EVALUATE BE LOS))
         (CEX-EVALUATE (COMPILER BE) LOS))

Normally we would attempt to prove Subgoal 1 by induction.  However,
we prefer in this instance to focus on the original input conjecture
rather than this simplified special case.  We therefore abandon our
previous work on this conjecture and reassign the name *1 to the original
conjecture.  (See :DOC otf-flg.)

])

Perhaps we can prove *1 by induction.  Four induction schemes are suggested
by this conjecture.  These merge into two derived induction schemes.
However, one of these is flawed and so we are left with one viable
candidate.  

We will induct according to a scheme suggested by (COMPILER BE), but
modified to accommodate (BEX-EVALUATE BE LOS).  These suggestions were
produced using the :induction rules BEX-EVALUATE-INDUCTION-SCHEME,
BEX-EVALUATE-INDUCTION-SCHEME-FROM-DEFINITION, BEXP, 
COMPILER-INDUCTION-SCHEME and COMPILER-INDUCTION-SCHEME-FROM-DEFINITION.
If we let (:P BE LOS) denote *1 above then the induction scheme we'll
use is
(AND (IMPLIES (NOT (BEXP BE)) (:P BE LOS))
     (IMPLIES (AND (BEXP BE)
                   (NOT (BOOLEANP BE))
                   (NOT (VARP BE))
                   (NOT (BEX-NOTP BE))
                   (NOT (BEX-ANDP BE))
                   (:P (CADR BE) LOS)
                   (:P (CADDR BE) LOS))
              (:P BE LOS))
     (IMPLIES (AND (BEXP BE)
                   (NOT (BOOLEANP BE))
                   (NOT (VARP BE))
                   (NOT (BEX-NOTP BE))
                   (BEX-ANDP BE)
                   (:P (CADR BE) LOS)
                   (:P (CADDR BE) LOS))
              (:P BE LOS))
     (IMPLIES (AND (BEXP BE)
                   (NOT (BOOLEANP BE))
                   (NOT (VARP BE))
                   (BEX-NOTP BE)
                   (:P (CADR BE) LOS))
              (:P BE LOS))
     (IMPLIES (AND (BEXP BE)
                   (NOT (BOOLEANP BE))
                   (VARP BE))
              (:P BE LOS))
     (IMPLIES (AND (BEXP BE) (BOOLEANP BE))
              (:P BE LOS))).
This induction is justified by the same argument used to admit COMPILER.
When applied to the goal at hand the above induction scheme produces
five nontautological subgoals.
Subgoal *1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal is COMPLETED!

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:COMPOUND-RECOGNIZER ACL2::LOVARP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER VAR-SYMBOLP)
        (:DEFINITION BEX-ANDP)
        (:DEFINITION BEX-EVALUATE-DEFINITION-RULE)
        (:DEFINITION BEX-NOTP)
        (:DEFINITION BEXP)
        (:DEFINITION CEX-EVALUATE-DEFINITION-RULE)
        (:DEFINITION CEXP)
        (:DEFINITION COMPILER-DEFINITION-RULE)
        (:DEFINITION IFF)
        (:DEFINITION LOVARP)
        (:DEFINITION NAND-DEFINITION-RULE)
        (:DEFINITION NOT)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:EXECUTABLE-COUNTERPART NAND)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING LOVAR=>DEF)
        (:INDUCTION BEX-EVALUATE-INDUCTION-SCHEME)
        (:INDUCTION BEX-EVALUATE-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION BEXP)
        (:INDUCTION COMPILER-INDUCTION-SCHEME)
        (:INDUCTION COMPILER-INDUCTION-SCHEME-FROM-DEFINITION)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE CDR-LOVARP-SIG)
        (:REWRITE CEX-EVALUATE-CONTRACT)
        (:REWRITE COMPILER-CONTRACT)
        (:REWRITE DEF=>BEX)
        (:REWRITE DEF=>CEX)
        (:REWRITE ACL2::EQUAL-OF-BOOLEANS-REWRITE)
        (:TYPE-PRESCRIPTION BEX-EVALUATE-CONTRACT)
        (:TYPE-PRESCRIPTION BEXP)
        (:TYPE-PRESCRIPTION CEX-EVALUATE-CONTRACT)
        (:TYPE-PRESCRIPTION CEXP)
        (:TYPE-PRESCRIPTION COMPILER-CONTRACT)
        (:TYPE-PRESCRIPTION VARP))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION IFF))
Warnings:  Invariant-risk
Time:  1.55 seconds (prove: 1.21, print: 0.01, other: 0.33)
Prover steps counted:  53641

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 925 (925 unique)
satisfied the hypotheses, and found 0 counterexamples and 925 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- 
((LOS '(ACL2::X00 ACL2::YX ACL2::I ACL2::X)) (BE '(OR (NOT T) (AND T T))))
 -- ((LOS '(ACL2::XB ACL2::X4)) (BE '(OR T ACL2::X)))
 -- ((LOS NIL) (BE '(OR T T)))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ ls
#(defdata lovar (listof var))#	itest-ithm.lisp~
#defdata2#			mk-hons-raw.lsp
#suggest-lemma-raw.lsp#		mk-raw.lsp
#testing2.lisp#			mk-raw.lsp~
(defdata lovar (listof var))	numbers-raw.lsp
compile-defdata-raw.lsp		numbers-raw.lsp~
compile-defdata-raw.lsp~	presentation.lisp
compile-raw.lsp			presentation.lisp~
compile-raw.lsp~		primitives-raw.lsp
defdata2.lisp~			primitives-raw.lsp~
defunc2-raw.lsp			suggest-lemma-raw.lsp
defunc2-raw.lsp~		suggest-lemma-raw.lsp~
helpers-raw.lsp			testing.lisp
helpers-raw.lsp~		testing.lisp~
homework3.lisp			testing2.lisp
homework3.lisp~			testing2.lisp~
homework5.lisp			testing3.lisp
homework5.lisp~			testing3.lisp~
homework6.lisp			to-acl2-raw.lsp
homework6.lisp~			to-acl2-raw.lsp~
interp-raw.lsp			todos.txt
interp-raw.lsp~			todos.txt~
itest-cgen.lisp			top.lisp
itest-cgen.lisp~		top.lisp~
itest-ithm.lisp			top.lsp~
bash-3.2$ cd ~/Desktop/ACL2s-practice/
bash-3.2$ ls
hmwk3.lisp		hw6.lisp		hw9-last-proof.lisp
hw10.lisp		hw7.lisp		hwk2.lisp
hw11-2.lisp		hw8.lisp		hwk3.lisp
hw11-2.lisp~		hw82.lisp		hwk9.lisp
hw11.lisp		hw9--revised.lisp	project-ideas.txt
hw5.lisp		hw9-2.lisp
bash-3.2$ cp hw7.lisp ~/lemmas/acl2s-raw/homework7.lisp
bash-3.2$ cd ~/lemmas/acl2s-raw/
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.82 seconds (prove: 0.00, print: 0.00, other: 2.82)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 no-dupes (l)
  :input-contract (true-listp l)
  :output-contract (booleanp (no-dupes l))
  (or (endp l) 
      (and (not (in (car l) (cdr l)))
           (no-dupes (cdr l)))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol IN
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(defunc2 in (x ls)
  :input-contract (true-listp ls)
  :output-contract (booleanp (in x ls))
  (cond
   ((endp ls) nil)
   ((equal x (car ls)) t)
   (t (in x (cdr ls)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CAR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CDR LS))
 (TRUE-LISTP LS)
 (NOT (ENDP LS))
 (NOT (EQUAL X (CAR LS)))
 (NOT (CONSP LS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.52 seconds
Form:  ( DEFUN IN ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN-CONTRACT ...)
Time:  0.16 seconds (prove: 0.11, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.16 seconds (prove: 0.11, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS IN ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.22 seconds

Function Name : IN 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.03 seconds (prove: 0.21, print: 0.00, other: 0.82)
Prover steps counted:  3676
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 no-dupes (l)
  :input-contract (true-listp l)
  :output-contract (booleanp (no-dupes l))
  (or (endp l) 
      (and (not (in (car l) (cdr l)))
           (no-dupes (cdr l)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NO-DUPES))
             '(CDR L))
 (EXTRA-INFO '(:GUARD (:BODY NO-DUPES))
             '(CAR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NO-DUPES))
             '(CDR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (IN (CAR L) (CDR L)))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.53 seconds
Form:  ( DEFUN NO-DUPES ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NO-DUPES-CONTRACT ...)
Time:  0.20 seconds (prove: 0.16, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.20 seconds (prove: 0.16, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS NO-DUPES ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.26 seconds

Function Name : NO-DUPES 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.15 seconds (prove: 0.28, print: 0.00, other: 0.87)
Prover steps counted:  6240
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 num-unique (l)
  :input-contract (true-listp l)
  :output-contract (natp (num-unique l))
  (cond ((endp l) 0)
        ((in (car l) (cdr l))
         (num-unique (cdr l)))
        (t (+ 1 (num-unique (cdr l))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NUM-UNIQUE))
             '(CDR L))
 (EXTRA-INFO '(:GUARD (:BODY NUM-UNIQUE))
             '(CAR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NUM-UNIQUE))
             '(CDR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (IN (CAR L) (CDR L))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NUM-UNIQUE))
             '(CDR L))
 (TRUE-LISTP L)
 (NOT (ENDP L))
 (NOT (IN (CAR L) (CDR L)))
 (NOT (CONSP L)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.69 seconds
Form:  ( DEFUN NUM-UNIQUE ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NUM-UNIQUE-CONTRACT ...)
Time:  0.21 seconds (prove: 0.17, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.21 seconds (prove: 0.17, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS NUM-UNIQUE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.28 seconds

Function Name : NUM-UNIQUE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.28 seconds (prove: 0.31, print: 0.00, other: 0.96)
Prover steps counted:  6310
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (<= (num-unique l)
		   (len l))
	       :with all-lines
	       :hyps (true-listp l)
	       (or (endp l)
		   (and (not (endp l))
			(in (first l) (rest l))
			(implies (listp (rest l))
				 (<= (num-unique (rest l))
				     (len (rest l)))))
		   (and (not (endp l))
			(not (in (first l) (rest l)))
			(implies (listp (rest l))
				 (<= (num-unique (rest l))
				     (len (rest l)))))))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM NOT (< (LEN L) (NUM-UNIQUE L)))
  (((TRUE-LISTP L))
   ((RATIONALP (NUM-UNIQUE L))))
  (ACL2::LEMMA (:TYPE-PRESCRIPTION LEN)))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION NOT)
             (:DEFINITION NUM-UNIQUE-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP))


**Summary of Cgen/testing**
We tested 2000 examples across 4 subgoals, of which 1197 (1197 unique)
satisfied the hypotheses, and found 1197 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((L '(1 1)))
 -- ((L '(2)))
 -- ((L '(-1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((L '(1 1)))
                  ((L '(2)))
                  ((L '(-1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL))) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::L) (RATIONALP (ACL2S::NUM-UNIQUE ACL2S::L)) (TRUE-LISTP ACL2S::L) (OR (ENDP ACL2S::L) (AND (NOT (ENDP ACL2S::L)) (ACL2S::IN (FIRST ACL2S::L) (REST ACL2S::L)) (IMPLIES (LISTP (REST ACL2S::L)) (<= (ACL2S::NUM-UNIQUE (REST ACL2S::L)) (LEN (REST ACL2S::L))))) (AND (NOT (ENDP ACL2S::L)) (NOT (ACL2S::IN (FIRST ACL2S::L) (REST ACL2S::L))) (IMPLIES (LISTP (REST ACL2S::L)) (<= (ACL2S::NUM-UNIQUE (REST ACL2S::L)) (LEN (REST ACL2S::L))))))) (EQUAL (<= (ACL2S::NUM-UNIQUE ACL2S::L) (LEN ACL2S::L)) T)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION NOT)
             (:DEFINITION NUM-UNIQUE-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP))


Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 515 (515 unique)
satisfied the hypotheses, and found 0 counterexamples and 515 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((L '(11)))
 -- ((L '(0 1)))
 -- ((L NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP L)
              (RATIONALP (NUM-UNIQUE L))
              (TRUE-LISTP L)
              (OR (ENDP L)
                  (AND (NOT (ENDP L))
                       (IN (FIRST L) (REST L))
                       (IMPLIES (LISTP (REST L))
                                (<= (NUM-UNIQUE (REST L))
                                    (LEN (REST L)))))
                  (AND (NOT (ENDP L))
                       (NOT (IN (FIRST L) (REST L)))
                       (IMPLIES (LISTP (REST L))
                                (<= (NUM-UNIQUE (REST L))
                                    (LEN (REST L)))))))
         (EQUAL (<= (NUM-UNIQUE L) (LEN L)) T))(thm
 (IMPLIES (AND (TRUE-LISTP L)
              (RATIONALP (NUM-UNIQUE L))
              (TRUE-LISTP L)
              (OR (ENDP L)
                  (AND (NOT (ENDP L))
                       (IN (FIRST L) (REST L))
                       (IMPLIES (LISTP (REST L))
                                (<= (NUM-UNIQUE (REST L))
                                    (LEN (REST L)))))
                  (AND (NOT (ENDP L))
                       (NOT (IN (FIRST L) (REST L)))
                       (IMPLIES (LISTP (REST L))
                                (<= (NUM-UNIQUE (REST L))
                                    (LEN (REST L)))))))
         (EQUAL (<= (NUM-UNIQUE L) (LEN L)) T)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6E6>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6E6>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm
 (IMPLIES (AND (TRUE-LISTP L)
              (RATIONALP (NUM-UNIQUE L))
              (TRUE-LISTP L)
              (OR (ENDP L)
                  (AND (NOT (ENDP L))
                       (IN (FIRST L) (REST L))
                       (IMPLIES (LISTP (REST L))
                                (<= (NUM-UNIQUE (REST L))
                                    (LEN (REST L)))))
                  (AND (NOT (ENDP L))
                       (NOT (IN (FIRST L) (REST L)))
                       (IMPLIES (LISTP (REST L))
                                (<= (NUM-UNIQUE (REST L))
                                    (LEN (REST L)))))))
         (EQUAL (<= (NUM-UNIQUE L) (LEN L)) T)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION NOT)
             (:DEFINITION NUM-UNIQUE-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP))

Subgoal 2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:DEFINITION ENDP)
        (:DEFINITION LEN)
        (:DEFINITION NOT)
        (:DEFINITION NUM-UNIQUE-DEFINITION-RULE)
        (:DEFINITION TRUE-LISTP)
        (:EXECUTABLE-COUNTERPART <)
        (:EXECUTABLE-COUNTERPART CAR)
        (:EXECUTABLE-COUNTERPART CDR)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART ENDP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:EXECUTABLE-COUNTERPART IN)
        (:EXECUTABLE-COUNTERPART LEN)
        (:EXECUTABLE-COUNTERPART LISTP)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART NUM-UNIQUE)
        (:EXECUTABLE-COUNTERPART RATIONALP)
        (:EXECUTABLE-COUNTERPART TAU-SYSTEM)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:TYPE-PRESCRIPTION NUM-UNIQUE-CONTRACT))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION NOT)
             (:DEFINITION NUM-UNIQUE-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP))
Warnings:  Invariant-risk
Time:  0.27 seconds (prove: 0.20, print: 0.00, other: 0.07)
Prover steps counted:  6284

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 249 (249 unique)
satisfied the hypotheses, and found 0 counterexamples and 249 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((L '((ACL2::A) T 0)))
 -- ((L '(1 ACL2::A)))
 -- ((L NIL))

Proof succeeded.
ACL2S !>(suggest-lemma (num-unique l)
	       :with no-dupes len
	       :hyps (listp l) (no-dupes l)
	       (or (endp l)
		   (and (not (endp l))
			(listp (rest l))
			(no-dupes (rest l))
			(equal (num-unique (rest l))
			       (len (rest l))))))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM NUM-UNIQUE L)
  (((TRUE-LISTP L))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION LISTP)
             (:DEFINITION NO-DUPES-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP))


**Summary of Cgen/testing**
We tested 2000 examples across 4 subgoals, of which 1007 (1007 unique)
satisfied the hypotheses, and found 1007 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((L NIL))
 -- ((L '(3)))
 -- ((L '(123 -2)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((L NIL))
                  ((L '(3)))
                  ((L '(123 -2)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::L NIL)) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL))))) '((ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::L) (LISTP ACL2S::L) (ACL2S::NO-DUPES ACL2S::L) (OR (ENDP ACL2S::L) (AND (NOT (ENDP ACL2S::L)) (LISTP (REST ACL2S::L)) (ACL2S::NO-DUPES (REST ACL2S::L)) (EQUAL (ACL2S::NUM-UNIQUE (REST ACL2S::L)) (LEN (REST ACL2S::L)))))) (EQUAL (ACL2S::NUM-UNIQUE ACL2S::L) (LEN ACL2S::L))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 431 (431 unique)
satisfied the hypotheses, and found 0 counterexamples and 431 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((L '(ACL2::ABAB 0)))
 -- ((L NIL))
 -- ((L '(-1/4 5)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP L)
              (LISTP L)
              (NO-DUPES L)
              (OR (ENDP L)
                  (AND (NOT (ENDP L))
                       (LISTP (REST L))
                       (NO-DUPES (REST L))
                       (EQUAL (NUM-UNIQUE (REST L))
                              (LEN (REST L))))))
         (EQUAL (NUM-UNIQUE L) (LEN L)))(thm (IMPLIES (AND (TRUE-LISTP L)
              (LISTP L)
              (NO-DUPES L)
              (OR (ENDP L)
                  (AND (NOT (ENDP L))
                       (LISTP (REST L))
                       (NO-DUPES (REST L))
                       (EQUAL (NUM-UNIQUE (REST L))
                              (LEN (REST L))))))
         (EQUAL (NUM-UNIQUE L) (LEN L))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6E6>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E1C6E6>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (AND (TRUE-LISTP L)
              (LISTP L)
              (NO-DUPES L)
              (OR (ENDP L)
                  (AND (NOT (ENDP L))
                       (LISTP (REST L))
                       (NO-DUPES (REST L))
                       (EQUAL (NUM-UNIQUE (REST L))
                              (LEN (REST L))))))
         (EQUAL (NUM-UNIQUE L) (LEN L))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:DEFINITION ENDP)
        (:DEFINITION LEN)
        (:DEFINITION LISTP)
        (:DEFINITION NO-DUPES-DEFINITION-RULE)
        (:DEFINITION NUM-UNIQUE-DEFINITION-RULE)
        (:DEFINITION TRUE-LISTP)
        (:EXECUTABLE-COUNTERPART CDR)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART ENDP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:EXECUTABLE-COUNTERPART LEN)
        (:EXECUTABLE-COUNTERPART LISTP)
        (:EXECUTABLE-COUNTERPART NO-DUPES)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART NUM-UNIQUE)
        (:EXECUTABLE-COUNTERPART TRUE-LISTP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:TYPE-PRESCRIPTION NO-DUPES-CONTRACT))
Warnings:  Invariant-risk
Time:  0.16 seconds (prove: 0.11, print: 0.00, other: 0.05)
Prover steps counted:  5196

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 212 (212 unique)
satisfied the hypotheses, and found 0 counterexamples and 212 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((L '(-1 0)))
 -- ((L '(-4 0)))
 -- ((L NIL))

Proof succeeded.
ACL2S !>(defunc2 fc (x)
  :input-contract (posp x)
  :output-contract (integerp (fc x))
  (if (<= x 21)
      (- x 121)
    (- 1 (fc (- x 1)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

([ A key checkpoint:

Goal'
(IMPLIES (AND (INTEGERP X) (< 0 X))
         (INTEGERP (FC X)))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.75 seconds
Form:  ( DEFUN FC ...)
Time:  0.19 seconds (prove: 0.18, print: 0.00, other: 0.01)
Form:  ( DEFTHM FC-CONTRACT ...)
Time:  0.10 seconds (prove: 0.06, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.06, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS FC ...)
Time:  0.02 seconds (prove: 0.02, print: 0.00, other: 0.00)
Elapsed Run Time: 0.54 seconds

Function Name : FC 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.59 seconds (prove: 0.55, print: 0.00, other: 1.04)
Prover steps counted:  2852
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 fg (x y)
  :input-contract (and (natp x) (posp y))
  :output-contract (natp (fg x y))
  (cond ((equal x 0) x)
        ((equal y 1) y)
        ((> x y) (fg y x))
        (t (fg x (- y 1)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 1.07 seconds

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value 0 is not of the expected type SYMBOL.
While executing: SYMBOL-NAME
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ cp ~/Desktop/ACL2s-practice/hw8.lisp homework8.lisp
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defunc2 fa (x)
  :input-contract (natp x)
  :output-contract (rationalp (fa x))
  (if (<= x 11)
      (/ x 17)
    (- 1 (fa (- x 1)))))


ACL2 Error in TOP-LEVEL:  The symbol DEFUNC2 (in package "ACL2S") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(DEFUNC2 FA (X)
         :INPUT-CONTRACT (NATP X)
         :OUTPUT-CONTRACT (RATIONALP (FA X))
         ...).
(See :DOC set-iprint to be able to see elided values in this message.)

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" uncertified-okp t)


ACL2 Error in macro expansion:  A non-keyword was encountered while
macro expanding (INCLUDE-BOOK "top" UNCERTIFIED-OKP T) where a keyword
was expected.  The formal parameters list for INCLUDE-BOOK is 
(&WHOLE ACL2::EVENT-FORM ACL2::USER-BOOK-NAME &KEY (ACL2::LOAD-COMPILED-FILE '
 :DEFAULT) (ACL2::UNCERTIFIED-OKP 'T) (ACL2::DEFAXIOMS-OKP 'T) (
 ACL2::SKIP-PROOFS-OKP 'T) (ACL2::TTAGS ':DEFAULT) ACL2::DIR).

ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.72 seconds (prove: 0.00, print: 0.00, other: 2.72)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 fa (x)
  :input-contract (natp x)
  :output-contract (rationalp (fa x))
  (if (<= x 11)
      (/ x 17)
    (- 1 (fa (- x 1)))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol /
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(defunc2 fa (x)
  :input-contract (natp x)
  :output-contract (rationalp (fa x))
  (if (<= x 11)
      (+ x 17)
    (- 1 (fa (- x 1)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

([ A key checkpoint:

Goal'
(IMPLIES (AND (INTEGERP X) (<= 0 X))
         (RATIONALP (FA X)))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.75 seconds
Form:  ( DEFUN FA ...)
Time:  0.17 seconds (prove: 0.16, print: 0.00, other: 0.01)
Form:  ( DEFTHM FA-CONTRACT ...)
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS FA ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.49 seconds

Function Name : FA 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.53 seconds (prove: 0.50, print: 0.00, other: 1.03)
Prover steps counted:  2897
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 ma (x)
  :input-contract (natp x)
  :output-contract (natp (ma x))
  x)
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.12 seconds
Form:  ( DEFUN MA ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM MA-CONTRACT ...)
Time:  0.06 seconds (prove: 0.01, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.07 seconds (prove: 0.01, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS MA ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.11 seconds

Function Name : MA 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.51 seconds (prove: 0.03, print: 0.00, other: 0.48)
Prover steps counted:  51
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (< (ma (- x 1)) (ma x))
	       :with boolean
	       :hyps (natp x) (not (equal x 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM < (MA (BINARY-+ '-1 X)) (MA X))
  (((ACL2-NUMBERP X))
   ((RATIONALP (MA X)))
   ((NATP X))
   ((NATP (BINARY-+ '-1 X)))
   ((RATIONALP (MA (BINARY-+ '-1 X))))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1483 (1483 unique)
satisfied the hypotheses, and found 1483 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X 905))
 -- ((X 311))
 -- ((X 58))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 905))
                  ((X 311))
                  ((X 58))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 0 0 0 1 1 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 1 1 0 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2-NUMBERP ACL2S::X) (RATIONALP (ACL2S::MA ACL2S::X)) (NATP ACL2S::X) (NATP (BINARY-+ '-1 ACL2S::X)) (RATIONALP (ACL2S::MA (BINARY-+ '-1 ACL2S::X))) (NATP ACL2S::X) (NOT (EQUAL ACL2S::X 0))) (EQUAL (< (ACL2S::MA (- ACL2S::X 1)) (ACL2S::MA ACL2S::X)) T)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 971 (971 unique)
satisfied the hypotheses, and found 0 counterexamples and 971 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 33))
 -- ((X 3))
 -- ((X 2))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (ACL2-NUMBERP X)
              (RATIONALP (MA X))
              (NATP X)
              (NATP (BINARY-+ '-1 X))
              (RATIONALP (MA (BINARY-+ '-1 X)))
              (NATP X)
              (NOT (EQUAL X 0)))
         (EQUAL (< (MA (- X 1)) (MA X)) T))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (< (ma (- x 1)) (ma x))
	       :required-expressions
	       :with boolean
	       :hyps (not (equal x 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM < (MA (BINARY-+ '-1 X)) (MA X))
  (((ACL2-NUMBERP X))
   ((RATIONALP (MA X)))
   ((NATP X))
   ((NATP (BINARY-+ '-1 X)))
   ((RATIONALP (MA (BINARY-+ '-1 X))))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1442 (1442 unique)
satisfied the hypotheses, and found 1442 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X 634))
 -- ((X 691))
 -- ((X 3))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 634))
                  ((X 691))
                  ((X 3))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1 1 1 0 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 1 0 1 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2-NUMBERP ACL2S::X) (RATIONALP (ACL2S::MA ACL2S::X)) (NATP ACL2S::X) (NATP (BINARY-+ '-1 ACL2S::X)) (RATIONALP (ACL2S::MA (BINARY-+ '-1 ACL2S::X))) (NOT (EQUAL ACL2S::X 0))) (EQUAL (< (ACL2S::MA (- ACL2S::X 1)) (ACL2S::MA ACL2S::X)) T)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 947 (947 unique)
satisfied the hypotheses, and found 0 counterexamples and 947 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 6))
 -- ((X 4))
 -- ((X 9))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (ACL2-NUMBERP X)
              (RATIONALP (MA X))
              (NATP X)
              (NATP (BINARY-+ '-1 X))
              (RATIONALP (MA (BINARY-+ '-1 X)))
              (NOT (EQUAL X 0)))
         (EQUAL (< (MA (- X 1)) (MA X)) T))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       :required-expressions < (ma (- x 1) (ma x))
	       :with boolean
	       :hyps (natp x) (not (equal x 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1485 (1485 unique)
satisfied the hypotheses, and found 1485 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X 371))
 -- ((X 1))
 -- ((X 945))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 371))
                  ((X 1))
                  ((X 945))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(< (ACL2S::MA (- ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::MA ACL2S::X))) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 1 1 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 0 1 1 1)))) '(T T T)) 
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value ACL2::_0 is not of the expected type LIST.
While executing: READ-BACK-INNER
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       :required-expressions < (ma (- x 1)) (ma x)
	       :with boolean
	       :hyps (natp x) (not (equal x 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1454 (1454 unique)
satisfied the hypotheses, and found 1454 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X 162))
 -- ((X 6))
 -- ((X 170))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 162))
                  ((X 6))
                  ((X 170))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(< (ACL2S::MA (- ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1))) (ACL2S::MA ACL2S::X)) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 1 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 0 1 0 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::X) (NOT (EQUAL ACL2S::X 0))) (EQUAL T (< (ACL2S::MA (- ACL2S::X 1)) (ACL2S::MA ACL2S::X)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 980 (980 unique)
satisfied the hypotheses, and found 0 counterexamples and 980 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 423))
 -- ((X 2))
 -- ((X 237))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (NATP X) (NOT (EQUAL X 0)))
         (EQUAL T (< (MA (- X 1)) (MA X))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       :required-expressions < ma (- x 1) x
	       :with boolean
	       :hyps (natp x) (not (equal x 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 984 (984 unique)
satisfied the hypotheses, and found 3 counterexamples and 981 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (INTEGERP X) (<= 0 X)) (EQUAL X 0))
 -- ((X 2))
 -- ((X 89))
 -- ((X 105))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 121))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((X 807))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((X 6))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 2))
                  ((X 89))
                  ((X 105))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(< ACL2S::MA (- ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1)) ACL2S::X) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 0 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::X) (NOT (EQUAL ACL2S::X 0))) (EQUAL T (< (ACL2S::MA 0) (- ACL2S::X 1)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 966 (966 unique)
satisfied the hypotheses, and found 3 counterexamples and 963 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X 1))
 [found in : "Goal"]
(IMPLIES (AND (ALLP T)
              (NATP X)
              (NOT (EQUAL X 0)))
         (EQUAL T (< (MA 0) (+ -1 X))))

 -- ((X 1))
 [found in : "Goal'''"]
NIL
 -- ((X 1))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 279))
 -- ((X 509))
 -- ((X 711))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 1))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(< ACL2S::MA (- ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1)) ACL2S::X) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 0 1 1)))) '(T T T T)) 
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value ACL2::_1 is not of the expected type LIST.
While executing: READ-BACK-INNER
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       :required-expressions < ma (- x 1) ma x
	       :with boolean
	       :hyps (natp x) (not (equal x 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 989 (989 unique)
satisfied the hypotheses, and found 3 counterexamples and 986 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (INTEGERP X) (<= 0 X)) (EQUAL X 0))
 -- ((X 260))
 -- ((X 93))
 -- ((X 484))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 95))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((X 109))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((X 41))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 260))
                  ((X 93))
                  ((X 484))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(< ACL2S::MA (- ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1)) ACL2S::MA ACL2S::X) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 0 0 0 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 0 1 1 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::X) (NOT (EQUAL ACL2S::X 0))) (EQUAL T (< (ACL2S::MA 0) (- ACL2S::X 1)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 967 (967 unique)
satisfied the hypotheses, and found 3 counterexamples and 964 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X 1))
 [found in : "Goal"]
(IMPLIES (AND (ALLP T)
              (NATP X)
              (NOT (EQUAL X 0)))
         (EQUAL T (< (MA 0) (+ -1 X))))

 -- ((X 1))
 [found in : "Goal'''"]
NIL
 -- ((X 1))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 5))
 -- ((X 529))
 -- ((X 346))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 1))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(< ACL2S::MA (- ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1)) ACL2S::MA ACL2S::X) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 0 0 0 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 0 1 1 1 1)))) '(T T T T)) 
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value ACL2::_1 is not of the expected type LIST.
While executing: READ-BACK-INNER
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       :required-expressions (ma (- x 1)) (ma x)
	       :with boolean <
	       :hyps (natp x) (not (equal x 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 1002 (1002 unique)
satisfied the hypotheses, and found 3 counterexamples and 999 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (INTEGERP X) (<= 0 X)) (EQUAL X 0))
 -- ((X 325))
 -- ((X 277))
 -- ((X 840))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 29))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((X 137))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((X 621))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 325))
                  ((X 277))
                  ((X 840))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MA (- ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1))) (ACL2S::MA ACL2S::X)) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 0 0 1 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 0 0 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 0 1 0 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::X) (NOT (EQUAL ACL2S::X 0))) (EQUAL T (< (ACL2S::MA (- ACL2S::X 1)) (ACL2S::MA ACL2S::X)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 984 (984 unique)
satisfied the hypotheses, and found 0 counterexamples and 984 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 186))
 -- ((X 9))
 -- ((X 406))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (NATP X) (NOT (EQUAL X 0)))
         (EQUAL T (< (MA (- X 1)) (MA X))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       :required-expressions (ma (- x 1)) (ma x)
	       :with <
	       :hyps (natp x) (not (equal x 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 965 (965 unique)
satisfied the hypotheses, and found 3 counterexamples and 962 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (INTEGERP X) (<= 0 X)) (EQUAL X 0))
 -- ((X 808))
 -- ((X 242))
 -- ((X 29))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 4))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((X 410))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((X 8))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 808))
                  ((X 242))
                  ((X 29))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MA (- ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1))) (ACL2S::MA ACL2S::X)) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 0 0 1 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 1 1 1 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::X) (NOT (EQUAL ACL2S::X 0))) (EQUAL T (< (ACL2S::MA (- ACL2S::X 1)) (ACL2S::MA ACL2S::X)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 961 (961 unique)
satisfied the hypotheses, and found 0 counterexamples and 961 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 2))
 -- ((X 485))
 -- ((X 7))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (NATP X) (NOT (EQUAL X 0)))
         (EQUAL T (< (MA (- X 1)) (MA X))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (NATP X) (NOT (EQUAL X 0)))
         (EQUAL T (< (MA (- X 1)) (MA X)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::NATP-COMPOUND-RECOGNIZER)
        (:DEFINITION MA-DEFINITION-RULE)
        (:DEFINITION NATP)
        (:DEFINITION NOT)
        (:DEFINITION SYNP)
        (:EXECUTABLE-COUNTERPART <)
        (:EXECUTABLE-COUNTERPART BINARY-+)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE ACL2::|(+ x (- x))|)
        (:REWRITE ACL2::|(+ y (+ x z))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE ACL2::BUBBLE-DOWN-+-MATCH-1)
        (:REWRITE ACL2::NORMALIZE-ADDENDS)
        (:REWRITE ACL2::SIMPLIFY-SUMS-<))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.01, print: 0.00, other: 0.06)
Prover steps counted:  122

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 472 (472 unique)
satisfied the hypotheses, and found 0 counterexamples and 472 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X 8))
 -- ((X 775))
 -- ((X 6))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 fb (a b)
  :input-contract  (and (natp a) (natp b))
  :output-contract (integerp (fb a b))
  (cond ((equal a 0) 1)
        ((equal b 0) -1)
        ((<= a b) (fb (- a 1) (- b 1)))
        (t (fb b a))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.88 seconds

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value 0 is not of the expected type SYMBOL.
While executing: SYMBOL-NAME
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 lte (a b)
  :input-contract (and (natp a) (natp b))
  :output-contract (booleanp (lte a b))
  (<= a b))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.39 seconds
Form:  ( DEFUN LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LTE-CONTRACT ...)
Time:  0.06 seconds (prove: 0.01, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.06 seconds (prove: 0.01, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.12 seconds

Function Name : LTE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.78 seconds (prove: 0.05, print: 0.00, other: 0.73)
Prover steps counted:  98
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 fb (a b)
  :input-contract  (and (natp a) (natp b))
  :output-contract (integerp (fb a b))
  (cond ((equal a 0) 1)
        ((equal b 0) -1)
        ((lte a b) (fb (- a 1) (- b 1)))
        (t (fb b a))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.70 seconds
Form:  ( DEFUN FB ...)
Time:  0.22 seconds (prove: 0.20, print: 0.00, other: 0.02)
Form:  ( DEFTHM FB-CONTRACT ...)
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS FB ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.60 seconds

Function Name : FB 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.58 seconds (prove: 0.54, print: 0.00, other: 1.04)
Prover steps counted:  5157
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 mb (a b)
  :input-contract (and (natp a) (natp b))
  :output-contract (natp (mb a b))
  a)


ACL2 Error in ( DEFUN MB ...):  The formal variable B is not used in
the definition of MB but is not DECLAREd IGNOREd or IGNORABLE.  Any
formal variable not used in the body of a definition must be so declared.
To remove this requirement, see :DOC set-ignore-ok.


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.28 seconds (prove: 0.00, print: 0.00, other: 0.28)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(defunc2 mb (a b)
  :input-contract (and (natp a) (natp b))
  :output-contract (natp (mb a b))
  (declare (ignore b))
  a)


ACL2 Error in macro expansion:  Wrong number of args in macro expansion
of 
(DEFUNC2 MB (A B)
         :INPUT-CONTRACT (AND (NATP A) (NATP B))
         :OUTPUT-CONTRACT (NATP (MB A B))
         ...).
(See :DOC set-iprint to be able to see elided values in this message.)

ACL2S !>(defunc2 mb (a b)
  :input-contract (and (natp a) (natp b))
  :output-contract (natp (mb a b))
  (if (natp b) a a))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.14 seconds
Form:  ( DEFUN MB ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM MB-CONTRACT ...)
Time:  0.06 seconds (prove: 0.01, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.06 seconds (prove: 0.01, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS MB ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.11 seconds

Function Name : MB 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.57 seconds (prove: 0.02, print: 0.00, other: 0.54)
Prover steps counted:  92
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (mb a b) (mb (- a 1) (- b 1))
	       :with < <= > >=
	       :hyps (natp a) (natp b))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1500 (1500 unique)
satisfied the hypotheses, and found 1500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 409) (A 8))
 -- ((B 307) (A 2))
 -- ((B 564) (A 432))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 409) (A 8))
                  ((B 307) (A 2))
                  ((B 564) (A 432))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1 0 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 1 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1 1 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 1 1 0 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B)) (EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 329 examples across 1 subgoals, of which 329 (329 unique)
satisfied the hypotheses, and found 3 counterexamples and 326 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 646) (A 0))
 -- ((B 539) (A 0))
 -- ((B 618) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 6) (A 890))
 -- ((B 351) (A 9))
 -- ((B 392) (A 40))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 646) (A 0))
                  ((B 539) (A 0))
                  ((B 618) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1 0 0 0 0 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1 0 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 0 1 1 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1 0 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 1 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1 1 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 1 1 0 1 1)))) '(T T T T T T)) 
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value ACL2::_0 is not of the expected type LIST.
While executing: READ-BACK-INNER
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  3.40 seconds (prove: 0.00, print: 0.00, other: 3.40)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 fa (x)
  :input-contract (natp x)
  :output-contract (rationalp (fa x))
  (if (<= x 11)
      (+ x 17)
    (- 1 (fa (- x 1)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

([ A key checkpoint:

Goal'
(IMPLIES (AND (INTEGERP X) (<= 0 X))
         (RATIONALP (FA X)))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.76 seconds
Form:  ( DEFUN FA ...)
Time:  0.16 seconds (prove: 0.15, print: 0.00, other: 0.01)
Form:  ( DEFTHM FA-CONTRACT ...)
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS FA ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
(defunc2 ma (x)
  :input-contract (natp x)
  :output-contract (natp (ma x))
  x)
Elapsed Run Time: 0.50 seconds

Function Name : FA 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.54 seconds (prove: 0.50, print: 0.00, other: 1.03)
Prover steps counted:  2897
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.12 seconds
Form:  ( DEFUN MA ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM MA-CONTRACT ...)
Time:  0.07 seconds (prove: 0.01, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.07 seconds (prove: 0.01, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS MA ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.12 seconds

Function Name : MA 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.50 seconds (prove: 0.02, print: 0.00, other: 0.47)
Prover steps counted:  51
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       :required-expressions (ma (- x 1)) (ma x)
	       :with <
	       :hyps (natp x) (not (equal x 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1483 (1483 unique)
satisfied the hypotheses, and found 1483 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X 905))
 -- ((X 311))
 -- ((X 58))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 905))
                  ((X 311))
                  ((X 58))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MA (- ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1))) (ACL2S::MA ACL2S::X)) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 0 0 0 1 1 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 1 1 0 0 1))) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::X) (NOT (EQUAL ACL2S::X 0))) (EQUAL T (< (ACL2S::MA (- ACL2S::X 1)) (ACL2S::MA ACL2S::X)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 971 (971 unique)
satisfied the hypotheses, and found 0 counterexamples and 971 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 33))
 -- ((X 3))
 -- ((X 2))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (NATP X) (NOT (EQUAL X 0)))
         (EQUAL T (< (MA (- X 1)) (MA X))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (NATP X) (NOT (EQUAL X 0)))
         (EQUAL T (< (MA (- X 1)) (MA X)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::NATP-COMPOUND-RECOGNIZER)
        (:DEFINITION MA-DEFINITION-RULE)
        (:DEFINITION NATP)
        (:DEFINITION NOT)
        (:DEFINITION SYNP)
        (:EXECUTABLE-COUNTERPART <)
        (:EXECUTABLE-COUNTERPART BINARY-+)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE ACL2::|(+ x (- x))|)
        (:REWRITE ACL2::|(+ y (+ x z))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE ACL2::BUBBLE-DOWN-+-MATCH-1)
        (:REWRITE ACL2::NORMALIZE-ADDENDS)
        (:REWRITE ACL2::SIMPLIFY-SUMS-<))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.01, print: 0.00, other: 0.06)
Prover steps counted:  122

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 482 (482 unique)
satisfied the hypotheses, and found 0 counterexamples and 482 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X 634))
 -- ((X 691))
 -- ((X 3))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (implies (natp x) (rationalp (fa x))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::NATP-COMPOUND-RECOGNIZER)
        (:TYPE-PRESCRIPTION FA-CONTRACT))
Warnings:  Invariant-risk
Time:  0.07 seconds (prove: 0.03, print: 0.00, other: 0.04)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 472 (472 unique)
satisfied the hypotheses, and found 0 counterexamples and 472 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X 3))
 -- ((X 1))
 -- ((X 118))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 lte (a b)
  :input-contract (and (natp a) (natp b))
  :output-contract (booleanp (lte a b))
  (<= a b))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.40 seconds
Form:  ( DEFUN LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LTE-CONTRACT ...)
Time:  0.07 seconds (prove: 0.02, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.07 seconds (prove: 0.02, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.12 seconds

Function Name : LTE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.81 seconds (prove: 0.06, print: 0.00, other: 0.74)
Prover steps counted:  98
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 fb (a b)
  :input-contract  (and (natp a) (natp b))
  :output-contract (integerp (fb a b))
  (cond ((equal a 0) 1)
        ((equal b 0) -1)
        ((lte a b) (fb (- a 1) (- b 1)))
        (t (fb b a))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.73 seconds
Form:  ( DEFUN FB ...)
Time:  0.24 seconds (prove: 0.22, print: 0.00, other: 0.02)
Form:  ( DEFTHM FB-CONTRACT ...)
Time:  0.11 seconds (prove: 0.06, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.11 seconds (prove: 0.06, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS FB ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.62 seconds

Function Name : FB 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.65 seconds (prove: 0.55, print: 0.00, other: 1.11)
Prover steps counted:  5157
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 mb (a b)
  :input-contract (and (natp a) (natp b))
  :output-contract (natp (mb a b))
  (if (natp b) a a))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.15 seconds
Form:  ( DEFUN MB ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM MB-CONTRACT ...)
Time:  0.07 seconds (prove: 0.01, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.07 seconds (prove: 0.01, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS MB ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.12 seconds

Function Name : MB 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.56 seconds (prove: 0.03, print: 0.00, other: 0.53)
Prover steps counted:  92
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (mb a b) (mb (- a 1) (- b 1))
	       :with < <= > >=
	       :hyps (natp a) (natp b))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1500 (1500 unique)
satisfied the hypotheses, and found 1500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 724) (A 60))
 -- ((B 91) (A 828))
 -- ((B 3) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 724) (A 60))
                  ((B 91) (A 828))
                  ((B 3) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1 0 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1 0 0 1 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B)) (EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 230 examples across 1 subgoals, of which 229 (229 unique)
satisfied the hypotheses, and found 3 counterexamples and 226 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 6) (A 0))
 -- ((B 71) (A 0))
 -- ((B 0) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 428) (A 20))
 -- ((B 0) (A 3))
 -- ((B 512) (A 614))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 6) (A 0))
                  ((B 71) (A 0))
                  ((B 0) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1 0 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1 0 0 1 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B)) (EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 106 examples across 1 subgoals, of which 106 (106 unique)
satisfied the hypotheses, and found 3 counterexamples and 103 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 849) (A 0))
 -- ((B 925) (A 0))
 -- ((B 782) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 0) (A 456))
 -- ((B 9) (A 270))
 -- ((B 796) (A 836))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 849) (A 0))
                  ((B 925) (A 0))
                  ((B 782) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 0 1 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1 0 0 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 0 0 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1 0 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1 0 0 1 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B)) (EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 89 examples across 1 subgoals, of which 89 (89 unique) satisfied
the hypotheses, and found 3 counterexamples and 86 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 5) (A 0))
 -- ((B 6) (A 0))
 -- ((B 717) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 9) (A 8))
 -- ((B 9) (A 3))
 -- ((B 5) (A 2))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 5) (A 0))
                  ((B 6) (A 0))
                  ((B 717) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 0 0 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 0 1 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1 0 0 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 0 0 0 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1 0 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1 0 0 1 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T T T T)) 
"form tested" 
 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 104 examples across 1 subgoals, of which 104 (104 unique)
satisfied the hypotheses, and found 3 counterexamples and 101 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 915) (A 0))
 -- ((B 2) (A 0))
 -- ((B 975) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 7) (A 104))
 -- ((B 9) (A 1))
 -- ((B 908) (A 462))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 915) (A 0))
                  ((B 2) (A 0))
                  ((B 975) (A 0))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(guard-obligation t nil nil nil 'top-level state)


ACL2 Error in TOP-LEVEL:  GUARD-OBLIGATION takes 5 arguments but in
the call (GUARD-OBLIGATION T NIL NIL NIL 'TOP-LEVEL STATE) it is given
6 arguments.  The formal parameters list for GUARD-OBLIGATION is 
(ACL2::X ACL2::RRP ACL2::GUARD-DEBUG CTX STATE).

ACL2S !>(guard-obligation t nil nil nil nil 'top-level state)


ACL2 Error in TOP-LEVEL:  GUARD-OBLIGATION takes 5 arguments but in
the call (GUARD-OBLIGATION T NIL NIL NIL NIL 'TOP-LEVEL ...) it is
given 7 arguments.  The formal parameters list for GUARD-OBLIGATION
is (ACL2::X ACL2::RRP ACL2::GUARD-DEBUG CTX STATE).
(See :DOC set-iprint to be able to see elided values in this message.)

ACL2S !>(guard-obligation t nil nil 'top-level state)
(NIL ((:TERM QUOTE T) NIL))
ACL2S !>(suggest-lemma t
	       :required-expressions (mb a b) (mb (- a 1) (- b 1))
	       :with < <= > >=
	       :hyps (natp a) (natp b))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 53 examples across 1 subgoals, of which 53 (53 unique) satisfied
the hypotheses, and found 3 counterexamples and 50 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 113) (A 0))
 -- ((B 2) (A 0))
 -- ((B 8) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 266) (A 48))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((B 685) (A 58))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((B 323) (A 52))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 113) (A 0))
                  ((B 2) (A 0))
                  ((B 8) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B)) (EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 139 examples across 1 subgoals, of which 139 (139 unique)
satisfied the hypotheses, and found 3 counterexamples and 136 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 1) (A 0))
 -- ((B 9) (A 0))
 -- ((B 867) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 96) (A 25))
 -- ((B 8) (A 417))
 -- ((B 47) (A 4))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 1) (A 0))
                  ((B 9) (A 0))
                  ((B 867) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 1 1 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B)) (EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 30 examples across 1 subgoals, of which 30 (30 unique) satisfied
the hypotheses, and found 3 counterexamples and 27 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 190) (A 0))
 -- ((B 29) (A 0))
 -- ((B 314) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 15) (A 922))
 -- ((B 605) (A 292))
 -- ((B 3) (A 2))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 190) (A 0))
                  ((B 29) (A 0))
                  ((B 314) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1 1 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 1 1 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B)) (EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 76 examples across 1 subgoals, of which 76 (76 unique) satisfied
the hypotheses, and found 3 counterexamples and 73 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 34) (A 0))
 -- ((B 7) (A 0))
 -- ((B 488) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 4) (A 9))
 -- ((B 238) (A 804))
 -- ((B 83) (A 795))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 34) (A 0))
                  ((B 7) (A 0))
                  ((B 488) (A 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1 1 1 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 1 1 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0))))) '(T T T T T T T T T T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B)) (EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 64 examples across 1 subgoals, of which 64 (64 unique) satisfied
the hypotheses, and found 3 counterexamples and 61 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 723) (A 0))
 -- ((B 23) (A 0))
 -- ((B 2) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 4) (A 438))
 -- ((B 383) (A 980))
 -- ((B 177) (A 4))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 723) (A 0))
                  ((B 23) (A 0))
                  ((B 2) (A 0))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")
ACL2S !>(test? (IMPLIES (AND  (NATP ACL2S::A) (NATP ACL2S::B))
		(EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B)
			    (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 85 examples across 1 subgoals, of which 85 (85 unique) satisfied
the hypotheses, and found 3 counterexamples and 82 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 42) (A 0))
 -- ((B 4) (A 0))
 -- ((B 8) (A 0))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 93) (A 5))
 -- ((B 782) (A 817))
 -- ((B 92) (A 16))

Test? found a counterexample.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (mb a b) (mb (- a 1) (- b 1))
	       :with < <= > >=
	       :hyps (natp a) (natp b) (not (equal a 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1500 (1500 unique)
satisfied the hypotheses, and found 1500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 5) (A 328))
 -- ((B 16) (A 64))
 -- ((B 45) (A 944))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 5) (A 328))
                  ((B 16) (A 64))
                  ((B 45) (A 944))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 0 1 0 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 0 0 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 1 1 0 1 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B) (NOT (EQUAL ACL2S::A 0))) (EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:REWRITE ACL2::DEFAULT-LESS-THAN-1))


([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (INTEGERP A)
              (<= 0 A)
              (INTEGERP B)
              (<= 0 B)
              (NOT (EQUAL A 0))
              (ACL2-NUMBERP (MB (+ -1 A) (+ -1 B))))
         (< (MB (+ -1 A) (+ -1 B)) A))

*1 (Subgoal 2) is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1490 (1490 unique)
satisfied the hypotheses, and found 0 counterexamples and 1490 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 66) (A 316))
 -- ((B 677) (A 835))
 -- ((B 4) (A 56))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (NATP A)
		   (NATP B)
		   (NOT (EQUAL A 0)))
	      (EQUAL T (> (MB A B) (MB (- A 1) (- B 1))))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:REWRITE ACL2::DEFAULT-LESS-THAN-1))

Subgoal 2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (INTEGERP A)
              (<= 0 A)
              (INTEGERP B)
              (<= 0 B)
              (NOT (EQUAL A 0))
              (ACL2-NUMBERP (MB (+ -1 A) (+ -1 B))))
         (< (MB (+ -1 A) (+ -1 B)) A))

*1 (Subgoal 2) is pushed for proof by induction.

])
Subgoal 1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


No induction schemes are suggested by *1.  Consequently, the proof
attempt has failed.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::NATP-COMPOUND-RECOGNIZER)
        (:DEFINITION MB-DEFINITION-RULE)
        (:DEFINITION NATP)
        (:DEFINITION NOT)
        (:DEFINITION SYNP)
        (:EXECUTABLE-COUNTERPART TAU-SYSTEM)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE ACL2::DEFAULT-LESS-THAN-1))
Splitter rules (see :DOC splitter):
  if-intro: ((:REWRITE ACL2::DEFAULT-LESS-THAN-1))
Warnings:  Invariant-risk
Time:  1.13 seconds (prove: 1.00, print: 0.00, other: 0.12)
Prover steps counted:  846

---
The key checkpoint goal, below, may help you to debug this failure.
See :DOC failure and see :DOC set-checkpoint-summary-limit.
---

*** Key checkpoint at the top level: ***

Subgoal 2
(IMPLIES (AND (INTEGERP A)
              (<= 0 A)
              (INTEGERP B)
              (<= 0 B)
              (NOT (EQUAL A 0))
              (ACL2-NUMBERP (MB (+ -1 A) (+ -1 B))))
         (< (MB (+ -1 A) (+ -1 B)) A))

ACL2 Error in ( THM ...):  See :DOC failure.

******** FAILED ********

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 992 (992 unique)
satisfied the hypotheses, and found 0 counterexamples and 992 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((B 37) (A 41))
 -- ((B 385) (A 281))
 -- ((B 620) (A 951))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (NATP A)
		   (NATP B)
		   (NOT (EQUAL A 0))
		   (NOT (EQUAL B 0)))
	      (EQUAL T (> (MB A B) (MB (- A 1) (- B 1))))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::NATP-COMPOUND-RECOGNIZER)
        (:DEFINITION MB-DEFINITION-RULE)
        (:DEFINITION NATP)
        (:DEFINITION NOT)
        (:DEFINITION SYNP)
        (:EXECUTABLE-COUNTERPART <)
        (:EXECUTABLE-COUNTERPART BINARY-+)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE ACL2::|(+ x (- x))|)
        (:REWRITE ACL2::|(+ y (+ x z))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE ACL2::BUBBLE-DOWN-+-MATCH-1)
        (:REWRITE ACL2::NORMALIZE-ADDENDS)
        (:REWRITE ACL2::SIMPLIFY-SUMS-<))
Warnings:  Invariant-risk
Time:  0.11 seconds (prove: 0.02, print: 0.00, other: 0.09)
Prover steps counted:  188

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 500 (500 unique)
satisfied the hypotheses, and found 0 counterexamples and 500 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((B 981) (A 76))
 -- ((B 90) (A 179))
 -- ((B 7) (A 20))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (mb a b) (mb (- a 1) (- b 1))
	       :with < <= > >=
	       :hyps (natp a) (natp b)
	       (not (equal a 0)) (not (equal b 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1500 (1500 unique)
satisfied the hypotheses, and found 1500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((B 128) (A 531))
 -- ((B 7) (A 9))
 -- ((B 6) (A 99))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 128) (A 531))
                  ((B 7) (A 9))
                  ((B 6) (A 99))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1)) (- ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1)))) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 0 0 0 0 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 1 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B) (NOT (EQUAL ACL2S::A 0)) (NOT (EQUAL ACL2S::B 0))) (EQUAL T (> (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB (- ACL2S::A 1) (- ACL2S::B 1))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 1000 (1000 unique)
satisfied the hypotheses, and found 0 counterexamples and 1000 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 933) (A 45))
 -- ((B 3) (A 983))
 -- ((B 220) (A 956))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (thm (IMPLIES (AND (NATP A)
              (NATP B)
              (NOT (EQUAL A 0))
              (NOT (EQUAL B 0)))
         (EQUAL T (> (MB A B) (MB (- A 1) (- B 1))))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E04726>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E04726>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (AND (NATP A)
              (NATP B)
              (NOT (EQUAL A 0))
              (NOT (EQUAL B 0)))
         (EQUAL T (> (MB A B) (MB (- A 1) (- B 1))))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::NATP-COMPOUND-RECOGNIZER)
        (:DEFINITION MB-DEFINITION-RULE)
        (:DEFINITION NATP)
        (:DEFINITION NOT)
        (:DEFINITION SYNP)
        (:EXECUTABLE-COUNTERPART <)
        (:EXECUTABLE-COUNTERPART BINARY-+)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE ACL2::|(+ x (- x))|)
        (:REWRITE ACL2::|(+ y (+ x z))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE ACL2::BUBBLE-DOWN-+-MATCH-1)
        (:REWRITE ACL2::NORMALIZE-ADDENDS)
        (:REWRITE ACL2::SIMPLIFY-SUMS-<))
Warnings:  Invariant-risk
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.07)
Prover steps counted:  188

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 500 (500 unique)
satisfied the hypotheses, and found 0 counterexamples and 500 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((B 761) (A 35))
 -- ((B 29) (A 692))
 -- ((B 412) (A 64))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (mb a b) (mb b a)
	       :with < <= > >=
	       :hyps (natp a) (natp b)
	       (not (equal a 0)) (not (equal b 0)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 1003 (1003 unique)
satisfied the hypotheses, and found 3 counterexamples and 1000 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (AND (INTEGERP A)
              (<= 0 A)
              (INTEGERP B)
              (<= 0 B)
              (NOT (EQUAL A 0)))
         (EQUAL B 0))

 -- ((B 230) (A 614))
 -- ((B 535) (A 103))
 -- ((B 104) (A 10))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 77) (A 10))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((B 48) (A 18))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((B 49) (A 912))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((B 230) (A 614))
                  ((B 535) (A 103))
                  ((B 104) (A 10))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB ACL2S::B ACL2S::A)) ACL2S::Q '(((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 1 1 0 0 1 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 1 1 0 0 1 1 0 0 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 1 0 0 0 0 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 0 1 1))) ((ACL2S::B (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 1 1)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0) 0 1 0 1)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (NATP ACL2S::A) (NATP ACL2S::B) (NOT (EQUAL ACL2S::A 0)) (NOT (EQUAL ACL2S::B 0))) (EQUAL T (<= (ACL2S::MB ACL2S::A ACL2S::B) (ACL2S::MB ACL2S::A (ACL2S::MB ACL2S::B ACL2S::A))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 1000 (1000 unique)
satisfied the hypotheses, and found 0 counterexamples and 1000 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((B 883) (A 136))
 -- ((B 577) (A 869))
 -- ((B 169) (A 8))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (NATP A)
              (NATP B)
              (NOT (EQUAL A 0))
              (NOT (EQUAL B 0)))
         (EQUAL T (<= (MB A B) (MB A (MB B A)))))(thm (IMPLIES (AND (NATP A)
		   (NATP B)
		   (NOT (EQUAL A 0))
		   (NOT (EQUAL B 0)))
	      (EQUAL T (<= (MB A B) (MB A (MB B A))))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E04726>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E04726>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (AND (NATP A)
		   (NATP B)
		   (NOT (EQUAL A 0))
		   (NOT (EQUAL B 0)))
	      (EQUAL T (<= (MB A B) (MB A (MB B A))))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::NATP-COMPOUND-RECOGNIZER)
        (:DEFINITION MB-DEFINITION-RULE)
        (:DEFINITION NATP)
        (:DEFINITION NOT)
        (:DEFINITION SYNP)
        (:EXECUTABLE-COUNTERPART <)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:EXECUTABLE-COUNTERPART NOT)
        (:REWRITE ACL2::|(+ x (- x))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE ACL2::BUBBLE-DOWN-+-MATCH-1)
        (:REWRITE ACL2::NORMALIZE-ADDENDS)
        (:REWRITE ACL2::SIMPLIFY-SUMS-<))
Warnings:  Invariant-risk
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.07)
Prover steps counted:  181

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 500 (500 unique)
satisfied the hypotheses, and found 0 counterexamples and 500 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((B 70) (A 839))
 -- ((B 69) (A 920))
 -- ((B 8) (A 25))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 lor (listof rational))
 Predicate events...
Form:  ( DEFUN LORP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LORP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LORP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LORP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOR ...)
Form:  ( DEFTHM LOR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOR-BUILTIN ...)
Form:  ( DEFUN NTH-LOR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.92 seconds (prove: 0.59, print: 0.00, other: 0.33)
 Registering type...
Form:  ( DEFUN NTH-LOR ...)
Form:  ( ENCAPSULATE (((NTH-LOR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOR NTH-LOR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOR/ACC NTH-LOR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.96 seconds (prove: 0.59, print: 0.00, other: 0.37)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.23 seconds (prove: 0.59, print: 0.00, other: 0.64)
Prover steps counted:  5385
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (lorp (insert a x))
  (if (consp x)
      (if (<= a (car x))
          (cons a x)
        (cons (car x) (insert a (cdr x))))
    (cons a nil)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.36 seconds
Form:  ( DEFUN INSERT ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM INSERT-CONTRACT ...)
Time:  0.10 seconds (prove: 0.06, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.06, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS INSERT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.18 seconds

Function Name : INSERT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.84 seconds (prove: 0.16, print: 0.00, other: 0.68)
Prover steps counted:  1835
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 m-insert (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (natp (m-insert a x))
  (len x))


ACL2 Error in ( DEFUN M-INSERT ...):  The formal variable A is not
used in the definition of M-INSERT but is not DECLAREd IGNOREd or IGNORABLE.
Any formal variable not used in the body of a definition must be so
declared.  To remove this requirement, see :DOC set-ignore-ok.


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.28 seconds (prove: 0.00, print: 0.00, other: 0.28)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(defunc2 m-insert (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (natp (m-insert a x))
  (if a (len x) (len x)))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.12 seconds
Form:  ( DEFUN M-INSERT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM M-INSERT-CONTRACT ...)
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS M-INSERT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.14 seconds

Function Name : M-INSERT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.56 seconds (prove: 0.05, print: 0.00, other: 0.51)
Prover steps counted:  456
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (m-insert a x) (m-insert a (cdr x))
	       :with < >
	       :hyps (rationalp a) (lorp x) (consp x) (> a (car x)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1008 examples across 3 subgoals, of which 296 (296 unique)
satisfied the hypotheses, and found 293 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X '(0 -1/2)) (A 2/5))
 -- ((X '(-4/7)) (A -3/14))
 -- ((X '(-2/7 3 -1/2)) (A 6/11))

Cases in which the conjecture is true include:
 [found in : "Goal''"]
 -- ((X '(2/5)) (A -114/79))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((X '(3/22)) (A -30/113))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((X '(0)) (A -1/10))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X '(0 -1/2)) (A 2/5))
                  ((X '(-4/7)) (A -3/14))
                  ((X '(-2/7 3 -1/2)) (A 6/11))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::M-INSERT ACL2S::A ACL2S::X) (ACL2S::M-INSERT ACL2S::A (CDR ACL2S::X))) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1)))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1)))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) NIL)))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (RATIONALP ACL2S::A) (ACL2S::LORP ACL2S::X) (CONSP ACL2S::X) (> ACL2S::A (CAR ACL2S::X))) (EQUAL T (> (ACL2S::M-INSERT ACL2S::A ACL2S::X) (ACL2S::M-INSERT ACL2S::A (CDR ACL2S::X))))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 282 (282 unique)
satisfied the hypotheses, and found 0 counterexamples and 282 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X '(0)) (A 12/5))
 -- ((X '(-10/27 -1/4)) (A 3))
 -- ((X '(-1 0)) (A 4/7))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (RATIONALP A)
              (LORP X)
              (CONSP X)
              (> A (CAR X)))
         (EQUAL T
                (> (M-INSERT A X)
                   (M-INSERT A (CDR X))))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LORP-IMPLIES-TLP)
        (:DEFINITION LEN)
        (:DEFINITION LORP)
        (:DEFINITION M-INSERT-DEFINITION-RULE)
        (:DEFINITION SYNP)
        (:EXECUTABLE-COUNTERPART <)
        (:EXECUTABLE-COUNTERPART BINARY-+)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE ACL2::|(+ x (- x))|)
        (:REWRITE ACL2::|(+ y (+ x z))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE ACL2::BUBBLE-DOWN-+-MATCH-1)
        (:REWRITE ACL2::NORMALIZE-ADDENDS)
        (:REWRITE ACL2::SIMPLIFY-SUMS-<)
        (:TYPE-PRESCRIPTION LEN))
Warnings:  Invariant-risk
Time:  0.10 seconds (prove: 0.03, print: 0.00, other: 0.07)
Prover steps counted:  369

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 129 (129 unique)
satisfied the hypotheses, and found 0 counterexamples and 129 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(-1/2)) (A 3/10))
 -- ((X '(-1)) (A 1/3))
 -- ((X '(5/52 1)) (A 3/23))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 isort (x)
  :input-contract (lorp x)
  :output-contract (lorp (isort x))
  (if (endp x)
      ()
    (insert (car x) (isort (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ISORT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY ISORT))
             '(CAR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

([ A key checkpoint:

Goal''
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY ISORT))
                          '(INSERT (CAR X) (ISORT (CDR X))))
              (RATIONALP (CAR X))
              (LORP (CDR X))
              (CONSP X))
         (LORP (ISORT (CDR X))))

*1 (Goal'4') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY ISORT))
                          '(INSERT (CAR X) (ISORT (CDR X))))
              (RATIONALP X1)
              (LORP X2))
         (LORP (ISORT X2))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.59 seconds
Form:  ( DEFUN ISORT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ISORT-CONTRACT ...)
Time:  0.08 seconds (prove: 0.04, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.04, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS ISORT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.15 seconds

Function Name : ISORT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.06 seconds (prove: 0.24, print: 0.00, other: 0.82)
Prover steps counted:  3520
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 m-isort (x)
  :input-contract (lorp x)
  :output-contract (natp (m-isort x))
  (len x))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.10 seconds
Form:  ( DEFUN M-ISORT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM M-ISORT-CONTRACT ...)
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS M-ISORT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : M-ISORT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.53 seconds (prove: 0.05, print: 0.00, other: 0.48)
Prover steps counted:  356
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :with < >
	       :required-expressions (m-isort (cdr x))
	       :hyps (lorp x) (consp x))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 587 (587 unique)
satisfied the hypotheses, and found 586 counterexamples and 1 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X '(0)))
 -- ((X '(-1 2/3 0 -1)))
 -- ((X '(3/37)))

Cases in which the conjecture is true include:
 [found in : "Goal''"]
 -- ((X NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X '(0)))
                  ((X '(-1 2/3 0 -1)))
                  ((X '(3/37)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::M-ISORT (CDR ACL2S::X))) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 0 1)) NIL)))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LORP ACL2S::X) (CONSP ACL2S::X)) (EQUAL T (< (ACL2S::M-ISORT (CDR ACL2S::X)) (ACL2S::M-ISORT ACL2S::X)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 453 (453 unique)
satisfied the hypotheses, and found 0 counterexamples and 453 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X '(1/2)))
 -- ((X '(1/5 0 0)))
 -- ((X '(-1/4)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (thm (IMPLIES (AND (LORP X) (CONSP X))
         (EQUAL T (< (M-ISORT (CDR X)) (M-ISORT X)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E04726>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14E04726>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (AND (LORP X) (CONSP X))
         (EQUAL T (< (M-ISORT (CDR X)) (M-ISORT X)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LORP-IMPLIES-TLP)
        (:DEFINITION LEN)
        (:DEFINITION LORP)
        (:DEFINITION M-ISORT-DEFINITION-RULE)
        (:DEFINITION SYNP)
        (:EXECUTABLE-COUNTERPART <)
        (:EXECUTABLE-COUNTERPART BINARY-+)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE ACL2::|(+ x (- x))|)
        (:REWRITE ACL2::|(+ y (+ x z))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE ACL2::BUBBLE-DOWN-+-MATCH-1)
        (:REWRITE ACL2::NORMALIZE-ADDENDS)
        (:REWRITE ACL2::SIMPLIFY-SUMS-<)
        (:TYPE-PRESCRIPTION LEN))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.05)
Prover steps counted:  298

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 214 (214 unique)
satisfied the hypotheses, and found 0 counterexamples and 214 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(0 0)))
 -- ((X '(-1 0)))
 -- ((X '(-11/25 1/2 0)))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (isort x)
	       :with lorp booleanp
	       :hyps (lorp x))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 905 (905 unique)
satisfied the hypotheses, and found 905 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X '(-1/2 -1/2 0)))
 -- ((X '(-11/14)))
 -- ((X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X '(-1/2 -1/2 0)))
                  ((X '(-11/14)))
                  ((X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ISORT ACL2S::X)) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1)) NIL))) ((ACL2S::X NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LORP ACL2S::X)) (EQUAL T (ACL2S::LORP (ACL2S::ISORT ACL2S::X)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 673 (673 unique)
satisfied the hypotheses, and found 0 counterexamples and 673 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X '(0)))
 -- ((X '(11/61 0)))
 -- ((X NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (LORP X)
         (EQUAL T (LORP (ISORT X)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LORP-IMPLIES-TLP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:TYPE-PRESCRIPTION ISORT-CONTRACT)
        (:TYPE-PRESCRIPTION LORP))
Warnings:  Invariant-risk
Time:  0.05 seconds (prove: 0.02, print: 0.00, other: 0.03)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 246 (246 unique)
satisfied the hypotheses, and found 0 counterexamples and 246 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(-4)))
 -- ((X '(-1/3 0)))
 -- ((X NIL))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ cp ~/Desktop/ACL2s-practice/hw9-2.lisp 
usage: cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file target_file
       cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file ... target_directory
bash-3.2$ cp ~/Desktop/ACL2s-practice/hw9-2.lisp homework9.lisp
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defdata2 lor (listof rational))


ACL2 Error in TOP-LEVEL:  The symbol DEFDATA2 (in package "ACL2S")
has neither a function nor macro definition in ACL2.  Please define
it.  See :DOC near-misses.  Note:  this error occurred in the context
(DEFDATA2 LOR (LISTOF RATIONAL)).

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.79 seconds (prove: 0.00, print: 0.00, other: 2.79)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defdata2 lor (listof rational))
 Predicate events...
Form:  ( DEFUN LORP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LORP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LORP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LORP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOR ...)
Form:  ( DEFTHM LOR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOR-BUILTIN ...)
Form:  ( DEFUN NTH-LOR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.94 seconds (prove: 0.60, print: 0.00, other: 0.34)
 Registering type...
Form:  ( DEFUN NTH-LOR ...)
Form:  ( ENCAPSULATE (((NTH-LOR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOR NTH-LOR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOR/ACC NTH-LOR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.98 seconds (prove: 0.60, print: 0.00, other: 0.37)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.24 seconds (prove: 0.60, print: 0.00, other: 0.64)
Prover steps counted:  5385
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 lte (a b)
  :input-contract (and (natp a) (natp b))
  :output-contract (booleanp (lte a b))
  (<= a b))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.46 seconds
Form:  ( DEFUN LTE ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LTE-CONTRACT ...)
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.08)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.08)
Form:  ( VERIFY-GUARDS LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.16 seconds

Function Name : LTE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.91 seconds (prove: 0.06, print: 0.00, other: 0.85)
Prover steps counted:  98
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (lorp (insert a x))
  (cond ((endp x) (cons a nil))
        ((lte a (car x)) (cons a x))
        (t (cons (car x) (insert a (cdr x))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


**Summary of Cgen/testing**
We tested 10 examples across 1 subgoals, of which 5 (5 unique) satisfied
the hypotheses, and found 3 counterexamples and 2 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A 17/3) (X '(0)))
 -- ((A 221/1868) (X '(7/10)))
 -- ((A 27/23) (X '(1/5 0 0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A 2) (X '(0 0)))
 -- ((A 0) (X '(0 0)))

Test? found a counterexample.
Body contract falsified in: 
 -- (EXTRA-INFO '(:GUARD (:BODY INSERT)) '(LTE A (CAR X)))

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.56 seconds (prove: 0.04, print: 0.00, other: 0.52)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:u
           3:x(DEFDATA2 LOR (LISTOF RATIONAL))
ACL2S !>:u
   d       2:x(INCLUDE-BOOK "top"
                            :UNCERTIFIED-OKP ...)
ACL2S !>(defunc2 lte (a b)
  :input-contract (and (rationalp a) (rationalp b))
  :output-contract (booleanp (lte a b))
  (<= a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.14 seconds
Form:  ( DEFUN LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LTE-CONTRACT ...)
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : LTE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.56 seconds (prove: 0.04, print: 0.00, other: 0.52)
Prover steps counted:  112
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (lorp (insert a x))
  (cond ((endp x) (cons a nil))
        ((lte a (car x)) (cons a x))
        (t (cons (car x) (insert a (cdr x))))))


ACL2 Error in ( DEFUN INSERT ...):  The symbol LORP (in package "ACL2S")
has neither a function nor macro definition in ACL2.  Please define
it.  See :DOC near-misses.  Note:  this error occurred in the context
(LORP X).


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.28 seconds (prove: 0.00, print: 0.00, other: 0.28)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(defdata2 lor (listof rational))
 Predicate events...
Form:  ( DEFUN LORP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LORP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LORP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LORP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOR ...)
Form:  ( DEFTHM LOR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOR-BUILTIN ...)
Form:  ( DEFUN NTH-LOR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.96 seconds (prove: 0.63, print: 0.00, other: 0.34)
 Registering type...
Form:  ( DEFUN NTH-LOR ...)
Form:  ( ENCAPSULATE (((NTH-LOR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOR NTH-LOR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOR/ACC NTH-LOR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.00 seconds (prove: 0.63, print: 0.00, other: 0.37)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.29 seconds (prove: 0.63, print: 0.00, other: 0.66)
Prover steps counted:  5385
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (lorp (insert a x))
  (cond ((endp x) (cons a nil))
        ((lte a (car x)) (cons a x))
        (t (cons (car x) (insert a (cdr x))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (NOT (LTE A (CAR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.65 seconds
Form:  ( DEFUN INSERT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM INSERT-CONTRACT ...)
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.07)
Form:  ( VERIFY-GUARDS INSERT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.19 seconds

Function Name : INSERT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.15 seconds (prove: 0.22, print: 0.00, other: 0.93)
Prover steps counted:  1722
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 isort (x)
  :input-contract (lorp x)
  :output-contract (lorp (isort x))
  (if (endp x)
      ()
    (insert (car x) (isort (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ISORT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY ISORT))
             '(CAR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

([ A key checkpoint:

Goal''
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY ISORT))
                          '(INSERT (CAR X) (ISORT (CDR X))))
              (RATIONALP (CAR X))
              (LORP (CDR X))
              (CONSP X))
         (LORP (ISORT (CDR X))))

*1 (Goal'4') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY ISORT))
                          '(INSERT (CAR X) (ISORT (CDR X))))
              (RATIONALP X1)
              (LORP X2))
         (LORP (ISORT X2))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.61 seconds
Form:  ( DEFUN ISORT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ISORT-CONTRACT ...)
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS ISORT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.16 seconds

Function Name : ISORT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.07 seconds (prove: 0.24, print: 0.00, other: 0.82)
Prover steps counted:  3486
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc less (x lst)
  :input-contract (and (rationalp x) (lorp lst))
  :output-contract (lorp (less x lst))
  (cond ((endp lst) ())
        ((< (car lst) x)
         (cons (car lst) (less x (cdr lst))))
        (t (less x (cdr lst)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LST))
 (EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (< (CAR LST) X)
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (< (CAR LST) X))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.84 seconds

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value 0 is not of the expected type SYMBOL.
While executing: SYMBOL-NAME
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 lt (a b)
  :input-contract (and (rationalp a) (rationalp b))
  :output-contract (booleanp (lte a b))
  (< a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.14 seconds
Form:  ( DEFUN LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LT-CONTRACT ...)
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.07)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.07)
Form:  ( VERIFY-GUARDS LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.14 seconds

Function Name : LT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.59 seconds (prove: 0.04, print: 0.00, other: 0.55)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc less (x lst)
  :input-contract (and (rationalp x) (lorp lst))
  :output-contract (lorp (less x lst))
  (cond ((endp lst) ())
        ((lt (car lst) x)
         (cons (car lst) (less x (cdr lst))))
        (t (less x (cdr lst)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LST))
 (EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (LT (CAR LST) X)
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (LT (CAR LST) X))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.85 seconds
Form:  ( DEFUN LESS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LESS-CONTRACT ...)
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS LESS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : LESS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 notless (x lst)
  :input-contract (and (rationalp x) (lorp lst))
  :output-contract (lorp (notless x lst))
  (cond ((endp lst) nil)
        ((lte x (car lst))
         (cons (car lst) (notless x (cdr lst))))
        (t (notless x (cdr lst)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CDR LST))
 (EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (LTE X (CAR LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CDR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (LTE X (CAR LST)))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.88 seconds
Form:  ( DEFUN NOTLESS ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM NOTLESS-CONTRACT ...)
Time:  0.14 seconds (prove: 0.08, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.14 seconds (prove: 0.08, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS NOTLESS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.21 seconds

Function Name : NOTLESS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.41 seconds (prove: 0.29, print: 0.00, other: 1.13)
Prover steps counted:  2098
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 qsort (x)
  :input-contract (lorp x)
  :output-contract (lorp (qsort x))
  (if (endp x) 
      ()
    (append (qsort (less (car x) (cdr x)))
            (append (list (car x))
                    (qsort (notless (car x) (cdr x)))))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol LESS
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>:u
   d       8:x(DEFUNC LESS (X LST) ...)
ACL2S !>:u
   d       7:x(DEFUNC2 LT (A B) ...)
ACL2S !>(defunc2 less (x lst)
  :input-contract (and (rationalp x) (lorp lst))
  :output-contract (lorp (less x lst))
  (cond ((endp lst) ())
        ((lt (car lst) x)
         (cons (car lst) (less x (cdr lst))))
        (t (less x (cdr lst)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LST))
 (EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (LT (CAR LST) X)
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (LT (CAR LST) X))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.79 seconds
Form:  ( DEFUN LESS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LESS-CONTRACT ...)
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS LESS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : LESS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.33 seconds (prove: 0.26, print: 0.00, other: 1.06)
Prover steps counted:  2080
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 notless (x lst)
  :input-contract (and (rationalp x) (lorp lst))
  :output-contract (lorp (notless x lst))
  (cond ((endp lst) nil)
        ((lte x (car lst))
         (cons (car lst) (notless x (cdr lst))))
        (t (notless x (cdr lst)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CDR LST))
 (EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (LTE X (CAR LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CDR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (LTE X (CAR LST)))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 1.79 seconds
Form:  ( DEFUN NOTLESS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NOTLESS-CONTRACT ...)
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS NOTLESS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : NOTLESS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  2.32 seconds (prove: 0.26, print: 0.00, other: 2.07)
Prover steps counted:  2098
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 qsort (x)
  :input-contract (lorp x)
  :output-contract (lorp (qsort x))
  (if (endp x) 
      ()
    (append (qsort (less (car x) (cdr x)))
            (append (list (car x))
                    (qsort (notless (car x) (cdr x)))))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol LIST
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(defunc2 qsort (x)
  :input-contract (lorp x)
  :output-contract (lorp (qsort x))
  (if (endp x) 
      ()
    (append (qsort (less (car x) (cdr x)))
            (append (cons (car x) nil)
                    (qsort (notless (car x) (cdr x)))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY QSORT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY QSORT))
             '(CAR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.64 seconds

TIME-TRACKER-NOTE [:TAU]: Elapsed runtime in tau is 1.01 secs; see
:DOC time-tracker-tau.

Form:  ( DEFUN QSORT ...)
Time:  6.08 seconds (prove: 6.06, print: 0.00, other: 0.01)
Form:  ( DEFTHM QSORT-CONTRACT ...)
Time:  0.09 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS QSORT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.00)

TIME-TRACKER-NOTE [:TAU]: Elapsed runtime in tau is 1.01 secs; see
:DOC time-tracker-tau.

Elapsed Run Time: 12.62 seconds

Function Name : QSORT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  13.69 seconds (prove: 12.65, print: 0.00, other: 1.04)
Prover steps counted:  301967
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 orderedp (x)
  :input-contract (lorp x)
  :output-contract (booleanp (orderedp x))
  (or (endp x)
      (endp (rest x))
      (and (lte (car x) (car (cdr x)))
           (orderedp (cdr x)))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol REST
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(defunc2 orderedp (x)
  :input-contract (lorp x)
  :output-contract (booleanp (orderedp x))
  (or (endp x)
      (endp (cdr x))
      (and (lte (car x) (car (cdr x)))
           (orderedp (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (LORP X)
 (NOT (ENDP X))
 (ENDP (CDR X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CAR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (ENDP (CDR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CADR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (ENDP (CDR X)))
 (NOT (CONSP (CDR X))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (ENDP (CDR X)))
 (LTE (CAR X) (CAR (CDR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.90 seconds
Form:  ( DEFUN ORDEREDP ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ORDEREDP-CONTRACT ...)
Time:  0.11 seconds (prove: 0.06, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.11 seconds (prove: 0.06, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS ORDEREDP ...)
Time:  0.01 seconds (prove: 0.01, print: 0.00, other: 0.00)
Elapsed Run Time: 0.18 seconds

Function Name : ORDEREDP 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.63 seconds (prove: 0.26, print: 0.00, other: 1.38)
Prover steps counted:  1072
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 del (e x)
  :input-contract (and (rationalp e) (lorp x))
  :output-contract (lorp (del e x))
  (cond ((endp x) nil)
        ((equal e (car x)) (cdr x))
        (t (cons (car x) (del e (cdr x))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CAR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CDR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (EQUAL E (CAR X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CAR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (EQUAL E (CAR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.67 seconds
Form:  ( DEFUN DEL ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM DEL-CONTRACT ...)
Time:  0.11 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.11 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS DEL ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.18 seconds

Function Name : DEL 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.23 seconds (prove: 0.20, print: 0.00, other: 1.02)
Prover steps counted:  1803
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc perm (x y)
  :input-contract (and (lorp x) (lorp y))
  :output-contract (booleanp (perm x y))
  (if (endp x)
      (endp y)
    (and (in (car x) y)
         (perm (cdr x) (del (car x) y)))))


ERROR in translate1-cw:  The symbol IN (in package "ACL2S") has neither
a function nor macro definition in ACL2.  Please define it; or perhaps
you meant one of the following, each with the same name but in a different
package: CGEN::IN or SET::IN.  See :DOC near-misses.  Note:  this error
occurred in the context (IN (CAR X) Y).



ACL2 Error in ( DEFUN PERM ...):  The symbol IN (in package "ACL2S")
has neither a function nor macro definition in ACL2.  Please define
it; or perhaps you meant one of the following, each with the same name
but in a different package: CGEN::IN or SET::IN.  See :DOC near-misses.
Note:  this error occurred in the context (IN (CAR X) Y).

ACL2S !>(defunc2 in (e x)
  :input-contract (and (rationalp e) (lorp x))
  :output-contract (booleanp (in e x))
  (cond ((endp x) nil)
        ((equal e (car x)) t)
        (t (in e (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CAR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CDR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (EQUAL E (CAR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.49 seconds
Form:  ( DEFUN IN ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN-CONTRACT ...)
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS IN ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.17 seconds

Function Name : IN 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.70 seconds (prove: 0.14, print: 0.00, other: 1.56)
Prover steps counted:  720
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc perm (x y)
  :input-contract (and (lorp x) (lorp y))
  :output-contract (booleanp (perm x y))
  (if (endp x)
      (endp y)
    (and (in (car x) y)
         (perm (cdr x) (del (car x) y)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CAR X))
 (LORP Y)
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CAR X))
 (EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CDR X))
 (LORP Y)
 (LORP X)
 (NOT (ENDP X))
 (IN (CAR X) Y)
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.85 seconds
Form:  ( DEFUN PERM ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM PERM-CONTRACT ...)
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS PERM ...)
Time:  0.02 seconds (prove: 0.02, print: 0.00, other: 0.00)
Elapsed Run Time: 0.22 seconds

Function Name : PERM 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defgroup sorting qsort isort insert orderedp perm)
ALL-GROUPS
ACL2S !>(suggest-lemma t
	       :required-expressions isort
	       :with sorting)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
 (IMPLIES (ALLP T) NIL) evaluates to NIL. Nothing to test!

Itest? found a counterexample.
 (T (:FALSIFIABLE NIL))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ISORT) ACL2S::Q '(NIL) '(T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: WALK
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(suggest-lemma t
	       :required-expressions isort
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 695 (695 unique)
satisfied the hypotheses, and found 695 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(1/3)))
 -- ((LS '(-12/55)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(1/3)))
                  ((LS '(-12/55)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ISORT) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 1 1)) NIL))) ((ACL2S::LS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: GENSYM
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions isort orderedp
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 672 (672 unique)
satisfied the hypotheses, and found 672 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS NIL))
 -- ((LS '(0)))
 -- ((LS '(-1/11 0 0 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS NIL))
                  ((LS '(0)))
                  ((LS '(-1/11 0 0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ISORT ACL2S::ORDEREDP) ACL2S::Q '(((ACL2S::LS NIL)) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL LOOKUPO)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions isort orderedp ls
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 915 (915 unique)
satisfied the hypotheses, and found 915 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-4/15)))
 -- ((LS NIL))
 -- ((LS '(-1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-4/15)))
                  ((LS NIL))
                  ((LS '(-1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ISORT ACL2S::ORDEREDP ACL2S::LS) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1)) NIL))) ((ACL2S::LS NIL)) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: GENSYM
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (isort ls) orderedp ls
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1201 (1201 unique)
satisfied the hypotheses, and found 1201 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-1 0)))
 -- ((LS '(2/3 0 0)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-1 0)))
                  ((LS '(2/3 0 0)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ISORT ACL2S::LS) ACL2S::ORDEREDP ACL2S::LS) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::LS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL VALUE-OF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions orderedp (isort ls) 
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 699 (699 unique)
satisfied the hypotheses, and found 699 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-1/2 -1/4)))
 -- ((LS '(-1)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-1/2 -1/4)))
                  ((LS '(-1)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS)) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) NIL)))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::LS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: WALK
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions orderedp (isort ls) 
	       :with orderedp qsort isort
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 937 (937 unique)
satisfied the hypotheses, and found 937 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(8/51 1/3)))
 -- ((LS '(0 0)))
 -- ((LS '(0 -1 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(8/51 1/3)))
                  ((LS '(0 0)))
                  ((LS '(0 -1 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS)) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) NIL)))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: EQUAL
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (orderedp (isort ls)) 
	       :with orderedp qsort isort
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 880 (880 unique)
satisfied the hypotheses, and found 880 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-8/3)))
 -- ((LS '(0 0)))
 -- ((LS '(0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-8/3)))
                  ((LS '(0 0)))
                  ((LS '(0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS))) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL VALUE-OF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 loi (listof integer))
 Predicate events...
Form:  ( DEFUN LOIP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOIP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LOIP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOIP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOI ...)
Form:  ( DEFTHM LOI=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOI-BUILTIN ...)
Form:  ( DEFUN NTH-LOI/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  1.07 seconds (prove: 0.70, print: 0.00, other: 0.38)
 Registering type...
Form:  ( DEFUN NTH-LOI ...)
Form:  ( ENCAPSULATE (((NTH-LOI * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOI/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOI/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOI NTH-LOI-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOI/ACC NTH-LOI/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.11 seconds (prove: 0.70, print: 0.00, other: 0.41)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.49 seconds (prove: 0.70, print: 0.00, other: 0.79)
Prover steps counted:  5966
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (orderedp (isort ls)) 
	       :with orderedp qsort isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 749 (749 unique)
satisfied the hypotheses, and found 749 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(0 -2)))
 -- ((LS '(-26 3 0)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(0 -2)))
                  ((LS '(-26 3 0)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS))) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) NIL)))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::LS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL RATIONALP-EXCLU)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:i


ACL2 Error in LD:  Unrecognized keyword command :I.

ACL2S !>:u
   d      14:x(DEFUNC PERM (X Y) ...)
ACL2S !>:u
   d      13:x(DEFUNC2 IN (E X) ...)
ACL2S !>(defunc2 perm (x y)
  :input-contract (and (lorp x) (lorp y))
  :output-contract (booleanp (perm x y))
  (if (endp x)
      (endp y)
    (and (in (car x) y)
         (perm (cdr x) (del (car x) y)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CAR X))
 (LORP Y)
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CAR X))
 (EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CDR X))
 (LORP Y)
 (LORP X)
 (NOT (ENDP X))
 (IN (CAR X) Y)
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.84 seconds
Form:  ( DEFUN PERM ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM PERM-CONTRACT ...)
Time:  0.15 seconds (prove: 0.09, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.15 seconds (prove: 0.09, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS PERM ...)
Time:  0.02 seconds (prove: 0.01, print: 0.00, other: 0.00)
Elapsed Run Time: 0.24 seconds

Function Name : PERM 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.44 seconds (prove: 0.26, print: 0.00, other: 1.17)
Prover steps counted:  1740
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 loi (listof integer))
 Predicate events...
Form:  ( DEFUN LOIP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LOIP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LOIP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LOIP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOI ...)
Form:  ( DEFTHM LOI=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LOIP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOI-BUILTIN ...)
Form:  ( DEFUN NTH-LOI/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.97 seconds (prove: 0.63, print: 0.00, other: 0.34)
 Registering type...
Form:  ( DEFUN NTH-LOI ...)
Form:  ( ENCAPSULATE (((NTH-LOI * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOI/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOI/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOI NTH-LOI-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOI/ACC NTH-LOI/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.01 seconds (prove: 0.63, print: 0.00, other: 0.38)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.37 seconds (prove: 0.63, print: 0.00, other: 0.74)
Prover steps counted:  5966
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions (orderedp (isort ls)) 
	       :with orderedp qsort isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 743 (743 unique)
satisfied the hypotheses, and found 743 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-2 1 0)))
 -- ((LS '(-15 0 -1)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-2 1 0)))
                  ((LS '(-15 0 -1)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS))) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))))) ((ACL2S::LS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (orderedp (isort ls))
	       :required-expressions boolean
	       :with orderedp qsort isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ORDEREDP (ISORT LS))
  (((LORP LS)) ((LORP (ISORT LS)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 709 (709 unique)
satisfied the hypotheses, and found 709 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(0)))
 -- ((LS '(3)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(0)))
                  ((LS '(3)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(BOOLEAN) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) ((ACL2S::LS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (orderedp (isort ls))
	       :required-expressions
	       :with boolean orderedp qsort isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ORDEREDP (ISORT LS))
  (((LORP LS)) ((LORP (ISORT LS)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 669 (669 unique)
satisfied the hypotheses, and found 669 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(0)))
 -- ((LS NIL))
 -- ((LS '(-1 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(0)))
                  ((LS NIL))
                  ((LS '(-1 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::LS NIL)) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::LORP ACL2S::LS) (ACL2S::LORP (ACL2S::ISORT ACL2S::LS)) (ACL2S::LOIP ACL2S::LS)) (EQUAL (ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS)) T)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (LORP LS) (LOIP LS))
         (ORDEREDP (ISORT LS)))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 693 (693 unique)
satisfied the hypotheses, and found 0 counterexamples and 693 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(24 -4)))
 -- ((LS '(-11)))
 -- ((LS NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (LORP LS)
              (LORP (ISORT LS))
              (LOIP LS))
         (EQUAL (ORDEREDP (ISORT LS)) T))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       :required-expressions (orderedp (isort ls))
	       :with boolean orderedp qsort isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 962 (962 unique)
satisfied the hypotheses, and found 962 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(29 -4 0)))
 -- ((LS '(2 0 0)))
 -- ((LS '(-75)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(29 -4 0)))
                  ((LS '(2 0 0)))
                  ((LS '(-75)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS))) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 0 1 0 0 1) NIL)))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       :required-expressions (orderedp (isort ls))
	       ;:with boolean orderedp qsort isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1192 (1192 unique)
satisfied the hypotheses, and found 1192 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(117 -16)))
 -- ((LS '(4)))
 -- ((LS '(0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(117 -16)))
                  ((LS '(4)))
                  ((LS '(0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS))) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 0 1) NIL)))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: WALK
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       :required-expressions orderedp isort ls
	       ;:with boolean orderedp qsort isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 697 (697 unique)
satisfied the hypotheses, and found 697 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(0 0)))
 -- ((LS '(-1)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(0 0)))
                  ((LS '(-1)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ORDEREDP ACL2S::ISORT ACL2S::LS) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::LS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t 
	       ; :required-expressions orderedp isort ls
	       :with orderedp isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 743 (743 unique)
satisfied the hypotheses, and found 743 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-344)))
 -- ((LS '(20)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-344)))
                  ((LS '(20)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1 1 0 1 0 1) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1) NIL))) ((ACL2S::LS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (isort ls)
	       ; :required-expressions orderedp isort ls
	       :with orderedp isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ISORT LS) (((LORP LS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 693 (693 unique)
satisfied the hypotheses, and found 693 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(2 0 0)))
 -- ((LS '(0)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(2 0 0)))
                  ((LS '(0)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::LS NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::LORP ACL2S::LS) (ACL2S::LOIP ACL2S::LS)) (EQUAL (ACL2S::ISORT ACL2S::LS) (ACL2S::ISORT ACL2S::LS))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 741 (741 unique)
satisfied the hypotheses, and found 0 counterexamples and 741 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(25)))
 -- ((LS '(2)))
 -- ((LS NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (IMPLIES (AND (LORP LS) (LOIP LS))
         (EQUAL (ISORT LS) (ISORT LS)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (orderedp ls)
	       ; :required-expressions orderedp isort ls
	       :with orderedp isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ORDEREDP LS) (((LORP LS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 701 (701 unique)
satisfied the hypotheses, and found 3 counterexamples and 698 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(IMPLIES (LORP LS) (NOT (LOIP LS)))
 -- ((LS NIL))
 -- ((LS '(-1)))
 -- ((LS '(2)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(1)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(4)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS NIL))
                  ((LS '(-1)))
                  ((LS '(2)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LS NIL)) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL LOOKUPO)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:q

Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
? (in-package "ACL2S"0
)
> Error: ("ACL2S" 0) can't be destructured against the lambda list (CCL::NAME), because it contains 2 elements, and exactly 1 are expected.
> While executing: CCL::PREPARE-TO-DESTRUCTURE, in process listener(1).
> Type :POP to abort, :R for a list of available restarts.
> Type :? for other options.
1 > (in-package "ACL2S")
#<Package "ACL2S">
1 > (miniKanrenize '(or (endp x)
      (endp (cdr x))
      (and (lte (car x) (car (cdr x)))
           (orderedp (cdr x)))) 'dest)

1 > (run 1 q (orderedp-rel q t))
  C-c C-c> Break: interrupt signal
> While executing: (:INTERNAL APPEND-MAP-INF), in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
2 > (run 1 q (orderedp-rel q nil))
  C-c C-c> Break: interrupt signal
> While executing: (:INTERNAL APPEND-INF), in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
3 > (run 1 (q r) (orderedp-rel q r))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable R
;   In an anonymous lambda form: Undeclared free variable Q
;   In an anonymous lambda form: Undeclared free variable R
  C-c C-c> Break: interrupt signal
> While executing: WALK, in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
4 > (run 1 q (oro t nil q))
(T)
4 > (run 1 q (oro nil nil q))
(NIL)
4 > (run* q (oro nil nil q))
(NIL)
4 > (run* q (oro nil nil q))
(NIL)
4 > (run 1 (q r v w) (caro q r) (cdro q v) (caro v w) (lte-rel r w t))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable W
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable R
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable V
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable W
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable V
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable W
;   In an anonymous lambda form: Undeclared free variable Q
;   In an anonymous lambda form: Undeclared free variable V
;   In an anonymous lambda form: Undeclared free variable R
;   In an anonymous lambda form: Undeclared free variable W
(((INTERNAL-CONS _0 (INTERNAL-CONS _0 _1)) _0 (INTERNAL-CONS _0 _1) _0))
4 > (run 7 (q r v w) (caro q r) (cdro q v) (caro v w) (lte-rel r w t))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable W
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable R
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable V
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable W
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable V
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable W
;   In an anonymous lambda form: Undeclared free variable Q
;   In an anonymous lambda form: Undeclared free variable V
;   In an anonymous lambda form: Undeclared free variable R
;   In an anonymous lambda form: Undeclared free variable W
(((INTERNAL-CONS _0 (INTERNAL-CONS _0 _1)) _0 (INTERNAL-CONS _0 _1) _0) ((INTERNAL-CONS (INTERNAL-NUMBER (1) . _0) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _1) _2)) (INTERNAL-NUMBER (1) . _0) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _1) _2) (INTERNAL-NUMBER (0) . _1)) ((INTERNAL-CONS (INTERNAL-NUMBER (0)) (INTERNAL-CONS (INTERNAL-NUMBER (0) 0 . _0) _1)) (INTERNAL-NUMBER (0)) (INTERNAL-CONS (INTERNAL-NUMBER (0) 0 . _0) _1) (INTERNAL-NUMBER (0) 0 . _0)) ((INTERNAL-CONS (INTERNAL-NUMBER (0)) (INTERNAL-CONS (INTERNAL-NUMBER (0) 1 . _0) _1)) (INTERNAL-NUMBER (0)) (INTERNAL-CONS (INTERNAL-NUMBER (0) 1 . _0) _1) (INTERNAL-NUMBER (0) 1 . _0)) ((INTERNAL-CONS (INTERNAL-NUMBER (0) 1) (INTERNAL-CONS (INTERNAL-NUMBER (0) _0 _1 . _2) _3)) (INTERNAL-NUMBER (0) 1) (INTERNAL-CONS (INTERNAL-NUMBER (0) _0 _1 . _2) _3) (INTERNAL-NUMBER (0) _0 _1 . _2)) ((INTERNAL-CONS (INTERNAL-NUMBER (1) 0 . _0) (INTERNAL-CONS (INTERNAL-NUMBER (1)) _1)) (INTERNAL-NUMBER (1) 0 . _0) (INTERNAL-CONS (INTERNAL-NUMBER (1)) _1) (INTERNAL-NUMBER (1))) ((INTERNAL-CONS (INTERNAL-NUMBER (1) 1 . _0) (INTERNAL-CONS (INTERNAL-NUMBER (1)) _1)) (INTERNAL-NUMBER (1) 1 . _0) (INTERNAL-CONS (INTERNAL-NUMBER (1)) _1) (INTERNAL-NUMBER (1))))
4 > (run 1 (q v) (orderedp-rel q v))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable V
;   In an anonymous lambda form: Undeclared free variable Q
;   In an anonymous lambda form: Undeclared free variable V
  C-c C-c> Break: interrupt signal
> While executing: LOOKUP, in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
5 > (run 1 |fresh-var411| (FRESH (|fresh-var412|)
			    (CDRO X |fresh-var412|)
			    (ENDPO-FN |fresh-var412| |fresh-var411|)))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var411|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form: Undeclared free variable |fresh-var412|
;   In an anonymous lambda form: Undeclared free variable |fresh-var411|
NIL
5 > (run 1 (x |fresh-var411|) (non-nilo |fresh-var411|) (FRESH (|fresh-var412|)
			    (CDRO X |fresh-var412|)
			    (ENDPO-FN |fresh-var412| |fresh-var411|)))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var411|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var411|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var412|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var412|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var411|
;   In an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form: Undeclared free variable |fresh-var412|
;   In an anonymous lambda form: Undeclared free variable |fresh-var411|
(((INTERNAL-CONS _0 NIL) T))
5 > (run 1 (x |fresh-var411| |fresh-var410| |fresh-var413| |fresh-var420|) (non-nilo |fresh-var411|) (FRESH (|fresh-var414| |fresh-var418|)
			    (CONJ ((FRESH (|fresh-var416| |fresh-var415|)
					  (FRESH (|fresh-var417|)
						 (CDRO X |fresh-var417|)
						 (CARO |fresh-var417| |fresh-var416|))
					  (CARO X |fresh-var415|)
					  (LTE-REL |fresh-var415| |fresh-var416|
						   |fresh-var414|))
				   (FRESH (|fresh-var419|)
					  (CDRO X |fresh-var419|)
					  (ORDEREDP-REL |fresh-var419| |fresh-var418|))
				   (ANDO |fresh-var414| |fresh-var418| |fresh-var413|)))))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var411|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var410|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var410|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form: Undeclared free variable |fresh-var410|
;   In an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form: Undeclared free variable |fresh-var411|
;   In an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form: Undeclared free variable |fresh-var419|
;   In an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form: Undeclared free variable |fresh-var413|
  C-c C-c> Break: interrupt signal
> While executing: EQUAL, in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
6 > (run 1 (x |fresh-var411| |fresh-var410| |fresh-var413| |fresh-var420|) (non-nilo |fresh-var411|) (FRESH (|fresh-var414| |fresh-var418|)
			    (CONJ ((FRESH (|fresh-var416| |fresh-var415|)
					  (FRESH (|fresh-var417|)
						 (CDRO X |fresh-var417|)
						 (CARO |fresh-var417| |fresh-var416|))
					  (CARO X |fresh-var415|)
					  (LTE-REL |fresh-var415| |fresh-var416|
						   |fresh-var414|))
				   ))))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Unused lexical variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var411|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var410|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Unused lexical variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Unused lexical variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Unused lexical variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Unused lexical variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var410|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Unused lexical variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form: Undeclared free variable |fresh-var410|
;   In an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form: Undeclared free variable |fresh-var411|
;   In an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form: Undeclared free variable |fresh-var414|
(((INTERNAL-CONS _0 (INTERNAL-CONS _0 _1)) T _2 _3 _4))
6 > (run 1 (x |fresh-var411| |fresh-var410| |fresh-var413| |fresh-var420|) (non-nilo |fresh-var411|) (FRESH (|fresh-var414| |fresh-var418|)
			    (CONJ ((FRESH (|fresh-var416| |fresh-var415|)
					  (FRESH (|fresh-var417|)
						 (CDRO X |fresh-var417|)
						 (CARO |fresh-var417| |fresh-var416|))
					  (CARO X |fresh-var415|)
					  (LTE-REL |fresh-var415| |fresh-var416|
						   |fresh-var414|))
				   
				   (ANDO |fresh-var414| |fresh-var418| |fresh-var413|)))))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var411|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var410|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var410|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var413|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form: Undeclared free variable |fresh-var410|
;   In an anonymous lambda form: Undeclared free variable |fresh-var420|
;   In an anonymous lambda form: Undeclared free variable |fresh-var411|
;   In an anonymous lambda form: Undeclared free variable |fresh-var417|
;   In an anonymous lambda form: Undeclared free variable X
;   In an anonymous lambda form: Undeclared free variable |fresh-var415|
;   In an anonymous lambda form: Undeclared free variable |fresh-var416|
;   In an anonymous lambda form: Undeclared free variable |fresh-var414|
;   In an anonymous lambda form: Undeclared free variable |fresh-var418|
;   In an anonymous lambda form: Undeclared free variable |fresh-var413|
(((INTERNAL-CONS _0 (INTERNAL-CONS _0 _1)) T _2 NIL _3))
6 > (run 1 q (orderedp-rel '(internal-cons t nil) q)))
NIL
6 > 
> Error: Reader error on #<BASIC-CHARACTER-INPUT-STREAM ISO-8859-1 (TTY/0) #x14DD2C26>, within " nil) q)))
>        ":
>        Unmatched ')' .
> While executing: CCL::SIGNAL-READER-ERROR, in process listener(1).
> Type :POP to abort, :R for a list of available restarts.
> Type :? for other options.
7 > (run 1 q (orderedp-rel '(internal-cons t nil) q))
NIL
7 > bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.74 seconds (prove: 0.00, print: 0.00, other: 2.74)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defdata2 lor (listof rational))
 Predicate events...
Form:  ( DEFUN LORP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LORP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LORP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LORP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOR ...)
Form:  ( DEFTHM LOR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOR-BUILTIN ...)
Form:  ( DEFUN NTH-LOR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.95 seconds (prove: 0.60, print: 0.00, other: 0.34)
 Registering type...
Form:  ( DEFUN NTH-LOR ...)
Form:  ( ENCAPSULATE (((NTH-LOR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOR NTH-LOR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOR/ACC NTH-LOR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.99 seconds (prove: 0.60, print: 0.00, other: 0.38)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.26 seconds (prove: 0.60, print: 0.00, other: 0.65)
Prover steps counted:  5385
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 lte (a b)
  :input-contract (and (rationalp a) (rationalp b))
  :output-contract (booleanp (lte a b))
  (<= a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.13 seconds
Form:  ( DEFUN LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LTE-CONTRACT ...)
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.07)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.07)
Form:  ( VERIFY-GUARDS LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.14 seconds

Function Name : LTE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.54 seconds (prove: 0.04, print: 0.00, other: 0.50)
Prover steps counted:  112
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 lt (a b)
  :input-contract (and (rationalp a) (rationalp b))
  :output-contract (booleanp (lte a b))
  (< a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.14 seconds
Form:  ( DEFUN LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LT-CONTRACT ...)
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.07)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.07)
Form:  ( VERIFY-GUARDS LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : LT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.54 seconds (prove: 0.04, print: 0.00, other: 0.50)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (lorp (insert a x))
  (cond ((endp x) (cons a nil))
        ((lte a (car x)) (cons a x))
        (t (cons (car x) (insert a (cdr x))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (NOT (LTE A (CAR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.64 seconds
Form:  ( DEFUN INSERT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM INSERT-CONTRACT ...)
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS INSERT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : INSERT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.13 seconds (prove: 0.22, print: 0.00, other: 0.91)
Prover steps counted:  1722
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 isort (x)
  :input-contract (lorp x)
  :output-contract (lorp (isort x))
  (if (endp x)
      ()
    (insert (car x) (isort (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ISORT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY ISORT))
             '(CAR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

([ A key checkpoint:

Goal''
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY ISORT))
                          '(INSERT (CAR X) (ISORT (CDR X))))
              (RATIONALP (CAR X))
              (LORP (CDR X))
              (CONSP X))
         (LORP (ISORT (CDR X))))

*1 (Goal'4') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY ISORT))
                          '(INSERT (CAR X) (ISORT (CDR X))))
              (RATIONALP X1)
              (LORP X2))
         (LORP (ISORT X2))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.61 seconds
Form:  ( DEFUN ISORT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ISORT-CONTRACT ...)
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS ISORT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.15 seconds

Function Name : ISORT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.06 seconds (prove: 0.22, print: 0.00, other: 0.84)
Prover steps counted:  3486
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 less (x lst)
  :input-contract (and (rationalp x) (lorp lst))
  :output-contract (lorp (less x lst))
  (cond ((endp lst) ())
        ((lt (car lst) x)
         (cons (car lst) (less x (cdr lst))))
        (t (less x (cdr lst)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LST))
 (EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (LT (CAR LST) X)
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (LT (CAR LST) X))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.79 seconds
Form:  ( DEFUN LESS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LESS-CONTRACT ...)
Time:  0.13 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.13 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS LESS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : LESS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.29 seconds (prove: 0.26, print: 0.00, other: 1.03)
Prover steps counted:  2080
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 notless (x lst)
  :input-contract (and (rationalp x) (lorp lst))
  :output-contract (lorp (notless x lst))
  (cond ((endp lst) nil)
        ((lte x (car lst))
         (cons (car lst) (notless x (cdr lst))))
        (t (notless x (cdr lst)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CDR LST))
 (EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (LTE X (CAR LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CDR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (LTE X (CAR LST)))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.82 seconds
Form:  ( DEFUN NOTLESS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NOTLESS-CONTRACT ...)
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS NOTLESS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : NOTLESS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.33 seconds (prove: 0.26, print: 0.00, other: 1.06)
Prover steps counted:  2098
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 qsort (x)
  :input-contract (lorp x)
  :output-contract (lorp (qsort x))
  (if (endp x) 
      ()
    (append (qsort (less (car x) (cdr x)))
            (append (cons (car x) nil)
                    (qsort (notless (car x) (cdr x)))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY QSORT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY QSORT))
             '(CAR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.66 seconds

TIME-TRACKER-NOTE [:TAU]: Elapsed runtime in tau is 1.02 secs; see
:DOC time-tracker-tau.

(defunc2 orderedp (x)
  :input-contract (lorp x)
  :output-contract (booleanp (orderedp x))
  (or (endp x)
      (endp (cdr x))
      (and (lte (car x) (car (cdr x)))
           (orderedp (cdr x)))))
Form:  ( DEFUN QSORT ...)
Time:  7.19 seconds (prove: 7.17, print: 0.00, other: 0.01)
Form:  ( DEFTHM QSORT-CONTRACT ...)
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS QSORT ...)
Time:  0.01 seconds (prove: 0.01, print: 0.00, other: 0.00)

TIME-TRACKER-NOTE [:TAU]: Elapsed runtime in tau is 1.01 secs; see
:DOC time-tracker-tau.

Elapsed Run Time: 13.55 seconds

Function Name : QSORT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  14.60 seconds (prove: 13.57, print: 0.00, other: 1.03)
Prover steps counted:  301967
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (LORP X)
 (NOT (ENDP X))
 (ENDP (CDR X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CAR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (ENDP (CDR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CADR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (ENDP (CDR X)))
 (NOT (CONSP (CDR X))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (ENDP (CDR X)))
 (LTE (CAR X) (CAR (CDR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.88 seconds
Form:  ( DEFUN ORDEREDP ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ORDEREDP-CONTRACT ...)
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS ORDEREDP ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.16 seconds

Function Name : ORDEREDP 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.35 seconds (prove: 0.23, print: 0.00, other: 1.11)
Prover steps counted:  1072
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 del (e x)
  :input-contract (and (rationalp e) (lorp x))
  :output-contract (lorp (del e x))
  (cond ((endp x) nil)
        ((equal e (car x)) (cdr x))
        (t (cons (car x) (del e (cdr x))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CAR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CDR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (EQUAL E (CAR X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CAR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (EQUAL E (CAR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.63 seconds
Form:  ( DEFUN DEL ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM DEL-CONTRACT ...)
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS DEL ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.18 seconds

Function Name : DEL 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.13 seconds (prove: 0.20, print: 0.00, other: 0.92)
Prover steps counted:  1803
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 in (e x)
  :input-contract (and (rationalp e) (lorp x))
  :output-contract (booleanp (in e x))
  (cond ((endp x) nil)
        ((equal e (car x)) t)
        (t (in e (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CAR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CDR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (EQUAL E (CAR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.50 seconds
Form:  ( DEFUN IN ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN-CONTRACT ...)
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.07)
Form:  ( VERIFY-GUARDS IN ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : IN 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.02 seconds (prove: 0.16, print: 0.00, other: 0.86)
Prover steps counted:  720
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 perm (x y)
  :input-contract (and (lorp x) (lorp y))
  :output-contract (booleanp (perm x y))
  (if (endp x)
      (endp y)
    (and (in (car x) y)
         (perm (cdr x) (del (car x) y)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CAR X))
 (LORP Y)
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CAR X))
 (EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CDR X))
 (LORP Y)
 (LORP X)
 (NOT (ENDP X))
 (IN (CAR X) Y)
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.88 seconds
Form:  ( DEFUN PERM ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM PERM-CONTRACT ...)
Time:  0.16 seconds (prove: 0.10, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.16 seconds (prove: 0.10, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS PERM ...)
Time:  0.02 seconds (prove: 0.02, print: 0.00, other: 0.00)
Elapsed Run Time: 0.25 seconds

Function Name : PERM 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.47 seconds (prove: 0.28, print: 0.00, other: 1.19)
Prover steps counted:  1740
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (orderedp ls)
	       ; :required-expressions orderedp isort ls
	       :with orderedp isort
	       :hyps (loip ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ORDEREDP LS) (((LORP LS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>Cgen/Error: The input form is ill-formed, see below:

ACL2 Error in test? check:  The symbol LOIP (in package "ACL2S") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context (LOIP LS).

Itest? failed (probably due to a hard error).

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value NIL is not of the expected type REAL.
While executing: CCL::>-2
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (ACL2S::LORP ACL2S::LS) (ACL2S::LOIP ACL2S::LS)) (EQUAL (ACL2S::ORDEREDP ACL2S::LS) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>Cgen/Error: The input form is ill-formed, see below:

ACL2 Error in test? check:  The symbol LOIP (in package "ACL2S") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context (LOIP LS).

Itest? failed (probably due to a hard error).

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value NIL is not of the expected type REAL.
While executing: CCL::>-2
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (ACL2S::LORP ACL2S::LS) (ACL2S::LOIP ACL2S::LS)) (EQUAL (ACL2S::ORDEREDP ACL2S::LS) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>Cgen/Error: The input form is ill-formed, see below:

ACL2 Error in test? check:  The symbol LOIP (in package "ACL2S") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context (LOIP LS).

Itest? failed (probably due to a hard error).

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value NIL is not of the expected type REAL.
While executing: CCL::>-2
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (ACL2S::LORP ACL2S::LS) (ACL2S::LOIP ACL2S::LS)) (EQUAL (ACL2S::ORDEREDP ACL2S::LS) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>Cgen/Error: The input form is ill-formed, see below:

ACL2 Error in test? check:  The symbol LOIP (in package "ACL2S") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context (LOIP LS).

Itest? failed (probably due to a hard error).

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value NIL is not of the expected type REAL.
While executing: CCL::>-2
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (ACL2S::LORP ACL2S::LS) (ACL2S::LOIP ACL2S::LS)) (EQUAL (ACL2S::ORDEREDP ACL2S::LS) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>Cgen/Error: The input form is ill-formed, see below:

ACL2 Error in test? check:  The symbol LOIP (in package "ACL2S") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context (LOIP LS).

Itest? failed (probably due to a hard error).

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value NIL is not of the expected type REAL.
While executing: CCL::>-2
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")
ACL2S !>(suggest-lemma (orderedp ls)
	       ; :required-expressions orderedp isort ls
	       :with orderedp isort
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ORDEREDP LS) (((LORP LS))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 708 (708 unique)
satisfied the hypotheses, and found 708 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(-1/3)))
 -- ((LS '(0)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-1/3)))
                  ((LS '(0)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::LS NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::LORP ACL2S::LS) (ACL2S::LORP ACL2S::LS)) (EQUAL (ACL2S::ORDEREDP ACL2S::LS) (ACL2S::ORDEREDP ACL2S::LS))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 675 (675 unique)
satisfied the hypotheses, and found 0 counterexamples and 675 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(-1)))
 -- ((LS NIL))
 -- ((LS '(0)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (IMPLIES (AND (LORP LS) (LORP LS))
         (EQUAL (ORDEREDP LS) (ORDEREDP LS)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions orderedp isort ls
	       :with orderedp isort
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 658 (658 unique)
satisfied the hypotheses, and found 658 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(0 0)))
 -- ((LS '(0)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(0 0)))
                  ((LS '(0)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ORDEREDP ACL2S::ISORT ACL2S::LS) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::LS NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LORP ACL2S::LS)) (EQUAL T (ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (LORP LS)
         (ORDEREDP (ISORT LS)))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 637 (637 unique)
satisfied the hypotheses, and found 0 counterexamples and 637 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(-1/2 0 0)))
 -- ((LS NIL))
 -- ((LS '(-1/3)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (LORP LS)
         (EQUAL T (ORDEREDP (ISORT LS))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defgroup sorting qsort isort insert orderedp perm)
ALL-GROUPS
ACL2S !>(suggest-lemma t
	       :required-expressions orderedp isort ls
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 456 (456 unique)
satisfied the hypotheses, and found 3 counterexamples and 453 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(NOT (LORP LS))
 -- ((LS '(0 -1/3 0 -1)))
 -- ((LS '(-15/38)))
 -- ((LS NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(0 0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(-2)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(0 -1/3 0 -1)))
                  ((LS '(-15/38)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ORDEREDP ACL2S::ISORT ACL2S::LS) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 1 1 0 0 1)) NIL))) ((ACL2S::LS NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LORP ACL2S::LS)) (EQUAL T (ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (LORP LS)
         (ORDEREDP (ISORT LS)))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 882 (882 unique)
satisfied the hypotheses, and found 0 counterexamples and 882 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS NIL))
 -- ((LS '(0)))
 -- ((LS '(-1/3)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (LORP LS)
         (EQUAL T (ORDEREDP (ISORT LS))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions isort ls
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1005 examples across 3 subgoals, of which 490 (490 unique)
satisfied the hypotheses, and found 3 counterexamples and 487 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(NOT (LORP LS))
 -- ((LS '(0)))
 -- ((LS '(1/2)))
 -- ((LS NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(0 0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(-1/4)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(0)))
                  ((LS '(1/2)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ISORT ACL2S::LS) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) NIL))) ((ACL2S::LS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL VALUE-OF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions isort ls orderedp
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1003 examples across 3 subgoals, of which 472 (472 unique)
satisfied the hypotheses, and found 3 counterexamples and 469 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(NOT (LORP LS))
 -- ((LS '(2 0)))
 -- ((LS NIL))
 -- ((LS '(-5/8 -2 0 0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(-13/8 -1 -1)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(4)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(2 0)))
                  ((LS NIL))
                  ((LS '(-5/8 -2 0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ISORT ACL2S::LS ACL2S::ORDEREDP) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::LS NIL)) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL VALUE-OF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions isort orderedp
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1009 examples across 3 subgoals, of which 439 (439 unique)
satisfied the hypotheses, and found 3 counterexamples and 436 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(NOT (LORP LS))
 -- ((LS '(0)))
 -- ((LS '(-1)))
 -- ((LS NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS '(-1)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(0)))
                  ((LS '(-1)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ISORT ACL2S::ORDEREDP) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::LS NIL))) '(T T T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions orderedp isort 
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1010 examples across 3 subgoals, of which 474 (474 unique)
satisfied the hypotheses, and found 3 counterexamples and 471 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal'"]
(NOT (LORP LS))
 -- ((LS '(-4/3)))
 -- ((LS '(3/20)))
 -- ((LS NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS NIL))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(-1 0)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((LS '(-2/29)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(-4/3)))
                  ((LS '(3/20)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ORDEREDP ACL2S::ISORT) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1 0 1)) NIL))) ((ACL2S::LS NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LORP ACL2S::LS)) (EQUAL T (ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (LORP LS)
         (ORDEREDP (ISORT LS)))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 913 (913 unique)
satisfied the hypotheses, and found 0 counterexamples and 913 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS NIL))
 -- ((LS '(0)))
 -- ((LS '(2/5)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (LORP LS)
	      (EQUAL T (ORDEREDP (ISORT LS)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint:

Goal'
(IMPLIES (LORP LS)
         (ORDEREDP (ISORT LS)))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Two induction schemes are suggested
by this conjecture.  These merge into one derived induction scheme.

We will induct according to a scheme suggested by (ISORT LS).  This
suggestion was produced using the :induction rules ISORT-INDUCTION-SCHEME,
ISORT-INDUCTION-SCHEME-FROM-DEFINITION and LORP.  If we let (:P LS)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (LORP LS)) (:P LS))
     (IMPLIES (AND (LORP LS)
                   (NOT (ENDP LS))
                   (:P (CDR LS)))
              (:P LS))
     (IMPLIES (AND (LORP LS) (ENDP LS))
              (:P LS))).
This induction is justified by the same argument used to admit ISORT.
When applied to the goal at hand the above induction scheme produces
three nontautological subgoals.
Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint while proving *1 (descended from Goal'):

Subgoal *1/3''
(IMPLIES (AND (RATIONALP (CAR LS))
              (LORP (CDR LS))
              (CONSP LS)
              (ORDEREDP (ISORT (CDR LS))))
         (ORDEREDP (INSERT (CAR LS) (ISORT (CDR LS)))))

*1.1 (Subgoal *1/3'6') is pushed for proof by induction.

])
Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


So we now return to *1.1, which is

(IMPLIES (AND (RATIONALP LS1) (ORDEREDP IT))
         (ORDEREDP (INSERT LS1 IT))).

No induction schemes are suggested by *1.1.  Consequently, the proof
attempt has failed.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LORP-IMPLIES-TLP)
        (:DEFINITION ENDP)
        (:DEFINITION ISORT-DEFINITION-RULE)
        (:DEFINITION LORP)
        (:DEFINITION NOT)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART ISORT)
        (:EXECUTABLE-COUNTERPART ORDEREDP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING LOR=>DEF)
        (:INDUCTION ISORT-INDUCTION-SCHEME)
        (:INDUCTION ISORT-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION LORP)
        (:TYPE-PRESCRIPTION ISORT-CONTRACT)
        (:TYPE-PRESCRIPTION LORP)
        (:TYPE-PRESCRIPTION ORDEREDP-CONTRACT))
Warnings:  Invariant-risk
Time:  0.59 seconds (prove: 0.24, print: 0.00, other: 0.35)
Prover steps counted:  5430

---
The key checkpoint goals, below, may help you to debug this failure.
See :DOC failure and see :DOC set-checkpoint-summary-limit.
---

*** Key checkpoint at the top level: ***

Goal'
(IMPLIES (LORP LS)
         (ORDEREDP (ISORT LS)))

*** Key checkpoint under a top-level induction: ***

Subgoal *1/3''
(IMPLIES (AND (RATIONALP (CAR LS))
              (LORP (CDR LS))
              (CONSP LS)
              (ORDEREDP (ISORT (CDR LS))))
         (ORDEREDP (INSERT (CAR LS) (ISORT (CDR LS)))))

ACL2 Error in ( THM ...):  See :DOC failure.

******** FAILED ********

**Summary of Cgen/testing**
We tested 3000 examples across 6 subgoals, of which 1399 (1399 unique)
satisfied the hypotheses, and found 0 counterexamples and 1399 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((LS NIL))
 -- ((LS '(3/25)))
 -- ((LS '(2/49)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions orderedp insert
	       :with sorting
	       :hyps (lorp ls) (orderedp ls) (rationalp x))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1253 (1253 unique)
satisfied the hypotheses, and found 1253 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X -1) (LS NIL))
 -- ((X 1/9) (LS NIL))
 -- ((X 0) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X -1) (LS NIL))
                  ((X 1/9) (LS NIL))
                  ((X 0) (LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ORDEREDP ACL2S::INSERT) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (1) 1)) (ACL2S::LS NIL)) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1))) (ACL2S::LS NIL)) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::LS NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LORP ACL2S::LS) (ACL2S::ORDEREDP ACL2S::LS) (RATIONALP ACL2S::X)) (EQUAL T (ACL2S::ORDEREDP (ACL2S::INSERT ACL2S::X ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (AND (LORP LS)
              (ORDEREDP LS)
              (RATIONALP X))
         (ORDEREDP (INSERT X LS)))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1282 (1282 unique)
satisfied the hypotheses, and found 0 counterexamples and 1282 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 1159/317) (LS '(0 0)))
 -- ((X -97/71) (LS NIL))
 -- ((X -126/475) (LS '(-2)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (LORP LS)
              (ORDEREDP LS)
              (RATIONALP X))
         (EQUAL T (ORDEREDP (INSERT X LS))))(thm (IMPLIES (AND (LORP LS)
              (ORDEREDP LS)
              (RATIONALP X))
         (EQUAL T (ORDEREDP (INSERT X LS)))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14DD2B7E>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14DD2B7E>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(thm (IMPLIES (AND (LORP LS)
              (ORDEREDP LS)
              (RATIONALP X))
         (EQUAL T (ORDEREDP (INSERT X LS)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint:

Goal'
(IMPLIES (AND (LORP LS)
              (ORDEREDP LS)
              (RATIONALP X))
         (ORDEREDP (INSERT X LS)))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Three induction schemes are
suggested by this conjecture.  These merge into one derived induction
scheme.  

We will induct according to a scheme suggested by (INSERT X LS).  This
suggestion was produced using the :induction rules INSERT-INDUCTION-SCHEME,
INSERT-INDUCTION-SCHEME-FROM-DEFINITION, LORP, ORDEREDP-INDUCTION-SCHEME
and ORDEREDP-INDUCTION-SCHEME-FROM-DEFINITION.  If we let (:P LS X)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (AND (RATIONALP X) (LORP LS)))
              (:P LS X))
     (IMPLIES (AND (AND (RATIONALP X) (LORP LS))
                   (NOT (ENDP LS))
                   (NOT (LTE X (CAR LS)))
                   (:P (CDR LS) X))
              (:P LS X))
     (IMPLIES (AND (AND (RATIONALP X) (LORP LS))
                   (NOT (ENDP LS))
                   (LTE X (CAR LS)))
              (:P LS X))
     (IMPLIES (AND (AND (RATIONALP X) (LORP LS))
                   (ENDP LS))
              (:P LS X))).
This induction is justified by the same argument used to admit INSERT.
When applied to the goal at hand the above induction scheme produces
five nontautological subgoals.
Subgoal *1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/5' (2 subgoals).
  if-intro: ((:DEFINITION LORP)
             (:DEFINITION LTE-DEFINITION-RULE)
             (:DEFINITION ORDEREDP-DEFINITION-RULE))

Subgoal *1/5.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1.2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1.1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/5.1.1' (2 subgoals).
  if-intro: ((:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LORP)
             (:DEFINITION LTE-DEFINITION-RULE)
             (:DEFINITION ORDEREDP-DEFINITION-RULE))

Subgoal *1/5.1.1.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1.1.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/4' (2 subgoals).
  if-intro: ((:DEFINITION LORP)
             (:DEFINITION LTE-DEFINITION-RULE)
             (:DEFINITION ORDEREDP-DEFINITION-RULE))

Subgoal *1/4.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal' is COMPLETED!

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LORP-IMPLIES-TLP)
        (:DEFINITION ENDP)
        (:DEFINITION INSERT-DEFINITION-RULE)
        (:DEFINITION LORP)
        (:DEFINITION LTE-DEFINITION-RULE)
        (:DEFINITION NOT)
        (:DEFINITION ORDEREDP-DEFINITION-RULE)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CAR)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART LORP)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART ORDEREDP)
        (:EXECUTABLE-COUNTERPART TRUE-LISTP)
        (:FAKE-RUNE-FOR-LINEAR NIL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING LOR=>DEF)
        (:INDUCTION INSERT-INDUCTION-SCHEME)
        (:INDUCTION INSERT-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION LORP)
        (:INDUCTION ORDEREDP-INDUCTION-SCHEME)
        (:INDUCTION ORDEREDP-INDUCTION-SCHEME-FROM-DEFINITION)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE CONS-LORP-SIG)
        (:REWRITE ACL2::CONSP-UNDER-IFF-WHEN-TRUE-LISTP)
        (:REWRITE ACL2::TRUE-LISTP-OF-CONS)
        (:TYPE-PRESCRIPTION INSERT-CONTRACT)
        (:TYPE-PRESCRIPTION LORP)
        (:TYPE-PRESCRIPTION ORDEREDP-CONTRACT))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LORP)
             (:DEFINITION LTE-DEFINITION-RULE)
             (:DEFINITION ORDEREDP-DEFINITION-RULE))
Warnings:  Invariant-risk
Time:  0.53 seconds (prove: 0.31, print: 0.01, other: 0.22)
Prover steps counted:  8400

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 882 (882 unique)
satisfied the hypotheses, and found 0 counterexamples and 882 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X -7/19) (LS '(-3)))
 -- ((X 0) (LS NIL))
 -- ((X -431/2542) (LS '(-1/3)))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (LORP LS)
	      (EQUAL T (ORDEREDP (ISORT LS)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint:

Goal'
(IMPLIES (LORP LS)
         (ORDEREDP (ISORT LS)))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Two induction schemes are suggested
by this conjecture.  These merge into one derived induction scheme.

We will induct according to a scheme suggested by (ISORT LS).  This
suggestion was produced using the :induction rules ISORT-INDUCTION-SCHEME,
ISORT-INDUCTION-SCHEME-FROM-DEFINITION and LORP.  If we let (:P LS)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (LORP LS)) (:P LS))
     (IMPLIES (AND (LORP LS)
                   (NOT (ENDP LS))
                   (:P (CDR LS)))
              (:P LS))
     (IMPLIES (AND (LORP LS) (ENDP LS))
              (:P LS))).
This induction is justified by the same argument used to admit ISORT.
When applied to the goal at hand the above induction scheme produces
three nontautological subgoals.
Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'6'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


([ A key checkpoint while proving *1 (descended from Goal'):

Subgoal *1/3''
(IMPLIES (AND (RATIONALP (CAR LS))
              (LORP (CDR LS))
              (CONSP LS)
              (ORDEREDP (ISORT (CDR LS))))
         (ORDEREDP (INSERT (CAR LS) (ISORT (CDR LS)))))

*1.1 (Subgoal *1/3'6') is pushed for proof by induction.

])
Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


So we now return to *1.1, which is

(IMPLIES (AND (RATIONALP LS1) (ORDEREDP IT))
         (ORDEREDP (INSERT LS1 IT))).

No induction schemes are suggested by *1.1.  Consequently, the proof
attempt has failed.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LORP-IMPLIES-TLP)
        (:DEFINITION ENDP)
        (:DEFINITION ISORT-DEFINITION-RULE)
        (:DEFINITION LORP)
        (:DEFINITION NOT)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART ISORT)
        (:EXECUTABLE-COUNTERPART ORDEREDP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING LOR=>DEF)
        (:INDUCTION ISORT-INDUCTION-SCHEME)
        (:INDUCTION ISORT-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION LORP)
        (:TYPE-PRESCRIPTION ISORT-CONTRACT)
        (:TYPE-PRESCRIPTION LORP)
        (:TYPE-PRESCRIPTION ORDEREDP-CONTRACT))
Warnings:  Invariant-risk
Time:  0.56 seconds (prove: 0.22, print: 0.01, other: 0.34)
Prover steps counted:  5430

---
The key checkpoint goals, below, may help you to debug this failure.
See :DOC failure and see :DOC set-checkpoint-summary-limit.
---

*** Key checkpoint at the top level: ***

Goal'
(IMPLIES (LORP LS)
         (ORDEREDP (ISORT LS)))

*** Key checkpoint under a top-level induction: ***

Subgoal *1/3''
(IMPLIES (AND (RATIONALP (CAR LS))
              (LORP (CDR LS))
              (CONSP LS)
              (ORDEREDP (ISORT (CDR LS))))
         (ORDEREDP (INSERT (CAR LS) (ISORT (CDR LS)))))

ACL2 Error in ( THM ...):  See :DOC failure.

******** FAILED ********

**Summary of Cgen/testing**
We tested 3000 examples across 6 subgoals, of which 1474 (1474 unique)
satisfied the hypotheses, and found 0 counterexamples and 1474 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((LS '(-1/4 0 0)))
 -- ((LS '(-2)))
 -- ((LS NIL))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm insert-ordered
  (IMPLIES (AND (LORP LS)
		(ORDEREDP LS)
		(RATIONALP X))
	   (EQUAL T (ORDEREDP (INSERT X LS)))))


ACL2 Error in ( DEFTHM INSERT-ORDERED ...):  A :REWRITE rule generated
from INSERT-ORDERED is illegal because it rewrites the quoted constant
'T.  For general information about rewrite rules in ACL2, see :DOC
rewrite.


Summary
Form:  ( DEFTHM INSERT-ORDERED ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)

ACL2 Error in ( DEFTHM INSERT-ORDERED ...):  See :DOC failure.

******** FAILED ********
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.74 seconds (prove: 0.00, print: 0.00, other: 2.74)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defdata2 lor (listof rational))
 Predicate events...
Form:  ( DEFUN LORP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LORP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LORP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LORP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOR ...)
Form:  ( DEFTHM LOR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOR-BUILTIN ...)
Form:  ( DEFUN NTH-LOR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.95 seconds (prove: 0.59, print: 0.00, other: 0.36)
 Registering type...
Form:  ( DEFUN NTH-LOR ...)
Form:  ( ENCAPSULATE (((NTH-LOR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOR NTH-LOR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOR/ACC NTH-LOR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.99 seconds (prove: 0.59, print: 0.00, other: 0.40)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.25 seconds (prove: 0.59, print: 0.00, other: 0.66)
Prover steps counted:  5385
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 lte (a b)
  :input-contract (and (rationalp a) (rationalp b))
  :output-contract (booleanp (lte a b))
  (<= a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.14 seconds
Form:  ( DEFUN LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LTE-CONTRACT ...)
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.07)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.02, print: 0.00, other: 0.07)
Form:  ( VERIFY-GUARDS LTE ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.14 seconds

Function Name : LTE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.56 seconds (prove: 0.04, print: 0.00, other: 0.51)
Prover steps counted:  112
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 lt (a b)
  :input-contract (and (rationalp a) (rationalp b))
  :output-contract (booleanp (lte a b))
  (< a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.14 seconds
Form:  ( DEFUN LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LT-CONTRACT ...)
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : LT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.54 seconds (prove: 0.04, print: 0.00, other: 0.50)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (lorp (insert a x))
  (cond ((endp x) (cons a nil))
        ((lte a (car x)) (cons a x))
        (t (cons (car x) (insert a (cdr x))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (NOT (LTE A (CAR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.65 seconds
Form:  ( DEFUN INSERT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM INSERT-CONTRACT ...)
Time:  0.13 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.13 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS INSERT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : INSERT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.14 seconds (prove: 0.23, print: 0.00, other: 0.92)
Prover steps counted:  1722
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 isort (x)
  :input-contract (lorp x)
  :output-contract (lorp (isort x))
  (if (endp x)
      ()
    (insert (car x) (isort (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ISORT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY ISORT))
             '(CAR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

([ A key checkpoint:

Goal''
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY ISORT))
                          '(INSERT (CAR X) (ISORT (CDR X))))
              (RATIONALP (CAR X))
              (LORP (CDR X))
              (CONSP X))
         (LORP (ISORT (CDR X))))

*1 (Goal'4') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY ISORT))
                          '(INSERT (CAR X) (ISORT (CDR X))))
              (RATIONALP X1)
              (LORP X2))
         (LORP (ISORT X2))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.62 seconds
Form:  ( DEFUN ISORT ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ISORT-CONTRACT ...)
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS ISORT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.15 seconds

Function Name : ISORT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.06 seconds (prove: 0.22, print: 0.00, other: 0.83)
Prover steps counted:  3486
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 less (x lst)
  :input-contract (and (rationalp x) (lorp lst))
  :output-contract (lorp (less x lst))
  (cond ((endp lst) ())
        ((lt (car lst) x)
         (cons (car lst) (less x (cdr lst))))
        (t (less x (cdr lst)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LST))
 (EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (LT (CAR LST) X)
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS))
             '(CDR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (LT (CAR LST) X))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.78 seconds
Form:  ( DEFUN LESS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LESS-CONTRACT ...)
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS LESS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.20 seconds

Function Name : LESS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.28 seconds (prove: 0.26, print: 0.00, other: 1.02)
Prover steps counted:  2080
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 notless (x lst)
  :input-contract (and (rationalp x) (lorp lst))
  :output-contract (lorp (notless x lst))
  (cond ((endp lst) nil)
        ((lte x (car lst))
         (cons (car lst) (notless x (cdr lst))))
        (t (notless x (cdr lst)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CDR LST))
 (EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CAR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (LTE X (CAR LST))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY NOTLESS))
             '(CDR LST))
 (LORP LST)
 (RATIONALP X)
 (NOT (ENDP LST))
 (NOT (LTE X (CAR LST)))
 (NOT (CONSP LST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.84 seconds
Form:  ( DEFUN NOTLESS ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM NOTLESS-CONTRACT ...)
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.13 seconds (prove: 0.07, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS NOTLESS ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.21 seconds

Function Name : NOTLESS 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.37 seconds (prove: 0.27, print: 0.00, other: 1.09)
Prover steps counted:  2098
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 qsort (x)
  :input-contract (lorp x)
  :output-contract (lorp (qsort x))
  (if (endp x) 
      ()
    (append (qsort (less (car x) (cdr x)))
            (append (cons (car x) nil)
                    (qsort (notless (car x) (cdr x)))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY QSORT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY QSORT))
             '(CAR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.66 seconds

TIME-TRACKER-NOTE [:TAU]: Elapsed runtime in tau is 1.01 secs; see
:DOC time-tracker-tau.

Form:  ( DEFUN QSORT ...)
Time:  7.19 seconds (prove: 7.17, print: 0.00, other: 0.01)
Form:  ( DEFTHM QSORT-CONTRACT ...)
Time:  0.09 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS QSORT ...)
Time:  0.01 seconds (prove: 0.01, print: 0.00, other: 0.00)

TIME-TRACKER-NOTE [:TAU]: Elapsed runtime in tau is 1.01 secs; see
:DOC time-tracker-tau.

Elapsed Run Time: 13.37 seconds

Function Name : QSORT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  14.44 seconds (prove: 13.40, print: 0.00, other: 1.03)
Prover steps counted:  301967
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 orderedp (x)
  :input-contract (lorp x)
  :output-contract (booleanp (orderedp x))
  (or (endp x)
      (endp (cdr x))
      (and (lte (car x) (car (cdr x)))
           (orderedp (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (LORP X)
 (NOT (ENDP X))
 (ENDP (CDR X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CAR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (ENDP (CDR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CADR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (ENDP (CDR X)))
 (NOT (CONSP (CDR X))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ORDEREDP))
             '(CDR X))
 (LORP X)
 (NOT (ENDP X))
 (NOT (ENDP (CDR X)))
 (LTE (CAR X) (CAR (CDR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.87 seconds
Form:  ( DEFUN ORDEREDP ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ORDEREDP-CONTRACT ...)
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS ORDEREDP ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.17 seconds

Function Name : ORDEREDP 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.34 seconds (prove: 0.22, print: 0.00, other: 1.12)
Prover steps counted:  1072
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 del (e x)
  :input-contract (and (rationalp e) (lorp x))
  :output-contract (lorp (del e x))
  (cond ((endp x) nil)
        ((equal e (car x)) (cdr x))
        (t (cons (car x) (del e (cdr x))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CAR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CDR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (EQUAL E (CAR X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY DEL))
             '(CAR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (EQUAL E (CAR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.63 seconds
Form:  ( DEFUN DEL ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM DEL-CONTRACT ...)
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.12 seconds (prove: 0.06, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS DEL ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.18 seconds

Function Name : DEL 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.15 seconds (prove: 0.20, print: 0.00, other: 0.95)
Prover steps counted:  1803
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 in (e x)
  :input-contract (and (rationalp e) (lorp x))
  :output-contract (booleanp (in e x))
  (cond ((endp x) nil)
        ((equal e (car x)) t)
        (t (in e (cdr x)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CAR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY IN))
             '(CDR X))
 (LORP X)
 (RATIONALP E)
 (NOT (ENDP X))
 (NOT (EQUAL E (CAR X)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.50 seconds
Form:  ( DEFUN IN ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM IN-CONTRACT ...)
Time:  0.11 seconds (prove: 0.05, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.11 seconds (prove: 0.05, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS IN ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.18 seconds

Function Name : IN 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.01 seconds (prove: 0.15, print: 0.00, other: 0.86)
Prover steps counted:  720
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 perm (x y)
  :input-contract (and (lorp x) (lorp y))
  :output-contract (booleanp (perm x y))
  (if (endp x)
      (endp y)
    (and (in (car x) y)
         (perm (cdr x) (del (car x) y)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CAR X))
 (LORP Y)
 (LORP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CAR X))
 (EXTRA-INFO '(:GUARD (:BODY PERM))
             '(CDR X))
 (LORP Y)
 (LORP X)
 (NOT (ENDP X))
 (IN (CAR X) Y)
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.90 seconds
Form:  ( DEFUN PERM ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM PERM-CONTRACT ...)
Time:  0.14 seconds (prove: 0.08, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.14 seconds (prove: 0.08, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS PERM ...)
Time:  0.02 seconds (prove: 0.02, print: 0.00, other: 0.00)
Elapsed Run Time: 0.24 seconds

Function Name : PERM 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.50 seconds (prove: 0.29, print: 0.00, other: 1.21)
Prover steps counted:  1740
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defgroup sorting qsort isort insert orderedp perm)
ALL-GROUPS
ACL2S !>(suggest-lemma t
	       :required-expressions orderedp insert
	       :with sorting
	       :hyps (lorp ls) (orderedp ls) (rationalp x))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1286 (1286 unique)
satisfied the hypotheses, and found 1286 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((X 0) (LS NIL))
 -- ((X -6/13) (LS NIL))
 -- ((X 1/39) (LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((X 0) (LS NIL))
                  ((X -6/13) (LS NIL))
                  ((X 1/39) (LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ORDEREDP ACL2S::INSERT) ACL2S::Q '(((ACL2S::X (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::LS NIL)) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1))) (ACL2S::LS NIL)) ((ACL2S::X (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1 0 0 1))) (ACL2S::LS NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LORP ACL2S::LS) (ACL2S::ORDEREDP ACL2S::LS) (RATIONALP ACL2S::X)) (EQUAL T (ACL2S::ORDEREDP (ACL2S::INSERT ACL2S::X ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (AND (LORP LS)
              (ORDEREDP LS)
              (RATIONALP X))
         (ORDEREDP (INSERT X LS)))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1311 (1311 unique)
satisfied the hypotheses, and found 0 counterexamples and 1311 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X 6/65) (LS NIL))
 -- ((X -1/9) (LS NIL))
 -- ((X 239/37) (LS NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (defthm insert-ordered
  (IMPLIES (AND (LORP LS)
		(ORDEREDP LS)
		(RATIONALP X))
	   (ORDEREDP (INSERT X LS))))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>


ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINTING, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as NOTES, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as HAS, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as BEEN, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOR, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as FOLLOWING, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as LIST, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as OF, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  The symbol :T (in package "KEYWORD") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context 
(:T :CGEN-TESTING-DRIVER-LOOP).

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14DFC306>, within "ER-LOOP).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TO, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as PRINT, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as THE, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as DEFERRED, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as TTAG, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error: Illegal symbol syntax.
While executing: CCL::%PARSE-TOKEN
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>
Note: Duplicates have been removed from the list of deferred ttag notes
before printing them below.

TTAG NOTE: Adding ttag :T from the top level loop.
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.
ACL2S !>
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x14DFC306>, within "G-NOTES).
":
Dot context error in ".".
While executing: CCL::SIGNAL-READER-ERROR
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as ACL2S, are not
allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>

ACL2 Error in TOP-LEVEL:  Global variables, such as !>, are not allowed.
See :DOC ASSIGN and :DOC @.

ACL2S !>(defthm insert-ordered
  (IMPLIES (AND (LORP LS)
		(ORDEREDP LS)
		(RATIONALP X))
	   (ORDEREDP (INSERT X LS))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Perhaps we can prove *1 by induction.  Three induction schemes are
suggested by this conjecture.  These merge into one derived induction
scheme.  

We will induct according to a scheme suggested by (INSERT X LS).  This
suggestion was produced using the :induction rules INSERT-INDUCTION-SCHEME,
INSERT-INDUCTION-SCHEME-FROM-DEFINITION, LORP, ORDEREDP-INDUCTION-SCHEME
and ORDEREDP-INDUCTION-SCHEME-FROM-DEFINITION.  If we let (:P LS X)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (AND (RATIONALP X) (LORP LS)))
              (:P LS X))
     (IMPLIES (AND (AND (RATIONALP X) (LORP LS))
                   (NOT (ENDP LS))
                   (NOT (LTE X (CAR LS)))
                   (:P (CDR LS) X))
              (:P LS X))
     (IMPLIES (AND (AND (RATIONALP X) (LORP LS))
                   (NOT (ENDP LS))
                   (LTE X (CAR LS)))
              (:P LS X))
     (IMPLIES (AND (AND (RATIONALP X) (LORP LS))
                   (ENDP LS))
              (:P LS X))).
This induction is justified by the same argument used to admit INSERT.
When applied to the goal at hand the above induction scheme produces
five nontautological subgoals.
Subgoal *1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/5' (2 subgoals).
  if-intro: ((:DEFINITION LORP)
             (:DEFINITION LTE-DEFINITION-RULE)
             (:DEFINITION ORDEREDP-DEFINITION-RULE))

Subgoal *1/5.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1.2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1.1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/5.1.1' (2 subgoals).
  if-intro: ((:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LORP)
             (:DEFINITION LTE-DEFINITION-RULE)
             (:DEFINITION ORDEREDP-DEFINITION-RULE))

Subgoal *1/5.1.1.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5.1.1.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/4' (2 subgoals).
  if-intro: ((:DEFINITION LORP)
             (:DEFINITION LTE-DEFINITION-RULE)
             (:DEFINITION ORDEREDP-DEFINITION-RULE))

Subgoal *1/4.2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal is COMPLETED!

Q.E.D.

Summary
Form:  ( DEFTHM INSERT-ORDERED ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LORP-IMPLIES-TLP)
        (:DEFINITION ENDP)
        (:DEFINITION INSERT-DEFINITION-RULE)
        (:DEFINITION LORP)
        (:DEFINITION LTE-DEFINITION-RULE)
        (:DEFINITION NOT)
        (:DEFINITION ORDEREDP-DEFINITION-RULE)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CAR)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART LORP)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART ORDEREDP)
        (:EXECUTABLE-COUNTERPART TRUE-LISTP)
        (:FAKE-RUNE-FOR-LINEAR NIL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING LOR=>DEF)
        (:INDUCTION INSERT-INDUCTION-SCHEME)
        (:INDUCTION INSERT-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION LORP)
        (:INDUCTION ORDEREDP-INDUCTION-SCHEME)
        (:INDUCTION ORDEREDP-INDUCTION-SCHEME-FROM-DEFINITION)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE CONS-LORP-SIG)
        (:REWRITE ACL2::CONSP-UNDER-IFF-WHEN-TRUE-LISTP)
        (:REWRITE ACL2::TRUE-LISTP-OF-CONS)
        (:TYPE-PRESCRIPTION INSERT-CONTRACT)
        (:TYPE-PRESCRIPTION LORP)
        (:TYPE-PRESCRIPTION ORDEREDP-CONTRACT))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION INSERT-DEFINITION-RULE)
             (:DEFINITION LORP)
             (:DEFINITION LTE-DEFINITION-RULE)
             (:DEFINITION ORDEREDP-DEFINITION-RULE))
Warnings:  Invariant-risk
Time:  0.54 seconds (prove: 0.31, print: 0.00, other: 0.23)
Prover steps counted:  8083

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 908 (908 unique)
satisfied the hypotheses, and found 0 counterexamples and 908 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X 1362/671) (LS '(0)))
 -- ((X 1/9) (LS '(-1)))
 -- ((X -1/5) (LS '(0)))
 INSERT-ORDERED

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma t
	       :required-expressions orderedp isort 
	       :with sorting
	       :hyps (lorp ls))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 740 (740 unique)
satisfied the hypotheses, and found 740 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((LS '(1/2)))
 -- ((LS '(-2 0 0)))
 -- ((LS NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((LS '(1/2)))
                  ((LS '(-2 0 0)))
                  ((LS NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::ORDEREDP ACL2S::ISORT) ACL2S::Q '(((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) NIL))) ((ACL2S::LS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) ((ACL2S::LS NIL))) '(T T T)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP T) (ACL2S::LORP ACL2S::LS)) (EQUAL T (ACL2S::ORDEREDP (ACL2S::ISORT ACL2S::LS)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal''
(IMPLIES (LORP LS)
         (ORDEREDP (ISORT LS)))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 739 (739 unique)
satisfied the hypotheses, and found 0 counterexamples and 739 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((LS NIL))
 -- ((LS '(-4/5)))
 -- ((LS '(-6/7)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm isort-ordered
  (IMPLIES (LORP LS)
	   (ORDEREDP (ISORT LS))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Perhaps we can prove *1 by induction.  Two induction schemes are suggested
by this conjecture.  These merge into one derived induction scheme.

We will induct according to a scheme suggested by (ISORT LS).  This
suggestion was produced using the :induction rules ISORT-INDUCTION-SCHEME,
ISORT-INDUCTION-SCHEME-FROM-DEFINITION and LORP.  If we let (:P LS)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (LORP LS)) (:P LS))
     (IMPLIES (AND (LORP LS)
                   (NOT (ENDP LS))
                   (:P (CDR LS)))
              (:P LS))
     (IMPLIES (AND (LORP LS) (ENDP LS))
              (:P LS))).
This induction is justified by the same argument used to admit ISORT.
When applied to the goal at hand the above induction scheme produces
three nontautological subgoals.
Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal is COMPLETED!

Q.E.D.

Summary
Form:  ( DEFTHM ISORT-ORDERED ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LORP-IMPLIES-TLP)
        (:DEFINITION ENDP)
        (:DEFINITION ISORT-DEFINITION-RULE)
        (:DEFINITION LORP)
        (:DEFINITION NOT)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART ISORT)
        (:EXECUTABLE-COUNTERPART ORDEREDP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING LOR=>DEF)
        (:INDUCTION ISORT-INDUCTION-SCHEME)
        (:INDUCTION ISORT-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION LORP)
        (:REWRITE INSERT-ORDERED)
        (:TYPE-PRESCRIPTION ISORT-CONTRACT)
        (:TYPE-PRESCRIPTION LORP)
        (:TYPE-PRESCRIPTION ORDEREDP-CONTRACT))
Warnings:  Invariant-risk
Time:  0.16 seconds (prove: 0.07, print: 0.00, other: 0.08)
Prover steps counted:  958

**Summary of Cgen/testing**
We tested 1000 examples across 1 subgoals, of which 494 (494 unique)
satisfied the hypotheses, and found 0 counterexamples and 494 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((LS '(-7/16)))
 -- ((LS '(-1/4)))
 -- ((LS NIL))
 ISORT-ORDERED

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 less-than-all (x xs)
  :input-contract (and (rationalp x) (lorp xs))
  :output-contract (booleanp (less-than-all x xs))
  (cond ((endp xs) t)
        ((lt x (car xs)) (less-than-all x (cdr xs)))
        (t nil)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS-THAN-ALL))
             '(CAR XS))
 (LORP XS)
 (RATIONALP X)
 (NOT (ENDP XS))
 (NOT (CONSP XS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LESS-THAN-ALL))
             '(CDR XS))
 (LORP XS)
 (RATIONALP X)
 (NOT (ENDP XS))
 (LT X (CAR XS))
 (NOT (CONSP XS)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.54 seconds
Form:  ( DEFUN LESS-THAN-ALL ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LESS-THAN-ALL-CONTRACT ...)
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LESS-THAN-ALL ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.16 seconds

Function Name : LESS-THAN-ALL 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.05 seconds (prove: 0.17, print: 0.00, other: 0.88)
Prover steps counted:  759
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ cd ..
bash-3.2$ cd ..
bash-3.2$ cd Desktop/ACL2s-practice/
bash-3.2$ ls
hmwk3.lisp		hw6.lisp		hw9-last-proof.lisp
hw10.lisp		hw7.lisp		hwk2.lisp
hw11-2.lisp		hw8.lisp		hwk3.lisp
hw11-2.lisp~		hw82.lisp		hwk9.lisp
hw11.lisp		hw9--revised.lisp	project-ideas.txt
hw5.lisp		hw9-2.lisp
bash-3.2$ cp hw10.lisp ~/lemmas/acl2s-raw/homework10.lisp
bash-3.2$ pwd
/Users/benboskin/Desktop/ACL2s-practice
bash-3.2$ cd ~/lemmas/acl2s-raw/
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.77 seconds (prove: 0.00, print: 0.00, other: 2.77)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 rev-tl (x acc)
  :input-contract (and (true-listp x) (true-listp acc))
  :output-contract (true-listp (rev-tl x acc))
  (if (endp x)
      acc
    (rev-tl (cdr x) (cons (car x) acc))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REV-TL))
             '(CAR X))
 (EXTRA-INFO '(:GUARD (:BODY REV-TL))
             '(CDR X))
 (TRUE-LISTP ACC)
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.68 seconds
Form:  ( DEFUN REV-TL ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM REV-TL-CONTRACT ...)
Time:  0.19 seconds (prove: 0.13, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.19 seconds (prove: 0.13, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS REV-TL ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.26 seconds

Function Name : REV-TL 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.22 seconds (prove: 0.39, print: 0.00, other: 0.84)
Prover steps counted:  14138
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc rev* (x)
  :input-contract (true-listp x) 
  :output-contract (true-listp (rev* x))
  (rev-tl x nil))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.11 seconds
Form:  ( DEFUN REV* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM REV*-CONTRACT ...)
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS REV* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : REV* 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (rev-tl x acc)
	       :required-expressions (reverse x)
	       :with append cons reverse)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REV-TL X ACC)
  (((TRUE-LISTP X)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1474 (1474 unique)
satisfied the hypotheses, and found 1474 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(ACL2::BA ACL2::BA)) (X '(3)))
 -- ((ACC '(2 15 0 1)) (X '(0 0)))
 -- ((ACC '(-1)) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(ACL2::BA ACL2::BA)) (X '(3)))
                  ((ACC '(2 15 0 1)) (X '(0 0)))
                  ((ACC '(-1)) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((REVERSE ACL2S::X)) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::ACC)) (EQUAL (ACL2S::REV-TL ACL2S::X ACL2S::ACC) (APPEND (REVERSE ACL2S::X) ACL2S::ACC))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REV X) ACC)))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1345 (1345 unique)
satisfied the hypotheses, and found 0 counterexamples and 1345 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '((-1 0) ACL2::A NIL 0)) (X NIL))
 -- ((ACC '(1)) (X NIL))
 -- ((ACC '(0)) (X '(413 20)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm rev-tl-help
  (IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REVERSE X) ACC))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REV X) ACC)))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Three induction schemes are
suggested by this conjecture.  These merge into two derived induction
schemes.  However, one of these is flawed and so we are left with one
viable candidate.  

We will induct according to a scheme suggested by (REV-TL X ACC). 
This suggestion was produced using the :induction rules 
REV-TL-INDUCTION-SCHEME, REV-TL-INDUCTION-SCHEME-FROM-DEFINITION and
TRUE-LISTP.  If we let (:P ACC X) denote *1 above then the induction
scheme we'll use is
(AND (IMPLIES (NOT (AND (TRUE-LISTP X) (TRUE-LISTP ACC)))
              (:P ACC X))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
                   (NOT (ENDP X))
                   (:P (CONS (CAR X) ACC) (CDR X)))
              (:P ACC X))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
                   (ENDP X))
              (:P ACC X))).
This induction is justified by the same argument used to admit REV-TL.
Note, however, that the unmeasured variable ACC is being instantiated.
When applied to the goal at hand the above induction scheme produces
four nontautological subgoals.
Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal' is COMPLETED!

Q.E.D.

Summary
Form:  ( DEFTHM REV-TL-HELP ...)
Rules: ((:DEFINITION ENDP)
        (:DEFINITION NOT)
        (:DEFINITION REV-TL-DEFINITION-RULE)
        (:DEFINITION TRUE-LISTP)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART REV)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION REV-TL-INDUCTION-SCHEME)
        (:INDUCTION REV-TL-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION TRUE-LISTP)
        (:REWRITE ACL2::APPEND-OF-CONS)
        (:REWRITE ACL2::APPEND-WHEN-NOT-CONSP)
        (:REWRITE ACL2::ASSOCIATIVITY-OF-APPEND)
        (:REWRITE ACL2::REV-OF-CONS)
        (:REWRITE ACL2::REVERSE-REMOVAL)
        (:REWRITE ACL2::TRUE-LISTP-WHEN-ATOM))
Warnings:  Invariant-risk
Time:  0.77 seconds (prove: 0.56, print: 0.00, other: 0.20)
Prover steps counted:  27776

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1249 (1249 unique)
satisfied the hypotheses, and found 0 counterexamples and 1249 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((ACC '(15 4 1)) (X '(NIL)))
 -- ((ACC NIL) (X '(0)))
 -- ((ACC '(27)) (X NIL))
 REV-TL-HELP

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (rev* l)
	       :with reverse)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REV* L) (((TRUE-LISTP L))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 976 (976 unique)
satisfied the hypotheses, and found 976 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((L NIL))
 -- ((L '((0 . #\A) #\B T 0)))
 -- ((L '(0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((L NIL))
                  ((L '((0 . #\A) #\B T 0)))
                  ((L '(0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::L NIL)) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CHAR #\A)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) '(NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CHAR #\A)) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::L)) (EQUAL (ACL2S::REV* ACL2S::L) (REVERSE ACL2S::L))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 449 (449 unique)
satisfied the hypotheses, and found 0 counterexamples and 449 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((L '(10)))
 -- ((L '(0)))
 -- ((L NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm rev*-rev
  (IMPLIES (TRUE-LISTP L)
         (EQUAL (REV* L) (REVERSE L))))

ACL2 Warning [Non-rec] in ( DEFTHM REV*-REV ...):  A :REWRITE rule
generated from REV*-REV will be triggered only by terms containing
the function symbol REV*, which has a non-recursive definition.  (Note
that REV* is defined with REV*-DEFINITION-RULE.)  Unless this definition
is disabled, this rule is unlikely ever to be used.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM REV*-REV ...)
Rules: ((:DEFINITION REV*-DEFINITION-RULE)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE ACL2::APPEND-OF-NIL)
        (:REWRITE ACL2::LIST-FIX-WHEN-TRUE-LISTP)
        (:REWRITE REV-TL-HELP)
        (:REWRITE ACL2::REVERSE-REMOVAL)
        (:TYPE-PRESCRIPTION REV))
Warnings:  Invariant-risk and Non-rec
Time:  0.07 seconds (prove: 0.04, print: 0.00, other: 0.02)
Prover steps counted:  760

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 233 (233 unique)
satisfied the hypotheses, and found 0 counterexamples and 233 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((L '(27 2)))
 -- ((L '(0)))
 -- ((L NIL))
 REV*-REV
ACL2S !>(defunc2 f1 (n)
  :input-contract (natp n)
  :output-contract (natp (f1 n))
  (if (< n 2)
      (+ n 4)
    (+ (f1 (- n 1))
       (f1 (- n 2)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Q.E.D.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Q.E.D.
Query: Testing function contract ... 

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION NATP))


Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (INTEGERP N) (<= 0 N))
         (INTEGERP (F1 N)))

*1 (Subgoal 2) is pushed for proof by induction.

])

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (INTEGERP N) (<= 0 N))
         (<= 0 (F1 N)))

*2 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *2 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 79.60 seconds

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  The value 0 is not of the expected type SYMBOL.
While executing: SYMBOL-NAME
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 lt (a b)
  :input-contract (and (rationalp a) (rationalp b))
  :output-contract (booleanp (lte a b))
  (< a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 
Cgen/Error: The input form is ill-formed, see below:

ACL2 Error in test? check:  The symbol LTE (in package "ACL2S") has
neither a function nor macro definition in ACL2.  Please define it.
See :DOC near-misses.  Note:  this error occurred in the context (LTE A B).

Elapsed Run Time: 0.02 seconds
Form:  ( DEFUN LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LT-CONTRACT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)

ACL2 Error in ( DEFTHM LT-CONTRACT ...):  See :DOC failure.

******** FAILED ********
Form:  ( DEFTHM LT-CONTRACT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)

ACL2 Error in ( DEFTHM LT-CONTRACT ...):  See :DOC failure.

******** FAILED ********
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.03 seconds


FAILED EVENTS: 
(PROGN (DEFUN LT (A B)
              (DECLARE (XARGS :GUARD (AND (RATIONALP A) (RATIONALP B))
                              :VERIFY-GUARDS NIL
                              :NORMALIZE NIL))
              (MBE :LOGIC (IF (AND (RATIONALP A) (RATIONALP B))
                              (< A B)
                              (ACL2S-UNDEFINED 'LT (LIST A B)))
                   :EXEC (< A B)))
       (DEFTHM LT-CONTRACT
               (IMPLIES (AND (RATIONALP A) (RATIONALP B))
                        (BOOLEANP (LTE A B))))
       (VERIFY-GUARDS LT
                      :GUARD-DEBUG T
                      :HINTS (("Goal" :DO-NOT-INDUCT T
                                      :DO-NOT '(GENERALIZE FERTILIZE)))))

Function Contract FAILED! You can provide :function-contract-hints
to help.

HARD ACL2 ERROR in DEFUNC:  
Submit the events shown above to replicate the failure.


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.31 seconds (prove: 0.00, print: 0.00, other: 0.31)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(defunc2 lt (a b)
  :input-contract (and (rationalp a) (rationalp b))
  :output-contract (booleanp (lt a b))
  (< a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.12 seconds
Form:  ( DEFUN LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LT-CONTRACT ...)
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.12 seconds

Function Name : LT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.54 seconds (prove: 0.05, print: 0.00, other: 0.49)
Prover steps counted:  107
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 f1 (n)
  :input-contract (natp n)
  :output-contract (natp (f1 n))
  (if (lt n 2)
      (+ n 4)
    (+ (f1 (- n 1))
       (f1 (- n 2)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Q.E.D.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Q.E.D.
Query: Testing function contract ... 

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION NATP))


Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (INTEGERP N) (<= 0 N))
         (INTEGERP (F1 N)))

*1 (Subgoal 2) is pushed for proof by induction.

])

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (INTEGERP N) (<= 0 N))
         (<= 0 (F1 N)))

*2 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *2 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 79.73 seconds
Form:  ( DEFUN F1 ...)
Time:  0.06 seconds (prove: 0.05, print: 0.00, other: 0.01)

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
Form:  ( DEFTHM F1-CONTRACT ...)
Time:  10.00 seconds (prove: 9.98, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  10.01 seconds (prove: 9.98, print: 0.00, other: 0.03)
Form:  ( VERIFY-GUARDS F1 ...)
Time:  0.05 seconds (prove: 0.04, print: 0.00, other: 0.00)
Elapsed Run Time: 10.21 seconds

Function Name : F1 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  90.24 seconds (prove: 59.55, print: 0.00, other: 30.69)
Prover steps counted:  2966
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 f1-t (r1 r2 i n)
  :input-contract (and (natp r1) (natp r2) (natp i) (natp n)
		       (<= i n) (>= i 2) (>= n 2))
  :output-contract (natp (f1-t r1 r2 i n))
  (cond ((equal n i) r2)
        (t (f1-t r2 (+ r1 r2) (+ i 1) n))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION NATP))


([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (INTEGERP R1)
              (<= 0 R1)
              (INTEGERP R2)
              (<= 0 R2)
              (INTEGERP I)
              (INTEGERP N)
              (<= I N)
              (<= 2 I)
              (<= 2 N))
         (INTEGERP (F1-T R1 R2 I N)))

*1 (Subgoal 2) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (INTEGERP R1)
              (<= 0 R1)
              (INTEGERP R2)
              (<= 0 R2)
              (INTEGERP I)
              (INTEGERP N)
              (<= I N)
              (<= 2 I)
              (<= 2 N))
         (<= 0 (F1-T R1 R2 I N)))

*2 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *2 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 2.69 seconds
Form:  ( DEFUN F1-T ...)
Time:  0.88 seconds (prove: 0.82, print: 0.00, other: 0.06)
Form:  ( DEFTHM F1-T-CONTRACT ...)
Time:  0.16 seconds (prove: 0.08, print: 0.00, other: 0.08)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.16 seconds (prove: 0.08, print: 0.00, other: 0.08)
Form:  ( VERIFY-GUARDS F1-T ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 1.98 seconds

Function Name : F1-T 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  4.99 seconds (prove: 2.10, print: 0.00, other: 2.88)
Prover steps counted:  22406
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 f1* (n)
  :input-contract (natp n)
  :output-contract (natp (f1* n))
  (if (lt n 2)
    (+ n 4)
    (f1-t 5 9 2 n)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.48 seconds
Form:  ( DEFUN F1* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM F1*-CONTRACT ...)
Time:  0.09 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.05, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS F1* ...)
Time:  0.02 seconds (prove: 0.02, print: 0.00, other: 0.00)
Elapsed Run Time: 0.17 seconds

Function Name : F1* 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.95 seconds (prove: 0.16, print: 0.00, other: 0.79)
Prover steps counted:  363
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (f1 3) (f1-t 5 9 2 3))
 :PASSED
ACL2S !>(check= (f1 10) (f1-t 5 9 2 10))
 :PASSED
ACL2S !>(check= (f1 2) (f1-t 5 9 2 2))
 :PASSED
ACL2S !>(check= (f1 34) (f1-t 5 9 2 34))
(check= (f1 3) (f1* 3))
 :PASSED
ACL2S !> :PASSED
ACL2S !>(check= (f1 10) (f1* 10))
 :PASSED
ACL2S !>(check= (f1 0) (f1* 0))
 :PASSED
ACL2S !>(check= (f1 1) (f1* 1))
 :PASSED
ACL2S !>(check= (f1 2) (f1* 2))
 :PASSED
ACL2S !>(check= (f1 27) (f1* 27))
 :PASSED
ACL2S !>(check=
 (f1* 500)
 1041789289209443203629775163014695572134115556242730069618664428622224082577610824311621607087410395288629)
 :PASSED
ACL2S !>(suggest-lemma (f1-t r1 r2 i n)
	       :with f1
	       :hyps (natp n) (natp r1) (natp r2) (natp i) (<= i n) (>= i 2) (>= n 2)
	       (equal r1 (f1 (- i 1)))
	       (equal r2 (f1 i)))

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM F1-T R1 R2 I N)
  (((NATP R1))
   ((NATP R2))
   ((NATP I))
   ((NATP N))
   ((NOT (< N I)))
   ((NOT (< I '2)))
   ((NOT (< N '2)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Goal''
(IMPLIES (AND (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (INTEGERP N)
              (<= I N)
              (<= 2 I))
         (< N 2))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (NATP ACL2S::R1) (NATP ACL2S::R2) (NATP ACL2S::I) (NATP ACL2S::N) (NOT (< ACL2S::N ACL2S::I)) (NOT (< ACL2S::I '2)) (NOT (< ACL2S::N '2)) (NATP ACL2S::N) (NATP ACL2S::R1) (NATP ACL2S::R2) (NATP ACL2S::I) (<= ACL2S::I ACL2S::N) (>= ACL2S::I 2) (>= ACL2S::N 2) (EQUAL ACL2S::R1 (ACL2S::F1 (- ACL2S::I 1))) (EQUAL ACL2S::R2 (ACL2S::F1 ACL2S::I))) (EQUAL (ACL2S::F1-T ACL2S::R1 ACL2S::R2 ACL2S::I ACL2S::N) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Goal''
(IMPLIES (AND (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (INTEGERP N)
              (<= I N)
              (<= 2 I)
              (<= 2 N))
         (EQUAL (F1-T (F1 (+ -1 I)) (F1 I) I N)
                ACL2::|_0|))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (NATP R1)
              (NATP R2)
              (NATP I)
              (NATP N)
              (NOT (< N I))
              (NOT (< I '2))
              (NOT (< N '2))
              (NATP N)
              (NATP R1)
              (NATP R2)
              (NATP I)
              (<= I N)
              (>= I 2)
              (>= N 2)
              (EQUAL R1 (F1 (- I 1)))
              (EQUAL R2 (F1 I)))
         (EQUAL (F1-T R1 R2 I N) ACL2::|_0|)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Goal''
(IMPLIES (AND (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (INTEGERP N)
              (<= I N)
              (<= 2 I)
              (<= 2 N))
         (EQUAL (F1-T (F1 (+ -1 I)) (F1 I) I N)
                ACL2::|_0|))

*1 (Goal'') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Three induction schemes are
suggested by this conjecture.  Subsumption reduces that number to two.
By considering those suggested by the largest number of non-primitive
recursive functions, we narrow the field to one.  

We will induct according to a scheme suggested by 
(F1-T (F1 (+ -1 I)) (F1 I) I N).  This suggestion was produced using
the :induction rules F1-T-INDUCTION-SCHEME and 
F1-T-INDUCTION-SCHEME-FROM-DEFINITION.  If we let (:P I N ACL2::|_0|)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (AND (NATP (F1 (+ -1 I)))
                        (NATP (F1 I))
                        (NATP I)
                        (NATP N)
                        (<= I N)
                        (<= 2 I)
                        (<= 2 N)))
              (:P I N ACL2::|_0|))
     (IMPLIES (AND (AND (NATP (F1 (+ -1 I)))
                        (NATP (F1 I))
                        (NATP I)
                        (NATP N)
                        (<= I N)
                        (<= 2 I)
                        (<= 2 N))
                   (NOT (EQUAL N I))
                   (:P (+ I 1) N ACL2::|_0|))
              (:P I N ACL2::|_0|))
     (IMPLIES (AND (AND (NATP (F1 (+ -1 I)))
                        (NATP (F1 I))
                        (NATP I)
                        (NATP N)
                        (<= I N)
                        (<= 2 I)
                        (<= 2 N))
                   (EQUAL N I))
              (:P I N ACL2::|_0|))).
This induction is justified by the same argument used to admit F1-T.
When applied to the goal at hand the above induction scheme produces
eight nontautological subgoals.
Subgoal *1/8

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/7''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/6

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
Subgoal *1/1'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
Subgoal *1/1'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint while proving *1 (descended from Goal''):

Subgoal *1/1''
(IMPLIES (AND (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (<= 2 I))
         (EQUAL (F1 I) ACL2::|_0|))

*1.1 (Subgoal *1/1'5') is pushed for proof by induction.

])

So we now return to *1.1, which is

(IMPLIES (AND (<= 0 (F1 (+ -1 I))) (INTEGERP I))
         (< I 2)).

No induction schemes are suggested by *1.1.  Consequently, the proof
attempt has failed.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::NATP-COMPOUND-RECOGNIZER)
        (:DEFINITION F1-DEFINITION-RULE)
        (:DEFINITION F1-T-DEFINITION-RULE)
        (:DEFINITION LT-DEFINITION-RULE)
        (:DEFINITION NATP)
        (:DEFINITION NOT)
        (:DEFINITION SYNP)
        (:EXECUTABLE-COUNTERPART <)
        (:EXECUTABLE-COUNTERPART BINARY-+)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART TAU-SYSTEM)
        (:FAKE-RUNE-FOR-LINEAR NIL)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION F1-T-INDUCTION-SCHEME)
        (:INDUCTION F1-T-INDUCTION-SCHEME-FROM-DEFINITION)
        (:REWRITE ACL2::|(+ 0 x)|)
        (:REWRITE ACL2::|(+ c (+ d x))|)
        (:REWRITE ACL2::|(+ x (- x))|)
        (:REWRITE ACL2::|(+ y (+ x z))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE ACL2::BUBBLE-DOWN-+-MATCH-1)
        (:REWRITE ACL2::NORMALIZE-ADDENDS)
        (:REWRITE ACL2::REMOVE-WEAK-INEQUALITIES)
        (:REWRITE ACL2::SIMPLIFY-SUMS-<)
        (:TYPE-PRESCRIPTION F1-CONTRACT))
Warnings:  Invariant-risk
Time:  50.12 seconds (prove: 49.59, print: 0.01, other: 0.52)
Prover steps counted:  8872

---
The key checkpoint goals, below, may help you to debug this failure.
See :DOC failure and see :DOC set-checkpoint-summary-limit.
---

*** Key checkpoint at the top level: ***

Goal''
(IMPLIES (AND (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (INTEGERP N)
              (<= I N)
              (<= 2 I)
              (<= 2 N))
         (EQUAL (F1-T (F1 (+ -1 I)) (F1 I) I N)
                ACL2::|_0|))

*** Key checkpoint under a top-level induction: ***

Subgoal *1/1''
(IMPLIES (AND (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (<= 2 I))
         (EQUAL (F1 I) ACL2::|_0|))

ACL2 Error in ( THM ...):  See :DOC failure.

******** FAILED ********

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (f1-t r1 r2 i n)
	       :with f1
	       :hyps (natp n) (natp r1) (natp r2) (natp i)
	       (<= i n) (>= i 2) (>= n 2)
	       (equal r1 (f1 (- i 1)))
	       (equal r2 (f1 i))
	       ;; added for speed
	       (<= n 30)
	       )

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM F1-T R1 R2 I N)
  (((NATP R1))
   ((NATP R2))
   ((NATP I))
   ((NATP N))
   ((NOT (< N I)))
   ((NOT (< I '2)))
   ((NOT (< N '2)))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Goal''
(IMPLIES (AND (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (INTEGERP N)
              (<= I N)
              (<= 2 I)
              (<= 2 N))
         (< 30 N))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (NATP ACL2S::R1) (NATP ACL2S::R2) (NATP ACL2S::I) (NATP ACL2S::N) (NOT (< ACL2S::N ACL2S::I)) (NOT (< ACL2S::I '2)) (NOT (< ACL2S::N '2)) (NATP ACL2S::N) (NATP ACL2S::R1) (NATP ACL2S::R2) (NATP ACL2S::I) (<= ACL2S::I ACL2S::N) (>= ACL2S::I 2) (>= ACL2S::N 2) (EQUAL ACL2S::R1 (ACL2S::F1 (- ACL2S::I 1))) (EQUAL ACL2S::R2 (ACL2S::F1 ACL2S::I)) (<= ACL2S::N 30)) (EQUAL (ACL2S::F1-T ACL2S::R1 ACL2S::R2 ACL2S::I ACL2S::N) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
  C-c C-c
***********************************************
Note:  interrupt signal
  Will attempt to exit the proof in progress;
  otherwise, the next interrupt will abort the proof.
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Goal''
(IMPLIES (AND (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (INTEGERP N)
              (<= I N)
              (<= 2 I)
              (<= 2 N)
              (<= N 30))
         (EQUAL (F1-T (F1 (+ -1 I)) (F1 I) I N)
                ACL2::|_0|))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (NATP R1)
              (NATP R2)
              (NATP I)
              (NATP N)
              (NOT (< N I))
              (NOT (< I '2))
              (NOT (< N '2))
              (NATP N)
              (NATP R1)
              (NATP R2)
              (NATP I)
              (<= I N)
              (>= I 2)
              (>= N 2)
              (EQUAL R1 (F1 (- I 1)))
              (EQUAL R2 (F1 I))
              (<= N 30))
         (EQUAL (F1-T R1 R2 I N) ACL2::|_0|))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (f1 n)
	       :with f1-t
	       :hyps (natp n) (natp r1) (natp r2) (natp i)
	       (<= i n) (>= i 2) (>= n 2)
	       (equal r1 (f1 (- i 1)))
	       (equal r2 (f1 i))
	       ;; added for speed
	       (<= n 30)
	       )

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM F1 N) (((NATP N))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
  C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL ACL2::ONEIFY7118 ACL2_*1*_ACL2S::F1 ACL2_*1*_ACL2S::F1)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (NATP ACL2S::N) (NATP ACL2S::N) (NATP ACL2S::R1) (NATP ACL2S::R2) (NATP ACL2S::I) (<= ACL2S::I ACL2S::N) (>= ACL2S::I 2) (>= ACL2S::N 2) (EQUAL ACL2S::R1 (ACL2S::F1 (- ACL2S::I 1))) (EQUAL ACL2S::R2 (ACL2S::F1 ACL2S::I)) (<= ACL2S::N 30)) (EQUAL (ACL2S::F1 ACL2S::N) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>(suggest-lemma (f1 n)
	       :with f1-t
	       :hyps (natp n) (natp r1) (natp r2) (natp i)
	       (<= i n) (>= i 2) (>= n 2)
	       (equal r1 (f1 (- i 1)))
	       (equal r2 (f1 i))
	       ;; added for speed
	       (<= n 10)
	       )
  C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL ACL2::ONEIFY7118 ACL2_*1*_ACL2S::F1 ACL2_*1*_ACL2S::F1)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (NATP ACL2S::N) (NATP ACL2S::N) (NATP ACL2S::R1) (NATP ACL2S::R2) (NATP ACL2S::I) (<= ACL2S::I ACL2S::N) (>= ACL2S::I 2) (>= ACL2S::N 2) (EQUAL ACL2S::R1 (ACL2S::F1 (- ACL2S::I 1))) (EQUAL ACL2S::R2 (ACL2S::F1 ACL2S::I)) (<= ACL2S::N 30)) (EQUAL (ACL2S::F1 ACL2S::N) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>  C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL ACL2::ONEIFY7118 ACL2_*1*_ACL2S::F1 ACL2_*1*_ACL2S::F1)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (NATP ACL2S::N) (NATP ACL2S::N) (NATP ACL2S::R1) (NATP ACL2S::R2) (NATP ACL2S::I) (<= ACL2S::I ACL2S::N) (>= ACL2S::I 2) (>= ACL2S::N 2) (EQUAL ACL2S::R1 (ACL2S::F1 (- ACL2S::I 1))) (EQUAL ACL2S::R2 (ACL2S::F1 ACL2S::I)) (<= ACL2S::N 30)) (EQUAL (ACL2S::F1 ACL2S::N) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>  C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL ACL2::ONEIFY7118 ACL2_*1*_ACL2S::F1 ACL2_*1*_ACL2S::F1)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (NATP ACL2S::N) (NATP ACL2S::N) (NATP ACL2S::R1) (NATP ACL2S::R2) (NATP ACL2S::I) (<= ACL2S::I ACL2S::N) (>= ACL2S::I 2) (>= ACL2S::N 2) (EQUAL ACL2S::R1 (ACL2S::F1 (- ACL2S::I 1))) (EQUAL ACL2S::R2 (ACL2S::F1 ACL2S::I)) (<= ACL2S::N 30)) (EQUAL (ACL2S::F1 ACL2S::N) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Goal''
(IMPLIES (AND (INTEGERP N)
              (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (<= I N)
              (<= 2 I)
              (<= 2 N)
              (<= N 30))
         (EQUAL (F1 N) ACL2::|_0|))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (NATP N)
              (NATP N)
              (NATP R1)
              (NATP R2)
              (NATP I)
              (<= I N)
              (>= I 2)
              (>= N 2)
              (EQUAL R1 (F1 (- I 1)))
              (EQUAL R2 (F1 I))
              (<= N 30))
         (EQUAL (F1 N) ACL2::|_0|))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ exit

Process shell finished
bash-3.2$ pwd
/Users/benboskin/lemmas/acl2s-raw
bash-3.2$ ccl-acl2s
bash: ccl-acl2s: command not found
bash-3.2$ source ~/.bash_profile
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.74 seconds (prove: 0.00, print: 0.00, other: 2.74)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 rev-tl (x acc)
  :input-contract (and (true-listp x) (true-listp acc))
  :output-contract (true-listp (rev-tl x acc))
  (if (endp x)
      acc
    (rev-tl (cdr x) (cons (car x) acc))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REV-TL))
             '(CAR X))
 (EXTRA-INFO '(:GUARD (:BODY REV-TL))
             '(CDR X))
 (TRUE-LISTP ACC)
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.68 seconds
Form:  ( DEFUN REV-TL ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM REV-TL-CONTRACT ...)
Time:  0.20 seconds (prove: 0.14, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.20 seconds (prove: 0.14, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS REV-TL ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.27 seconds

Function Name : REV-TL 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.23 seconds (prove: 0.40, print: 0.00, other: 0.83)
Prover steps counted:  14138
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc rev* (x)
  :input-contract (true-listp x) 
  :output-contract (true-listp (rev* x))
  (rev-tl x nil))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.11 seconds
Form:  ( DEFUN REV* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM REV*-CONTRACT ...)
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS REV* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : REV* 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (rev-tl x acc)
	       :required-expressions (reverse x)
	       :with append cons reverse)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REV-TL X ACC)
  (((TRUE-LISTP X)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1474 (1474 unique)
satisfied the hypotheses, and found 1474 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(ACL2::BA ACL2::BA)) (X '(3)))
 -- ((ACC '(2 15 0 1)) (X '(0 0)))
 -- ((ACC '(-1)) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(ACL2::BA ACL2::BA)) (X '(3)))
                  ((ACC '(2 15 0 1)) (X '(0 0)))
                  ((ACC '(-1)) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((REVERSE ACL2S::X)) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::ACC)) (EQUAL (ACL2S::REV-TL ACL2S::X ACL2S::ACC) (APPEND (REVERSE ACL2S::X) ACL2S::ACC))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REV X) ACC)))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1345 (1345 unique)
satisfied the hypotheses, and found 0 counterexamples and 1345 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '((-1 0) ACL2::A NIL 0)) (X NIL))
 -- ((ACC '(1)) (X NIL))
 -- ((ACC '(0)) (X '(413 20)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REVERSE X) ACC)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm rev-tl-help
  (IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REVERSE X) ACC))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REV X) ACC)))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Three induction schemes are
suggested by this conjecture.  These merge into two derived induction
schemes.  However, one of these is flawed and so we are left with one
viable candidate.  

We will induct according to a scheme suggested by (REV-TL X ACC). 
This suggestion was produced using the :induction rules 
REV-TL-INDUCTION-SCHEME, REV-TL-INDUCTION-SCHEME-FROM-DEFINITION and
TRUE-LISTP.  If we let (:P ACC X) denote *1 above then the induction
scheme we'll use is
(AND (IMPLIES (NOT (AND (TRUE-LISTP X) (TRUE-LISTP ACC)))
              (:P ACC X))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
                   (NOT (ENDP X))
                   (:P (CONS (CAR X) ACC) (CDR X)))
              (:P ACC X))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
                   (ENDP X))
              (:P ACC X))).
This induction is justified by the same argument used to admit REV-TL.
Note, however, that the unmeasured variable ACC is being instantiated.
When applied to the goal at hand the above induction scheme produces
four nontautological subgoals.
Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal' is COMPLETED!

Q.E.D.

Summary
Form:  ( DEFTHM REV-TL-HELP ...)
Rules: ((:DEFINITION ENDP)
        (:DEFINITION NOT)
        (:DEFINITION REV-TL-DEFINITION-RULE)
        (:DEFINITION TRUE-LISTP)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART REV)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION REV-TL-INDUCTION-SCHEME)
        (:INDUCTION REV-TL-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION TRUE-LISTP)
        (:REWRITE ACL2::APPEND-OF-CONS)
        (:REWRITE ACL2::APPEND-WHEN-NOT-CONSP)
        (:REWRITE ACL2::ASSOCIATIVITY-OF-APPEND)
        (:REWRITE ACL2::REV-OF-CONS)
        (:REWRITE ACL2::REVERSE-REMOVAL)
        (:REWRITE ACL2::TRUE-LISTP-WHEN-ATOM))
Warnings:  Invariant-risk
Time:  0.77 seconds (prove: 0.56, print: 0.00, other: 0.21)
Prover steps counted:  27776

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1249 (1249 unique)
satisfied the hypotheses, and found 0 counterexamples and 1249 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((ACC '(15 4 1)) (X '(NIL)))
 -- ((ACC NIL) (X '(0)))
 -- ((ACC '(27)) (X NIL))
 REV-TL-HELP

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (rev* l)
	       :with reverse)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REV* L) (((TRUE-LISTP L))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 976 (976 unique)
satisfied the hypotheses, and found 976 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((L NIL))
 -- ((L '((0 . #\A) #\B T 0)))
 -- ((L '(0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((L NIL))
                  ((L '((0 . #\A) #\B T 0)))
                  ((L '(0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::L NIL)) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CHAR #\A)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) '(NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CHAR #\A)) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::L)) (EQUAL (ACL2S::REV* ACL2S::L) (REVERSE ACL2S::L))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 449 (449 unique)
satisfied the hypotheses, and found 0 counterexamples and 449 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((L '(10)))
 -- ((L '(0)))
 -- ((L NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (TRUE-LISTP L)
         (EQUAL (REV* L) (REVERSE L)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm rev*-rev
  (IMPLIES (TRUE-LISTP L)
         (EQUAL (REV* L) (REVERSE L))))

ACL2 Warning [Non-rec] in ( DEFTHM REV*-REV ...):  A :REWRITE rule
generated from REV*-REV will be triggered only by terms containing
the function symbol REV*, which has a non-recursive definition.  (Note
that REV* is defined with REV*-DEFINITION-RULE.)  Unless this definition
is disabled, this rule is unlikely ever to be used.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM REV*-REV ...)
Rules: ((:DEFINITION REV*-DEFINITION-RULE)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE ACL2::APPEND-OF-NIL)
        (:REWRITE ACL2::LIST-FIX-WHEN-TRUE-LISTP)
        (:REWRITE REV-TL-HELP)
        (:REWRITE ACL2::REVERSE-REMOVAL)
        (:TYPE-PRESCRIPTION REV))
Warnings:  Invariant-risk and Non-rec
Time:  0.07 seconds (prove: 0.05, print: 0.00, other: 0.02)
Prover steps counted:  760

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 233 (233 unique)
satisfied the hypotheses, and found 0 counterexamples and 233 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((L '(27 2)))
 -- ((L '(0)))
 -- ((L NIL))
 REV*-REV
ACL2S !>(defunc2 lt (a b)
  :input-contract (and (rationalp a) (rationalp b))
  :output-contract (booleanp (lt a b))
  (< a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.12 seconds
Form:  ( DEFUN LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LT-CONTRACT ...)
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : LT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.52 seconds (prove: 0.05, print: 0.00, other: 0.47)
Prover steps counted:  107
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 f1 (n)
  :input-contract (natp n)
  :output-contract (natp (f1 n))
  (if (lt n 2)
      (+ n 4)
    (+ (f1 (- n 1))
       (f1 (- n 2)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Q.E.D.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Q.E.D.
Query: Testing function contract ... 

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION NATP))


Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (INTEGERP N) (<= 0 N))
         (INTEGERP (F1 N)))

*1 (Subgoal 2) is pushed for proof by induction.

])

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (INTEGERP N) (<= 0 N))
         (<= 0 (F1 N)))

*2 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *2 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 80.30 seconds
Form:  ( DEFUN F1 ...)
Time:  0.06 seconds (prove: 0.05, print: 0.00, other: 0.01)

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.
Form:  ( DEFTHM F1-CONTRACT ...)
Time:  10.00 seconds (prove: 9.96, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  10.00 seconds (prove: 9.96, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS F1 ...)
Time:  0.05 seconds (prove: 0.05, print: 0.00, other: 0.00)
Elapsed Run Time: 10.20 seconds

Function Name : F1 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  90.80 seconds (prove: 59.86, print: 0.00, other: 30.94)
Prover steps counted:  2966
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 f1-t (r1 r2 i n)
  :input-contract (and (natp r1) (natp r2) (natp i) (natp n)
		       (<= i n) (>= i 2) (>= n 2))
  :output-contract (natp (f1-t r1 r2 i n))
  (cond ((equal n i) r2)
        (t (f1-t r2 (+ r1 r2) (+ i 1) n))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Splitter note (see :DOC splitter) for Goal' (2 subgoals).
  if-intro: ((:DEFINITION NATP))


([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (INTEGERP R1)
              (<= 0 R1)
              (INTEGERP R2)
              (<= 0 R2)
              (INTEGERP I)
              (INTEGERP N)
              (<= I N)
              (<= 2 I)
              (<= 2 N))
         (INTEGERP (F1-T R1 R2 I N)))

*1 (Subgoal 2) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (INTEGERP R1)
              (<= 0 R1)
              (INTEGERP R2)
              (<= 0 R2)
              (INTEGERP I)
              (INTEGERP N)
              (<= I N)
              (<= 2 I)
              (<= 2 N))
         (<= 0 (F1-T R1 R2 I N)))

*2 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *2 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 2.73 seconds
Form:  ( DEFUN F1-T ...)
Time:  0.90 seconds (prove: 0.85, print: 0.00, other: 0.06)
Form:  ( DEFTHM F1-T-CONTRACT ...)
Time:  0.18 seconds (prove: 0.10, print: 0.00, other: 0.08)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.18 seconds (prove: 0.10, print: 0.00, other: 0.08)
Form:  ( VERIFY-GUARDS F1-T ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 2.01 seconds

Function Name : F1-T 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  5.09 seconds (prove: 2.15, print: 0.01, other: 2.93)
Prover steps counted:  22406
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 f1* (n)
  :input-contract (natp n)
  :output-contract (natp (f1* n))
  (if (lt n 2)
    (+ n 4)
    (f1-t 5 9 2 n)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.45 seconds
Form:  ( DEFUN F1* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM F1*-CONTRACT ...)
Time:  0.09 seconds (prove: 0.06, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.06, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS F1* ...)
Time:  0.02 seconds (prove: 0.02, print: 0.00, other: 0.00)
Elapsed Run Time: 0.16 seconds

Function Name : F1* 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.92 seconds (prove: 0.16, print: 0.00, other: 0.76)
Prover steps counted:  363
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (f1 3) (f1-t 5 9 2 3))
 :PASSED
ACL2S !>(check= (f1 10) (f1-t 5 9 2 10))
 :PASSED
ACL2S !>(check= (f1 2) (f1-t 5 9 2 2))
 :PASSED
ACL2S !>(check= (f1 34) (f1-t 5 9 2 34))
(check= (f1 3) (f1* 3))
 :PASSED
ACL2S !> :PASSED
ACL2S !>(check= (f1 10) (f1* 10))
 :PASSED
ACL2S !>(check= (f1 0) (f1* 0))
 :PASSED
ACL2S !>(check= (f1 1) (f1* 1))
 :PASSED
ACL2S !>(check= (f1 2) (f1* 2))
 :PASSED
ACL2S !>(check= (f1 27) (f1* 27))
 :PASSED
ACL2S !>(suggest-lemma (f1 n)
	       :with f1-t
	       :hyps (natp n) (natp r1) (natp r2) (natp i)
	       (<= i n) (>= i 2) (>= n 2)
	       (equal r1 (f1 (- i 1)))
	       (equal r2 (f1 i))
	       ;; added for speed
	       (<= n 10)
	       )

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM F1 N) (((NATP N))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Goal''
(IMPLIES (AND (INTEGERP N)
              (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (<= I N)
              (<= 2 I)
              (<= 2 N))
         (< 10 N))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q 'NIL 'NIL) 
"form tested" 
(IMPLIES (AND (NATP ACL2S::N) (NATP ACL2S::N) (NATP ACL2S::R1) (NATP ACL2S::R2) (NATP ACL2S::I) (<= ACL2S::I ACL2S::N) (>= ACL2S::I 2) (>= ACL2S::N 2) (EQUAL ACL2S::R1 (ACL2S::F1 (- ACL2S::I 1))) (EQUAL ACL2S::R2 (ACL2S::F1 ACL2S::I)) (<= ACL2S::N 10)) (EQUAL (ACL2S::F1 ACL2S::N) _0)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

Search for counterexamples TIMED OUT! 
Use (acl2s-defaults :set cgen-local-timeout 0) to disable timeout.
For more information see :doc cgen-local-timeout.

([ A key checkpoint:

Goal''
(IMPLIES (AND (INTEGERP N)
              (<= 0 (F1 (+ -1 I)))
              (<= 0 (F1 I))
              (INTEGERP I)
              (<= I N)
              (<= 2 I)
              (<= 2 N)
              (<= N 10))
         (EQUAL (F1 N) ACL2::|_0|))

*1 (Goal'') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (NATP N)
              (NATP N)
              (NATP R1)
              (NATP R2)
              (NATP I)
              (<= I N)
              (>= I 2)
              (>= N 2)
              (EQUAL R1 (F1 (- I 1)))
              (EQUAL R2 (F1 I))
              (<= N 10))
         (EQUAL (F1 N) ACL2::|_0|))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 lor (listof rational))
 Predicate events...
Form:  ( DEFUN LORP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LORP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LORP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LORP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOR ...)
Form:  ( DEFTHM LOR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOR-BUILTIN ...)
Form:  ( DEFUN NTH-LOR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  1.94 seconds (prove: 0.60, print: 0.00, other: 1.34)
 Registering type...
Form:  ( DEFUN NTH-LOR ...)
Form:  ( ENCAPSULATE (((NTH-LOR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOR NTH-LOR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOR/ACC NTH-LOR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.97 seconds (prove: 0.60, print: 0.00, other: 1.37)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  2.26 seconds (prove: 0.60, print: 0.00, other: 1.66)
Prover steps counted:  5385
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (lorp (insert a x))
  (cond ((endp x) (cons a nil))
        ((<= a (car x)) (cons a x))
        (t (cons (car x) (insert a (cdr x))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (< (CAR X) A)
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.61 seconds
Form:  ( DEFUN INSERT ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM INSERT-CONTRACT ...)
Time:  0.10 seconds (prove: 0.06, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.10 seconds (prove: 0.06, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS INSERT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.19 seconds

Function Name : INSERT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.09 seconds (prove: 0.23, print: 0.00, other: 0.87)
Prover steps counted:  1872
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert-t (a x acc)
  :input-contract (and (rationalp a) (lorp x) (lorp acc))
  :output-contract (lorp (insert-t a x acc))
  (cond ((endp x) (rev* (cons a acc)))
        ((<= a (car x)) (app (rev* acc) (cons a x)))
        (t (insert-t a (cdr x) (cons (car x) acc)))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol REV*
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(defunc2 rev-tl (x acc)
  :input-contract (and (true-listp x) (true-listp acc))
  :output-contract (true-listp (rev-tl x acc))
  (if (endp x)
      acc
    (rev-tl (cdr x) (cons (car x) acc))))


ACL2 Error in ( DEFUN REV-TL ...):  The name REV-TL is in use as a
function.  Note that the proposed body for REV-TL,

(IF (ENDP X) ACC (REV-TL (CDR X) (CONS (CAR X) ACC))),

differs from the existing body,

(MBE :LOGIC (IF (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
                (IF (ENDP X)
                    ACC (REV-TL (CDR X) (CONS # ACC)))
                (ACL2S-UNDEFINED 'REV-TL (LIST X ACC)))
     :EXEC (IF (ENDP X)
               ACC
               (REV-TL (CDR X) (CONS (CAR X) ACC)))).

The redefinition feature is currently off.  See :DOC ld-redefinition-
action.
(See :DOC set-iprint to be able to see elided values in this message.)


Note: REV-TL was previously defined at the top level.


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.31 seconds (prove: 0.00, print: 0.00, other: 0.31)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(defunc rev* (x)
  :input-contract (true-listp x) 
  :output-contract (true-listp (rev* x))
  (rev-tl x nil))


ACL2 Error in ( DEFUN REV* ...):  The name REV* is in use as a function.
Note that the proposed body for REV*,

(REV-TL X NIL),

differs from the existing body,

(MBE :LOGIC (IF (TRUE-LISTP X)
                (REV-TL X NIL)
                (ACL2S-UNDEFINED 'REV* (LIST X)))
     :EXEC (REV-TL X NIL)).

The redefinition feature is currently off.  See :DOC ld-redefinition-
action.


Note: REV* was previously defined at the top level.

ACL2S !>(defunc2 insert-t (a x acc)
  :input-contract (and (rationalp a) (lorp x) (lorp acc))
  :output-contract (lorp (insert-t a x acc))
  (cond ((endp x) (rev* (cons a acc)))
        ((<= a (car x)) (append (rev* acc) (cons a x)))
        (t (insert-t a (cdr x) (cons (car x) acc)))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol REV*
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.72 seconds (prove: 0.00, print: 0.00, other: 2.72)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defunc2 rev-tl (x acc)
  :input-contract (and (true-listp x) (true-listp acc))
  :output-contract (true-listp (rev-tl x acc))
  (if (endp x)
      acc
    (rev-tl (cdr x) (cons (car x) acc))))
(defunc2 rev* (x)
  :input-contract (true-listp x) 
  :output-contract (true-listp (rev* x))
  (rev-tl x nil))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY REV-TL))
             '(CAR X))
 (EXTRA-INFO '(:GUARD (:BODY REV-TL))
             '(CDR X))
 (TRUE-LISTP ACC)
 (TRUE-LISTP X)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.70 seconds
Form:  ( DEFUN REV-TL ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM REV-TL-CONTRACT ...)
Time:  0.18 seconds (prove: 0.13, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.18 seconds (prove: 0.13, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS REV-TL ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.25 seconds

Function Name : REV-TL 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.25 seconds (prove: 0.39, print: 0.00, other: 0.86)
Prover steps counted:  14138
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.10 seconds
Form:  ( DEFUN REV* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM REV*-CONTRACT ...)
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS REV* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : REV* 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.50 seconds (prove: 0.05, print: 0.00, other: 0.44)
Prover steps counted:  766
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (rev-tl x acc)
	       :required-expressions (reverse x)
	       :with append cons reverse)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REV-TL X ACC)
  (((TRUE-LISTP X)) ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1474 (1474 unique)
satisfied the hypotheses, and found 1474 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(ACL2::BA ACL2::BA)) (X '(3)))
 -- ((ACC '(2 15 0 1)) (X '(0 0)))
 -- ((ACC '(-1)) (X NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(ACL2::BA ACL2::BA)) (X '(3)))
                  ((ACC '(2 15 0 1)) (X '(0 0)))
                  ((ACC '(-1)) (X NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((REVERSE ACL2S::X)) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::X NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)))))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::ACC)) (EQUAL (ACL2S::REV-TL ACL2S::X ACL2S::ACC) (APPEND (REVERSE ACL2S::X) ACL2S::ACC))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REV X) ACC)))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1345 (1345 unique)
satisfied the hypotheses, and found 0 counterexamples and 1345 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '((-1 0) ACL2::A NIL 0)) (X NIL))
 -- ((ACC '(1)) (X NIL))
 -- ((ACC '(0)) (X '(413 20)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REVERSE X) ACC)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm rev-tl-help
  (IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REVERSE X) ACC))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
         (EQUAL (REV-TL X ACC)
                (APPEND (REV X) ACC)))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Three induction schemes are
suggested by this conjecture.  These merge into two derived induction
schemes.  However, one of these is flawed and so we are left with one
viable candidate.  

We will induct according to a scheme suggested by (REV-TL X ACC). 
This suggestion was produced using the :induction rules 
REV-TL-INDUCTION-SCHEME, REV-TL-INDUCTION-SCHEME-FROM-DEFINITION and
TRUE-LISTP.  If we let (:P ACC X) denote *1 above then the induction
scheme we'll use is
(AND (IMPLIES (NOT (AND (TRUE-LISTP X) (TRUE-LISTP ACC)))
              (:P ACC X))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
                   (NOT (ENDP X))
                   (:P (CONS (CAR X) ACC) (CDR X)))
              (:P ACC X))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP ACC))
                   (ENDP X))
              (:P ACC X))).
This induction is justified by the same argument used to admit REV-TL.
Note, however, that the unmeasured variable ACC is being instantiated.
When applied to the goal at hand the above induction scheme produces
four nontautological subgoals.
Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal' is COMPLETED!

Q.E.D.

Summary
Form:  ( DEFTHM REV-TL-HELP ...)
Rules: ((:DEFINITION ENDP)
        (:DEFINITION NOT)
        (:DEFINITION REV-TL-DEFINITION-RULE)
        (:DEFINITION TRUE-LISTP)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART REV)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION REV-TL-INDUCTION-SCHEME)
        (:INDUCTION REV-TL-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION TRUE-LISTP)
        (:REWRITE ACL2::APPEND-OF-CONS)
        (:REWRITE ACL2::APPEND-WHEN-NOT-CONSP)
        (:REWRITE ACL2::ASSOCIATIVITY-OF-APPEND)
        (:REWRITE ACL2::REV-OF-CONS)
        (:REWRITE ACL2::REVERSE-REMOVAL)
        (:REWRITE ACL2::TRUE-LISTP-WHEN-ATOM))
Warnings:  Invariant-risk
Time:  0.76 seconds (prove: 0.56, print: 0.00, other: 0.20)
Prover steps counted:  27776

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1249 (1249 unique)
satisfied the hypotheses, and found 0 counterexamples and 1249 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((ACC '(15 4 1)) (X '(NIL)))
 -- ((ACC NIL) (X '(0)))
 -- ((ACC '(27)) (X NIL))
 REV-TL-HELP

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (rev* l)
	       :with reverse)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM REV* L) (((TRUE-LISTP L))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 976 (976 unique)
satisfied the hypotheses, and found 976 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((L NIL))
 -- ((L '((0 . #\A) #\B T 0)))
 -- ((L '(0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((L NIL))
                  ((L '((0 . #\A) #\B T 0)))
                  ((L '(0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::L NIL)) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CHAR #\A)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::L (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) '(NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS T (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\B) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CHAR #\A)) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::L)) (EQUAL (ACL2S::REV* ACL2S::L) (REVERSE ACL2S::L))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 449 (449 unique)
satisfied the hypotheses, and found 0 counterexamples and 449 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((L '(10)))
 -- ((L '(0)))
 -- ((L NIL))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (TRUE-LISTP L)
         (EQUAL (REV* L) (REVERSE L)))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm rev*-rev
  (IMPLIES (TRUE-LISTP L)
         (EQUAL (REV* L) (REVERSE L))))

ACL2 Warning [Non-rec] in ( DEFTHM REV*-REV ...):  A :REWRITE rule
generated from REV*-REV will be triggered only by terms containing
the function symbol REV*, which has a non-recursive definition.  (Note
that REV* is defined with REV*-DEFINITION-RULE.)  Unless this definition
is disabled, this rule is unlikely ever to be used.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM REV*-REV ...)
Rules: ((:DEFINITION REV*-DEFINITION-RULE)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE ACL2::APPEND-OF-NIL)
        (:REWRITE ACL2::LIST-FIX-WHEN-TRUE-LISTP)
        (:REWRITE REV-TL-HELP)
        (:REWRITE ACL2::REVERSE-REMOVAL)
        (:TYPE-PRESCRIPTION REV))
Warnings:  Invariant-risk and Non-rec
Time:  0.07 seconds (prove: 0.04, print: 0.00, other: 0.03)
Prover steps counted:  760

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 233 (233 unique)
satisfied the hypotheses, and found 0 counterexamples and 233 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((L '(27 2)))
 -- ((L '(0)))
 -- ((L NIL))
 REV*-REV
ACL2S !>(defunc2 lt (a b)
  :input-contract (and (rationalp a) (rationalp b))
  :output-contract (booleanp (lt a b))
  (< a b))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.12 seconds
Form:  ( DEFUN LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM LT-CONTRACT ...)
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : LT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.52 seconds (prove: 0.04, print: 0.00, other: 0.47)
Prover steps counted:  107
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 lor (listof rational))
 Predicate events...
Form:  ( DEFUN LORP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::LORP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::LORP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: LORP relatively complete for Tau.
Form:  ( DEFTHM DEF=>LOR ...)
Form:  ( DEFTHM LOR=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-LORP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-LOR-BUILTIN ...)
Form:  ( DEFUN NTH-LOR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.96 seconds (prove: 0.62, print: 0.00, other: 0.34)
 Registering type...
Form:  ( DEFUN NTH-LOR ...)
Form:  ( ENCAPSULATE (((NTH-LOR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOR NTH-LOR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOR/ACC NTH-LOR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.00 seconds (prove: 0.62, print: 0.00, other: 0.38)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.27 seconds (prove: 0.62, print: 0.00, other: 0.65)
Prover steps counted:  5385
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (lorp (insert a x))
  (cond ((endp x) (cons a nil))
        ((<= a (car x)) (cons a x))
        (t (cons (car x) (insert a (cdr x))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY INSERT))
             '(CAR X))
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (< (CAR X) A)
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 0.63 seconds
Form:  ( DEFUN INSERT ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM INSERT-CONTRACT ...)
Time:  0.11 seconds (prove: 0.06, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.11 seconds (prove: 0.06, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS INSERT ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.18 seconds

Function Name : INSERT 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.12 seconds (prove: 0.22, print: 0.00, other: 0.90)
Prover steps counted:  1872
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert-t (a x acc)
  :input-contract (and (rationalp a) (lorp x) (lorp acc))
  :output-contract (lorp (insert-t a x acc))
  (cond ((endp x) (rev* (cons a acc)))
        ((<= a (car x)) (append (rev* acc) (cons a x)))
        (t (insert-t a (cdr x) (cons (car x) acc)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT-T))
             '(CAR X))
 (LORP ACC)
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY INSERT-T))
             '(CAR X))
 (EXTRA-INFO '(:GUARD (:BODY INSERT-T))
             '(CDR X))
 (LORP ACC)
 (LORP X)
 (RATIONALP A)
 (NOT (ENDP X))
 (< (CAR X) A)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 1.25 seconds
Form:  ( DEFUN INSERT-T ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM INSERT-T-CONTRACT ...)
Time:  0.15 seconds (prove: 0.10, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.15 seconds (prove: 0.10, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS INSERT-T ...)
Time:  0.02 seconds (prove: 0.01, print: 0.00, other: 0.00)
Elapsed Run Time: 0.24 seconds

Function Name : INSERT-T 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.81 seconds (prove: 0.41, print: 0.00, other: 1.40)
Prover steps counted:  3612
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 insert* (a x)
  :input-contract (and (rationalp a) (lorp x))
  :output-contract (lorp (insert a x))
  (insert-t a x nil))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.12 seconds
Form:  ( DEFUN INSERT* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM INSERT*-CONTRACT ...)
Time:  0.07 seconds (prove: 0.02, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.07 seconds (prove: 0.02, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS INSERT* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : INSERT* 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.56 seconds (prove: 0.05, print: 0.00, other: 0.51)
Prover steps counted:  30
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (insert-t a x acc)
	       :required-expressions (insert a x)
	       :with append reverse insert)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM INSERT-T A X ACC)
  (((RATIONALP A))
   ((LORP X))
   ((LORP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1500 (1500 unique)
satisfied the hypotheses, and found 1500 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC NIL) (X '(-1/3 -1)) (A -1/3))
 -- ((ACC '(-1/7)) (X NIL) (A -1/4))
 -- ((ACC NIL) (X '(1/4)) (A -1))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC NIL) (X '(-1/3 -1)) (A -1/3))
                  ((ACC '(-1/7)) (X NIL) (A -1/4))
                  ((ACC NIL) (X '(1/4)) (A -1))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::INSERT ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::ACC NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)))) ((ACL2S::ACC NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (1) 1)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) NIL)))) 
"form tested" 
(IMPLIES (AND (RATIONALP ACL2S::A) (ACL2S::LORP ACL2S::X) (ACL2S::LORP ACL2S::ACC)) (EQUAL (ACL2S::INSERT-T ACL2S::A ACL2S::X ACL2S::ACC) (APPEND ACL2S::ACC (ACL2S::INSERT ACL2S::A ACL2S::X)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 14 examples across 1 subgoals, of which 14 (14 unique) satisfied
the hypotheses, and found 3 counterexamples and 11 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(-10/13 1/2)) (X NIL) (A -643/1441))
 -- ((ACC '(-2/25 -1/4)) (X '(9/49)) (A 0))
 -- ((ACC '(7/11 -2/3 -1)) (X NIL) (A 137/243))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(-1 -1)) (X NIL) (A -112/39))
 -- ((ACC '(0)) (X NIL) (A -13/32))
 -- ((ACC '(0 0 0)) (X NIL) (A 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(-10/13 1/2))
                   (X NIL)
                   (A -643/1441))
                  ((ACC '(-2/25 -1/4)) (X '(9/49)) (A 0))
                  ((ACC '(7/11 -2/3 -1))
                   (X NIL)
                   (A 137/243))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::INSERT ACL2S::A ACL2S::X)) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) NIL))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 0 0 0 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1 0 1 1 0 1)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) NIL))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (0)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 0 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 1 1 1)))) ((ACL2S::ACC NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1)) NIL)) (ACL2S::X NIL) (ACL2S::A (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)))) ((ACL2S::ACC NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) NIL)) (ACL2S::A (ACL2S::INTERNAL-NUMBER (1) 1)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 0 0 0 1 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 0 1 0 1 1 0 1)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 0 1 1)) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 1 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1 0 0 1 0 0 0 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 1 1 1 1)) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 1 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (RATIONAL) (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1)) NIL)))) 
"form tested" 
(IMPLIES (AND (RATIONALP ACL2S::A) (ACL2S::LORP ACL2S::X) (ACL2S::LORP ACL2S::ACC)) (EQUAL (ACL2S::INSERT-T ACL2S::A ACL2S::X ACL2S::ACC) (APPEND (REVERSE ACL2S::ACC) (ACL2S::INSERT ACL2S::A ACL2S::X)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (RATIONALP A) (LORP X) (LORP ACC))
         (EQUAL (INSERT-T A X ACC)
                (APPEND (REV ACC) (INSERT A X))))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1479 (1479 unique)
satisfied the hypotheses, and found 0 counterexamples and 1479 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (X NIL) (A 0))
 -- ((ACC NIL) (X NIL) (A 453/77))
 -- ((ACC NIL) (X NIL) (A -728/529))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm
 (IMPLIES (AND (RATIONALP A) (LORP X) (LORP ACC))
	  (EQUAL (INSERT-T A X ACC)
		 (APPEND (REVERSE ACC) (INSERT A X)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

([ A key checkpoint:

Goal'
(IMPLIES (AND (RATIONALP A) (LORP X) (LORP ACC))
         (EQUAL (INSERT-T A X ACC)
                (APPEND (REV ACC) (INSERT A X))))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Four induction schemes are suggested
by this conjecture.  These merge into two derived induction schemes.
However, one of these is flawed and so we are left with one viable
candidate.  

We will induct according to a scheme suggested by (INSERT A X), but
modified to accommodate (INSERT-T A X ACC).  These suggestions were
produced using the :induction rules INSERT-INDUCTION-SCHEME, 
INSERT-INDUCTION-SCHEME-FROM-DEFINITION, INSERT-T-INDUCTION-SCHEME,
INSERT-T-INDUCTION-SCHEME-FROM-DEFINITION and LORP.  If we let (:P A ACC X)
denote *1 above then the induction scheme we'll use is
(AND (IMPLIES (NOT (AND (RATIONALP A) (LORP X)))
              (:P A ACC X))
     (IMPLIES (AND (AND (RATIONALP A) (LORP X))
                   (NOT (ENDP X))
                   (< (CAR X) A)
                   (:P A (CONS (CAR X) ACC) (CDR X)))
              (:P A ACC X))
     (IMPLIES (AND (AND (RATIONALP A) (LORP X))
                   (NOT (ENDP X))
                   (<= A (CAR X)))
              (:P A ACC X))
     (IMPLIES (AND (AND (RATIONALP A) (LORP X))
                   (ENDP X))
              (:P A ACC X))).
This induction is justified by the same argument used to admit INSERT.
Note, however, that the unmeasured variable ACC is being instantiated.
When applied to the goal at hand the above induction scheme produces
five nontautological subgoals.
Subgoal *1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal' is COMPLETED!

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::LORP-IMPLIES-TLP)
        (:DEFINITION ENDP)
        (:DEFINITION INSERT-DEFINITION-RULE)
        (:DEFINITION INSERT-T-DEFINITION-RULE)
        (:DEFINITION LORP)
        (:DEFINITION NOT)
        (:DEFINITION SYNP)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART LORP)
        (:EXECUTABLE-COUNTERPART TAU-SYSTEM)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING LOR=>DEF)
        (:INDUCTION INSERT-INDUCTION-SCHEME)
        (:INDUCTION INSERT-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION INSERT-T-INDUCTION-SCHEME)
        (:INDUCTION INSERT-T-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION LORP)
        (:REWRITE ACL2::APPEND-OF-CONS)
        (:REWRITE ACL2::APPEND-WHEN-NOT-CONSP)
        (:REWRITE ACL2::ASSOCIATIVITY-OF-APPEND)
        (:REWRITE ACL2::REMOVE-STRICT-INEQUALITIES)
        (:REWRITE ACL2::REMOVE-WEAK-INEQUALITIES)
        (:REWRITE REV*-REV)
        (:REWRITE ACL2::REV-OF-CONS)
        (:REWRITE ACL2::REVERSE-REMOVAL))
Warnings:  Invariant-risk
Time:  0.29 seconds (prove: 0.20, print: 0.01, other: 0.08)
Prover steps counted:  4019

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 1000 (1000 unique)
satisfied the hypotheses, and found 0 counterexamples and 1000 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((ACC NIL) (X '(1/5 -1/2 -1)) (A -1/3))
 -- ((ACC NIL) (X NIL) (A -3/247))
 -- ((ACC NIL) (X NIL) (A 1655/28))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 zip-list (x y)
  :input-contract (and (true-listp x) (true-listp y))
  :output-contract (true-listp (zip-list x y))
  (if (or (endp x) (endp y))
    nil
    (cons (cons (car x) (cons (car y) nil))
          (zip-list (cdr x)
                    (cdr y)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ZIP-LIST))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY ZIP-LIST))
             '(CAR X))
 (TRUE-LISTP Y)
 (TRUE-LISTP X)
 (NOT (IF (ENDP X) (ENDP X) (ENDP Y)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ZIP-LIST))
             '(CDR Y))
 (EXTRA-INFO '(:GUARD (:BODY ZIP-LIST))
             '(CAR Y))
 (TRUE-LISTP Y)
 (TRUE-LISTP X)
 (NOT (IF (ENDP X) (ENDP X) (ENDP Y)))
 (NOT (CONSP Y)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.78 seconds
Form:  ( DEFUN ZIP-LIST ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ZIP-LIST-CONTRACT ...)
Time:  0.23 seconds (prove: 0.19, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.23 seconds (prove: 0.19, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS ZIP-LIST ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.30 seconds

Function Name : ZIP-LIST 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.45 seconds (prove: 0.35, print: 0.00, other: 1.09)
Prover steps counted:  8677
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 zip-list-t (x y acc)
  :input-contract (and (true-listp x) (true-listp y) (true-listp acc))
  :output-contract (true-listp (zip-list-t x y acc))
  (if (or (endp x) (endp y))
    (rev* acc)
    (zip-list-t (cdr x) (cdr y) (cons (cons (car x) (cons (car y) nil)) acc))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ZIP-LIST-T))
             '(CAR X))
 (EXTRA-INFO '(:GUARD (:BODY ZIP-LIST-T))
             '(CDR X))
 (TRUE-LISTP ACC)
 (TRUE-LISTP Y)
 (TRUE-LISTP X)
 (NOT (IF (ENDP X) (ENDP X) (ENDP Y)))
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY ZIP-LIST-T))
             '(CAR Y))
 (EXTRA-INFO '(:GUARD (:BODY ZIP-LIST-T))
             '(CDR Y))
 (TRUE-LISTP ACC)
 (TRUE-LISTP Y)
 (TRUE-LISTP X)
 (NOT (IF (ENDP X) (ENDP X) (ENDP Y)))
 (NOT (CONSP Y)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 2.28 seconds
Form:  ( DEFUN ZIP-LIST-T ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM ZIP-LIST-T-CONTRACT ...)
Time:  0.29 seconds (prove: 0.24, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.29 seconds (prove: 0.24, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS ZIP-LIST-T ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.36 seconds

Function Name : ZIP-LIST-T 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  3.02 seconds (prove: 0.68, print: 0.00, other: 2.34)
Prover steps counted:  23212
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 zip-list* (x y)
  :input-contract (and (true-listp x) (true-listp y))
  :output-contract (true-listp (zip-list* x y))
  (zip-list-t x y nil))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.11 seconds
Form:  ( DEFUN ZIP-LIST* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM ZIP-LIST*-CONTRACT ...)
Time:  0.11 seconds (prove: 0.06, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.11 seconds (prove: 0.06, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS ZIP-LIST* ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.16 seconds

Function Name : ZIP-LIST* 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.61 seconds (prove: 0.08, print: 0.00, other: 0.52)
Prover steps counted:  1625
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (zip-list-t x y acc)
	       :required-expressions (zip-list x y)
	       :with reverse append zip-list)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM ZIP-LIST-T X Y ACC)
  (((TRUE-LISTP X))
   ((TRUE-LISTP Y))
   ((TRUE-LISTP ACC))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1496 (1496 unique)
satisfied the hypotheses, and found 1496 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(ACL2::ABA)) (Y NIL) (X '(NIL)))
 -- ((ACC NIL) (Y '((0) 0 NIL)) (X NIL))
 -- ((ACC NIL) (Y NIL) (X '(-1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(ACL2::ABA)) (Y NIL) (X '(NIL)))
                  ((ACC NIL) (Y '((0) 0 NIL)) (X NIL))
                  ((ACC NIL) (Y NIL) (X '(-1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ZIP-LIST ACL2S::X ACL2S::Y)) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABA) NIL)) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL))) ((ACL2S::ACC NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X NIL)) ((ACL2S::ACC NIL) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABA) NIL) NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (TRUE-LISTP ACL2S::ACC)) (EQUAL (ACL2S::ZIP-LIST-T ACL2S::X ACL2S::Y ACL2S::ACC) (APPEND (ACL2S::ZIP-LIST ACL2S::X ACL2S::Y) ACL2S::ACC))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 7 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 4 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- 
((ACC '(ACL2::CBAAAC ACL2::ABAAB ACL2::BA ACL2::A))
 (Y NIL)
 (X '(NIL (NIL) T)))

 -- ((ACC '(("A" . T) NIL 0 NIL)) (Y NIL) (X NIL))
 -- ((ACC '("A" NIL 0)) (Y NIL) (X '(904 13 0 0)))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (Y '(ACL2::BCDC)) (X '(1 0 "A" 0)))
 -- ((ACC '(3)) (Y NIL) (X '(ACL2::A)))
 -- ((ACC NIL) (Y NIL) (X '(-1 0)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(ACL2::CBAAAC ACL2::ABAAB ACL2::BA ACL2::A))
                   (Y NIL)
                   (X '(NIL (NIL) T)))
                  ((ACC '(("A" . T) NIL 0 NIL))
                   (Y NIL)
                   (X NIL))
                  ((ACC '("A" NIL 0))
                   (Y NIL)
                   (X '(904 13 0 0)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ZIP-LIST ACL2S::X ACL2S::Y)) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL CBAAAC) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABAAB) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL NIL) (ACL2S::INTERNAL-CONS T NIL))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) T) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 0 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABA) NIL)) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL))) ((ACL2S::ACC NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X NIL)) ((ACL2S::ACC NIL) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABAAB) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL CBAAAC) NIL)))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) T) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABA) NIL) NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (TRUE-LISTP ACL2S::ACC)) (EQUAL (ACL2S::ZIP-LIST-T ACL2S::X ACL2S::Y ACL2S::ACC) (APPEND (ACL2S::ZIP-LIST ACL2S::X ACL2S::Y) (REVERSE ACL2S::ACC)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 23 examples across 1 subgoals, of which 23 (23 unique) satisfied
the hypotheses, and found 3 counterexamples and 20 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((ACC '(5)) (Y '(-96 NIL NIL)) (X '(0 0)))
 -- ((ACC '(0)) (Y '(ACL2::A)) (X '(-93 3 NIL)))
 -- ((ACC '(ACL2::A)) (Y '(37 12 0 1)) (X '(0 "A")))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC '(-1/4)) (Y '(0)) (X NIL))
 -- ((ACC '(ACL2::DBACD)) (Y NIL) (X NIL))
 -- ((ACC '(0)) (Y NIL) (X '(ACL2::BDDA ACL2::ABAB)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((ACC '(5))
                   (Y '(-96 NIL NIL))
                   (X '(0 0)))
                  ((ACC '(0))
                   (Y '(ACL2::A))
                   (X '(-93 3 NIL)))
                  ((ACC '(ACL2::A))
                   (Y '(37 12 0 1))
                   (X '(0 "A")))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::ZIP-LIST ACL2S::X ACL2S::Y)) ACL2S::Q '(((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) NIL)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 0 0 1 1) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS NIL NIL))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL))))) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) NIL)))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL CBAAAC) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABAAB) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL))))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS NIL NIL) (ACL2S::INTERNAL-CONS T NIL))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) T) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL))))) (ACL2S::Y NIL) (ACL2S::X NIL)) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 0 0 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))))) ((ACL2S::ACC (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABA) NIL)) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS NIL NIL))) ((ACL2S::ACC NIL) (ACL2S::Y (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)))) (ACL2S::X NIL)) ((ACL2S::ACC NIL) (ACL2S::Y NIL) (ACL2S::X (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 0 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL NIL)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) NIL)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 0 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) NIL)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABAAB) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL CBAAAC) NIL)))) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) T) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-STRING #\A) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABA) NIL) NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::X) (TRUE-LISTP ACL2S::Y) (TRUE-LISTP ACL2S::ACC)) (EQUAL (ACL2S::ZIP-LIST-T ACL2S::X ACL2S::Y ACL2S::ACC) (APPEND (REVERSE ACL2S::ACC) (ACL2S::ZIP-LIST ACL2S::X ACL2S::Y)))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (TRUE-LISTP ACC))
         (EQUAL (ZIP-LIST-T X Y ACC)
                (APPEND (REV ACC) (ZIP-LIST X Y))))

*1 (Goal') is pushed for proof by induction.

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 1437 (1437 unique)
satisfied the hypotheses, and found 0 counterexamples and 1437 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((ACC NIL) (Y NIL) (X NIL))
 -- ((ACC NIL) (Y '(-2 0)) (X NIL))
 -- ((ACC '(29 #C(1 1/2))) (Y '(-1)) (X '(NIL)))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm
 (IMPLIES (AND (TRUE-LISTP X)
	       (TRUE-LISTP Y)
	       (TRUE-LISTP ACC))
	  (EQUAL (ZIP-LIST-T X Y ACC)
		 (APPEND (REVERSE ACC) (ZIP-LIST X Y)))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

([ A key checkpoint:

Goal'
(IMPLIES (AND (TRUE-LISTP X)
              (TRUE-LISTP Y)
              (TRUE-LISTP ACC))
         (EQUAL (ZIP-LIST-T X Y ACC)
                (APPEND (REV ACC) (ZIP-LIST X Y))))

*1 (Goal') is pushed for proof by induction.

])

Perhaps we can prove *1 by induction.  Five induction schemes are suggested
by this conjecture.  These merge into two derived induction schemes.
However, one of these is flawed and so we are left with one viable
candidate.  

We will induct according to a scheme suggested by (ZIP-LIST X Y), but
modified to accommodate (TRUE-LISTP Y) and (ZIP-LIST-T X Y ACC).  These
suggestions were produced using the :induction rules TRUE-LISTP, 
ZIP-LIST-INDUCTION-SCHEME, ZIP-LIST-INDUCTION-SCHEME-FROM-DEFINITION,
ZIP-LIST-T-INDUCTION-SCHEME and ZIP-LIST-T-INDUCTION-SCHEME-FROM-DEFINITION.
If we let (:P ACC X Y) denote *1 above then the induction scheme we'll
use is
(AND (IMPLIES (NOT (AND (TRUE-LISTP X) (TRUE-LISTP Y)))
              (:P ACC X Y))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP Y))
                   (NOT (OR (ENDP X) (ENDP Y)))
                   (:P (CONS (LIST (CAR X) (CAR Y)) ACC)
                       (CDR X)
                       (CDR Y)))
              (:P ACC X Y))
     (IMPLIES (AND (AND (TRUE-LISTP X) (TRUE-LISTP Y))
                   (OR (ENDP X) (ENDP Y)))
              (:P ACC X Y))).
This induction is justified by the same argument used to admit ZIP-LIST.
Note, however, that the unmeasured variables ACC and Y are being instantiated.
When applied to the goal at hand the above induction scheme produces
five nontautological subgoals.
Subgoal *1/5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/1'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 is COMPLETED!
Thus key checkpoint Goal' is COMPLETED!

Q.E.D.

Summary
Form:  ( THM ...)
Rules: ((:DEFINITION ENDP)
        (:DEFINITION NOT)
        (:DEFINITION TRUE-LISTP)
        (:DEFINITION ZIP-LIST-DEFINITION-RULE)
        (:DEFINITION ZIP-LIST-T-DEFINITION-RULE)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART ENDP)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART ZIP-LIST)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION TRUE-LISTP)
        (:INDUCTION ZIP-LIST-INDUCTION-SCHEME)
        (:INDUCTION ZIP-LIST-INDUCTION-SCHEME-FROM-DEFINITION)
        (:INDUCTION ZIP-LIST-T-INDUCTION-SCHEME)
        (:INDUCTION ZIP-LIST-T-INDUCTION-SCHEME-FROM-DEFINITION)
        (:REWRITE ACL2::APPEND-OF-CONS)
        (:REWRITE ACL2::APPEND-OF-NIL)
        (:REWRITE ACL2::APPEND-WHEN-NOT-CONSP)
        (:REWRITE ACL2::ASSOCIATIVITY-OF-APPEND)
        (:REWRITE ACL2::LIST-FIX-WHEN-TRUE-LISTP)
        (:REWRITE REV*-REV)
        (:REWRITE ACL2::REV-OF-CONS)
        (:REWRITE ACL2::REVERSE-REMOVAL)
        (:REWRITE ACL2::TRUE-LISTP-WHEN-ATOM)
        (:TYPE-PRESCRIPTION REV))
Warnings:  Invariant-risk
Time:  0.53 seconds (prove: 0.42, print: 0.01, other: 0.10)
Prover steps counted:  19623

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 944 (944 unique)
satisfied the hypotheses, and found 0 counterexamples and 944 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((ACC '(-1/3 0 0)) (Y NIL) (X NIL))
 -- ((ACC NIL) (Y '(#\A #\B #\B #\A #\A #\A #\A)) (X NIL))
 -- ((ACC NIL) (Y '(23)) (X '(0 0 1)))

Proof succeeded.

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ cd ~/Desktop/ACL2s-practice/
bash-3.2$ ls
hmwk3.lisp		hw6.lisp		hw9-last-proof.lisp
hw10.lisp		hw7.lisp		hwk2.lisp
hw11-2.lisp		hw8.lisp		hwk3.lisp
hw11-2.lisp~		hw82.lisp		hwk9.lisp
hw11.lisp		hw9--revised.lisp	project-ideas.txt
hw5.lisp		hw9-2.lisp
bash-3.2$ cp hw11-2.lisp ~/lemmas/acl2s-raw/homework11.lisp
bash-3.2$ pwd
/Users/benboskin/Desktop/ACL2s-practice
bash-3.2$ cd ~/lemmas/acl2s-raw/
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defdata2 
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr)))


ACL2 Error in TOP-LEVEL:  The symbol DEFDATA2 (in package "ACL2S")
has neither a function nor macro definition in ACL2.  Please define
it.  See :DOC near-misses.  Note:  this error occurred in the context
(DEFDATA2 (EXPR (ONEOF INTEGER
                       SYMBOL INC-EXPR SQ-EXPR +-EXPR *-EXPR))
          (INC-EXPR (LIST 'INC EXPR))
          (SQ-EXPR (LIST 'SQ EXPR))
          (+-EXPR (LIST EXPR '+ EXPR))
          (*-EXPR (LIST EXPR '* EXPR))).


ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.85 seconds (prove: 0.00, print: 0.00, other: 2.85)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defdata2 
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr)))
 Predicate events...
Form:  ( MUTUAL-RECURSION ( DEFUN EXPRP ...) ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: EXPRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>EXPR ...)
Form:  ( DEFTHM EXPR=>DEF ...)
 (INC-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (INC-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM INC-EXPR=>DEF ...)
 (SQ-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (SQ-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM SQ-EXPR=>DEF ...)
 (+-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (+-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM +-EXPR=>DEF ...)
 (*-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (*-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM *-EXPR=>DEF ...)
 Enumerator events...
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR-BUILTIN ...) ...)
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR/ACC-BUILTIN ...) ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.61 seconds (prove: 0.38, print: 0.00, other: 0.23)
 Registering type...
Form:  ( DEFUN NTH-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-EXPR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-EXPR NTH-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-EXPR/ACC NTH-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( DEFUN NTH-INC-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-INC-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR NTH-INC-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR/ACC NTH-INC-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-SQ-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-SQ-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR NTH-SQ-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR/ACC NTH-SQ-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-+-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-+-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-+-EXPR NTH-+-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-+-EXPR/ACC NTH-+-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-*-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-*-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-*-EXPR NTH-*-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-*-EXPR/ACC NTH-*-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.80 seconds (prove: 0.38, print: 0.00, other: 0.42)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  2.09 seconds (prove: 0.38, print: 0.00, other: 1.72)
Prover steps counted:  9695
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (exprp e)
	       :with exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 970 (970 unique)
satisfied the hypotheses, and found 970 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((E '(-25 . 0)))
 -- ((E '(53 . 252)))
 -- ((E '(-1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E '(-25 . 0)))
                  ((E '(53 . 252)))
                  ((E '(-1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 1) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1 1 1)))) ((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) '(NIL NIL NIL)) 
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Undefined function EXPRP-REL-FN called with arguments ((LVAR #:G233109) (LVAR #:G233106)) .
While executing: (:INTERNAL VALUE-OF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:q

Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
? (in-package "ACL2S")
#<Package "ACL2S">
? (defdata2- '(
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr))))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var256|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable PR
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable TST
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var112|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var116|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var118|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var120|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var124|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var128|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var132|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var136|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var138|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var142|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var146|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var150|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var154|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var158|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var162|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var166|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var168|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var170|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var172|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var174|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var176|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var178|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var180|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var184|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var186|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var188|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var190|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var192|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var194|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var196|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var198|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var200|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var202|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var204|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var206|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var208|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var210|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var214|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var216|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var110|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var222|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var224|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var226|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var228|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var255|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var256|
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var256|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var258|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable PR
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable TST
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var112|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var116|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var118|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var120|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var124|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var128|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var132|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var136|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var138|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var142|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var146|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var150|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var154|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var158|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var162|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var166|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var168|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var170|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var172|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var174|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var176|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var178|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var180|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var184|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var186|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var188|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var190|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var192|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var194|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var196|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var198|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var200|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var202|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var204|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var206|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var208|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var210|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var214|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var216|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var110|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var222|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var224|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var226|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var228|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var255|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var256|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var257|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var258|
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var256|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var258|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var260|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable PR
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable TST
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var112|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var116|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var118|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var120|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var124|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var128|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var132|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var136|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var138|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var142|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var146|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var150|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var154|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var158|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var162|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var166|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var168|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var170|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var172|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var174|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var176|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var178|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var180|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var184|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var186|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var188|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var190|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var192|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var194|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var196|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var198|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var200|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var202|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var204|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var206|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var208|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var210|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var214|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var216|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var110|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var222|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var224|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var226|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var228|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var255|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var256|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var257|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var258|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var259|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var260|
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var256|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var258|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var260|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var262|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable PR
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable TST
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var112|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var116|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var118|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var120|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var124|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var128|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var132|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var136|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var138|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var142|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var146|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var150|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var154|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var158|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var162|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var166|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var168|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var170|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var172|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var174|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var176|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var178|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var180|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var184|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var186|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var188|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var190|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var192|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var194|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var196|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var198|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var200|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var202|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var204|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var206|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var208|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var210|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var214|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var216|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var110|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var222|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var224|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var226|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var228|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var255|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var256|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var257|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var258|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var259|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var260|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var261|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var262|
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var256|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var258|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var260|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var262|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var264|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable PR
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable TST
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var112|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var116|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var118|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var120|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var124|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var128|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var132|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var136|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var138|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var142|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var146|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var150|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var154|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var158|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var162|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var166|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var168|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var170|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var172|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var174|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var176|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var178|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var180|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var184|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var186|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var188|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var190|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var192|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var194|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var196|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var198|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var200|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var202|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var204|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var206|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var208|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var210|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var214|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var216|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var110|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var222|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var224|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var226|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var228|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var255|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var256|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var257|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function INC-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var258|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var259|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function SQ-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var260|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var261|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function +-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var262|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var263|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undefined function *-EXPRP-REL-FN
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable |fresh-var264|
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var270|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var268|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var268|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var270|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var269|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var268|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var270|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var269|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var270|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var268|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var268|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var270|
;   In an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var267|
;   In an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var268|
;   In an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var269|
;   In an anonymous lambda form inside an anonymous lambda form inside INC-EXPRP-REL: Undeclared free variable |fresh-var270|
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var275|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var273|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var273|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var275|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var274|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var273|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var275|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var274|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var275|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var273|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var273|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var275|
;   In an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var272|
;   In an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var273|
;   In an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var274|
;   In an anonymous lambda form inside an anonymous lambda form inside SQ-EXPRP-REL: Undeclared free variable |fresh-var275|
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var281|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var278|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var278|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var281|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var281|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var279|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var278|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var281|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var281|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var279|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var281|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var281|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var278|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var278|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var281|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;   In an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var277|
;   In an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var278|
;   In an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var279|
;   In an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var280|
;   In an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var281|
;   In an anonymous lambda form inside an anonymous lambda form inside +-EXPRP-REL: Undeclared free variable |fresh-var282|
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var288|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var285|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var285|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var288|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var288|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var286|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var285|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var288|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var288|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var286|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var288|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var288|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var285|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var285|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var288|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
;   In an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var284|
;   In an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var285|
;   In an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var286|
;   In an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var287|
;   In an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var288|
;   In an anonymous lambda form inside an anonymous lambda form inside *-EXPRP-REL: Undeclared free variable |fresh-var289|
*-EXPRP-REL
? (run 1 q (*-exprp-rel q))
((INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL *) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _1) NIL))))
? (run 1 q (+-exprp-rel q))
((INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL +) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _1) NIL))))
? (run 1 q (sq-exprp-rel q))
((INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)))
? (run 1 q (inc-exprp-rel q))
((INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)))
? (run 1 q (exprp-rel q))
((INTERNAL-NUMBER (0) . _0))
? (run 1 q (exprp-rel-fn q t))
;Compiler warnings :
;   In an anonymous lambda form: Undefined function EXPRP-REL-FN
> Error: Undefined function EXPRP-REL-FN called with arguments ((LVAR Q) T) .
> While executing: #<Anonymous Function #x205ADDDE>, in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Retry applying EXPRP-REL-FN to ((LVAR Q) T).
> Type :? for other options.
1 > bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.73 seconds (prove: 0.00, print: 0.00, other: 2.73)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defdata2 
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr)))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Undefined function NON-TYPES called with arguments () .
While executing: DEFDATA2--
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.74 seconds (prove: 0.00, print: 0.00, other: 2.74)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defdata2 
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr)))
 Predicate events...
Form:  ( MUTUAL-RECURSION ( DEFUN EXPRP ...) ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: EXPRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>EXPR ...)
Form:  ( DEFTHM EXPR=>DEF ...)
 (INC-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (INC-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM INC-EXPR=>DEF ...)
 (SQ-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (SQ-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM SQ-EXPR=>DEF ...)
 (+-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (+-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM +-EXPR=>DEF ...)
 (*-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (*-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM *-EXPR=>DEF ...)
 Enumerator events...
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR-BUILTIN ...) ...)
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR/ACC-BUILTIN ...) ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.61 seconds (prove: 0.37, print: 0.00, other: 0.24)
 Registering type...
Form:  ( DEFUN NTH-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-EXPR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-EXPR NTH-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-EXPR/ACC NTH-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-INC-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-INC-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR NTH-INC-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR/ACC NTH-INC-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( DEFUN NTH-SQ-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-SQ-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR NTH-SQ-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR/ACC NTH-SQ-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-+-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-+-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-+-EXPR NTH-+-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-+-EXPR/ACC NTH-+-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-*-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-*-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-*-EXPR NTH-*-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-*-EXPR/ACC NTH-*-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.80 seconds (prove: 0.37, print: 0.00, other: 0.43)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  2.17 seconds (prove: 0.37, print: 0.00, other: 1.80)
Prover steps counted:  9695
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (exprp e)
	       :with exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 970 (970 unique)
satisfied the hypotheses, and found 970 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((E '(-25 . 0)))
 -- ((E '(53 . 252)))
 -- ((E '(-1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E '(-25 . 0)))
                  ((E '(53 . 252)))
                  ((E '(-1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 1) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1 1 1)))) ((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) '(NIL NIL NIL))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: GENSYM
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (exprp e) :with exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 886 (886 unique)
satisfied the hypotheses, and found 886 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((E '(NIL)))
 -- ((E "A"))
 -- ((E 0))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E '(NIL)))
                  ((E "A"))
                  ((E 0))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-CONS NIL NIL))) ((ACL2S::E (ACL2S::INTERNAL-STRING #\A))) ((ACL2S::E (ACL2S::INTERNAL-NUMBER (0))))) '(NIL NIL T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (integerp e) :with exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM INTEGERP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 989 (989 unique)
satisfied the hypotheses, and found 989 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((E '(0 . 48)))
 -- ((E '(-1)))
 -- ((E -190))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E '(0 . 48)))
                  ((E '(-1)))
                  ((E -190))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 1 1)))) ((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) ((ACL2S::E (ACL2S::INTERNAL-NUMBER (1) 0 1 1 1 1 1 0 1)))) '(NIL NIL T))   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (integerp e) :with integerp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM INTEGERP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 989 (989 unique)
satisfied the hypotheses, and found 989 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((E '((ACL2::A 1) (#\A NIL))))
 -- ((E '(-2 -1)))
 -- ((E #C(4 3/2)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E '((ACL2::A 1) (#\A NIL))))
                  ((E '(-2 -1)))
                  ((E #C(4 3/2)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CHAR #\A) (ACL2S::INTERNAL-CONS NIL NIL)) NIL)))) ((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) ((ACL2S::E NIL))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::E)) (EQUAL (INTEGERP ACL2S::E) (INTEGERP ACL2S::E))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 896 (896 unique)
satisfied the hypotheses, and found 0 counterexamples and 896 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E '(#\A #\A #\B #\A #\A)))
 -- ((E '(ACL2::A . 2)))
 -- ((E '((0 . #\B) -1/3)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (EQUAL (INTEGERP E) (INTEGERP E))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defdata2 
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr)))


ACL2 Error in TOP-LEVEL:  The symbol DEFDATA2 (in package "ACL2S")
has neither a function nor macro definition in ACL2.  Please define
it.  See :DOC near-misses.  Note:  this error occurred in the context
(DEFDATA2 (EXPR (ONEOF INTEGER
                       SYMBOL INC-EXPR SQ-EXPR +-EXPR *-EXPR))
          (INC-EXPR (LIST 'INC EXPR))
          (SQ-EXPR (LIST 'SQ EXPR))
          (+-EXPR (LIST EXPR '+ EXPR))
          (*-EXPR (LIST EXPR '* EXPR))).


ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.75 seconds (prove: 0.00, print: 0.00, other: 2.75)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defdata2 
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr)))
 Predicate events...
Form:  ( MUTUAL-RECURSION ( DEFUN EXPRP ...) ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: EXPRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>EXPR ...)
Form:  ( DEFTHM EXPR=>DEF ...)
 (INC-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (INC-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM INC-EXPR=>DEF ...)
 (SQ-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (SQ-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM SQ-EXPR=>DEF ...)
 (+-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (+-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM +-EXPR=>DEF ...)
 (*-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (*-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM *-EXPR=>DEF ...)
 Enumerator events...
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR-BUILTIN ...) ...)
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR/ACC-BUILTIN ...) ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.62 seconds (prove: 0.37, print: 0.00, other: 0.24)
 Registering type...
Form:  ( DEFUN NTH-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-EXPR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-EXPR NTH-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-EXPR/ACC NTH-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-INC-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-INC-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR NTH-INC-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR/ACC NTH-INC-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-SQ-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-SQ-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR NTH-SQ-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR/ACC NTH-SQ-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-+-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-+-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-+-EXPR NTH-+-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-+-EXPR/ACC NTH-+-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-*-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-*-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-*-EXPR NTH-*-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-*-EXPR/ACC NTH-*-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.80 seconds (prove: 0.37, print: 0.00, other: 0.43)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  2.18 seconds (prove: 0.37, print: 0.00, other: 1.81)
Prover steps counted:  9695
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:q

Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
? (in-package "ACL2S")
#<Package "ACL2S">
? (run 1 q (exprp q))
> Error: NIL is not of type (OR SYMBOL FUNCTION), and can't be FUNCALLed or APPLYed
> While executing: RUN-GOAL, in process listener(1).
> Type :POP to abort, :R for a list of available restarts.
> Type :? for other options.
1 > (run 1 q (exprp-rel q))
((INTERNAL-NUMBER (0) . _0))
1 > (run 1 q (exprp-rel-fn q t))
((INTERNAL-NUMBER (0) . _0))
1 > (run* q (exprp-rel-fn q t))
  C-c C-c> Break: interrupt signal
> While executing: TAKE-INF, in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
2 > (run 70 q (exprp-rel-fn q t))
((INTERNAL-NUMBER (0) . _0) (INTERNAL-NUMBER (1) _0 . _1) (INTERNAL-VARSYMBOL _0) (INTERNAL-SYMBOL _0) T NIL (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (1) _0 . _1) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-VARSYMBOL _0) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-SYMBOL _0) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS T NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS NIL NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-NUMBER (1) _0 . _1) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-VARSYMBOL _0) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-SYMBOL _0) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS T NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS NIL NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (1) _0 . _1) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-VARSYMBOL _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-SYMBOL _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS T NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS NIL NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-NUMBER (1) _0 . _1) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (1) _0 . _1) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-VARSYMBOL _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-SYMBOL _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS T NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS NIL NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (1) _0 . _1) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-VARSYMBOL _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-SYMBOL _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS T NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS NIL NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-VARSYMBOL _0) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-SYMBOL _0) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS T NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS NIL NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-NUMBER (1) _0 . _1) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL +) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _1) NIL))) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL +) (INTERNAL-CONS (INTERNAL-NUMBER (1) _1 . _2) NIL))) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL *) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _1) NIL))) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL *) (INTERNAL-CONS (INTERNAL-NUMBER (1) _1 . _2) NIL))) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-NUMBER (1) _0 . _1) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-VARSYMBOL _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL +) (INTERNAL-CONS (INTERNAL-VARSYMBOL _1) NIL))) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL *) (INTERNAL-CONS (INTERNAL-VARSYMBOL _1) NIL))) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (1) _0 . _1) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-VARSYMBOL _0) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-SYMBOL _0) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS T NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS NIL NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-NUMBER (1) _0 . _1) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL +) (INTERNAL-CONS (INTERNAL-SYMBOL _1) NIL))) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL +) (INTERNAL-CONS T NIL))) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL +) (INTERNAL-CONS NIL NIL))) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL *) (INTERNAL-CONS (INTERNAL-SYMBOL _1) NIL))) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL *) (INTERNAL-CONS T NIL))) (INTERNAL-CONS (INTERNAL-NUMBER (0) . _0) (INTERNAL-CONS (INTERNAL-SYMBOL *) (INTERNAL-CONS NIL NIL))) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS (INTERNAL-SYMBOL _0) NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS T NIL)) NIL)) NIL)) (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL INC) (INTERNAL-CONS (INTERNAL-CONS (INTERNAL-VARSYMBOL SQ) (INTERNAL-CONS NIL NIL)) NIL)) NIL)))
2 > (run 5 q (exprp-rel-fn q t))
((INTERNAL-NUMBER (0) . _0) (INTERNAL-NUMBER (1) _0 . _1) (INTERNAL-VARSYMBOL _0) (INTERNAL-SYMBOL _0) T)
2 > (run 5 q (+-exprp-rel-fn q t))

2 > (lp)

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(suggest-lemma (exprp e) :with exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 970 (970 unique)
satisfied the hypotheses, and found 970 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((E '(-25 . 0)))
 -- ((E '(53 . 252)))
 -- ((E '(-1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E '(-25 . 0)))
                  ((E '(53 . 252)))
                  ((E '(-1)))))
ACL2S !>>Bye.

"testing:" 
   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: WALK
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:q

Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
2 > (in-package "ACL2S")
#<Package "ACL2S">
2 > (run 1 q (value-of q '((E (INTERNAL-CONS (INTERNAL-NUMBER (1) 1 0 0 1 1) (INTERNAL-NUMBER (0))))) nil))
  C-c C-c> Break: interrupt signal
> While executing: (:INTERNAL APPEND-MAP-INF), in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
3 > (run 1 q (value-of '(exprp e) '((E (INTERNAL-CONS (INTERNAL-NUMBER (1) 1 0 0 1 1) (INTERNAL-NUMBER (0))))) nil))
NIL
3 > (run 1 q (value-of '(exprp e) '((E (INTERNAL-CONS (INTERNAL-NUMBER (1) 1 0 0 1 1) (INTERNAL-NUMBER (0))))) t))
NIL
3 > (reset-interp)
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES1
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable D
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES2
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable PR
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable RES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable NEW-ρ
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable TST
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable A
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable B
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable C
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ES
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var112|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var114|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var113|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var115|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var116|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var117|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var118|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var119|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var120|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var122|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var121|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var123|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var124|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var126|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var125|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var127|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var128|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var130|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var129|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var131|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var132|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var134|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var133|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var135|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var136|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var137|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var138|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var140|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var139|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var141|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var142|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var144|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var143|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var145|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var146|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var148|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var147|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var149|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var150|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var152|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var151|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var153|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var154|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var156|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var155|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var157|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var158|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var160|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var159|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var161|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var162|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var164|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var163|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var165|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var166|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var167|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var168|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var169|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var170|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var171|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var172|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var173|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var174|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var175|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var176|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var177|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var178|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var179|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var180|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var182|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var181|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var183|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var184|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var185|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var186|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var187|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var188|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var189|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var190|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var191|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var192|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var193|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var194|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var195|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var196|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var197|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var198|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var199|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var200|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var201|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var202|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var203|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var204|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var205|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var206|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var207|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var208|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var209|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var210|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var212|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var211|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var213|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var214|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var215|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var216|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var218|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var220|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var217|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var219|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var221|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var110|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var111|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var222|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var223|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var224|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var225|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var226|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var227|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var228|
;   In an anonymous lambda form inside an anonymous lambda form inside VALUE-OF: Undeclared free variable ACL2::|fresh-var229|
ALL-LINES
3 > (run 1 q (value-of '(exprp e) '((E (INTERNAL-CONS (INTERNAL-NUMBER (1) 1 0 0 1 1) (INTERNAL-NUMBER (0))))) t))
NIL
3 > (lp)

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defdata2 
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr)))
 Predicate events...
Form:  ( DEFTHM EXPRP-TESTTHM ...)
Form:  ( DEFTHM INC-EXPRP-TESTTHM ...)
Form:  ( DEFTHM SQ-EXPRP-TESTTHM ...)
Form:  ( DEFTHM +-EXPRP-TESTTHM ...)
Form:  ( DEFTHM *-EXPRP-TESTTHM ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: EXPRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>EXPR ...)
Form:  ( DEFTHM EXPR=>DEF ...)
 (INC-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (INC-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM INC-EXPR=>DEF ...)
 (SQ-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (SQ-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM SQ-EXPR=>DEF ...)
 (+-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (+-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM +-EXPR=>DEF ...)
 (*-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (*-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM *-EXPR=>DEF ...)
 Enumerator events...
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR-BUILTIN ...) ...)
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR/ACC-BUILTIN ...) ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  1.65 seconds (prove: 1.59, print: 0.00, other: 0.06)
 Registering type...


HARD ACL2 ERROR in REGISTER-TYPE:  
 EXPR is already a registered defdata type.




ACL2 Error in ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...)):  Evaluation
aborted.  To debug see :DOC print-gv, see :DOC trace, and see :DOC
wet.

Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  1.65 seconds (prove: 1.59, print: 0.00, other: 0.06)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  3.05 seconds (prove: 1.59, print: 0.00, other: 1.46)
Prover steps counted:  65875

ACL2 Error in ( PROGN! (DEFDATA2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S !>:q

Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
3 > (in-package "ACL2S")
#<Package "ACL2S">
3 > (run 1 q (value-of '(exprp e) '((E (INTERNAL-CONS (INTERNAL-NUMBER (1) 1 0 0 1 1) (INTERNAL-NUMBER (0))))) t))
NIL
3 > bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.75 seconds (prove: 0.00, print: 0.00, other: 2.75)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defdata2 
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr)))
 Predicate events...
Form:  ( MUTUAL-RECURSION ( DEFUN EXPRP ...) ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: EXPRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>EXPR ...)
Form:  ( DEFTHM EXPR=>DEF ...)
 (INC-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (INC-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM INC-EXPR=>DEF ...)
 (SQ-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (SQ-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM SQ-EXPR=>DEF ...)
 (+-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (+-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM +-EXPR=>DEF ...)
 (*-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (*-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM *-EXPR=>DEF ...)
 Enumerator events...
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR-BUILTIN ...) ...)
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR/ACC-BUILTIN ...) ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.73 seconds (prove: 0.45, print: 0.00, other: 0.28)
 Registering type...
Form:  ( DEFUN NTH-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-EXPR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-EXPR NTH-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-EXPR/ACC NTH-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-INC-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-INC-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR NTH-INC-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR/ACC NTH-INC-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-SQ-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-SQ-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR NTH-SQ-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR/ACC NTH-SQ-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-+-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-+-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-+-EXPR NTH-+-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-+-EXPR/ACC NTH-+-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-*-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-*-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-*-EXPR NTH-*-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-*-EXPR/ACC NTH-*-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.93 seconds (prove: 0.45, print: 0.00, other: 0.48)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  2.33 seconds (prove: 0.45, print: 0.00, other: 1.88)
Prover steps counted:  9695
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (exprp e) :with exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 970 (970 unique)
satisfied the hypotheses, and found 970 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((E '(-25 . 0)))
 -- ((E '(53 . 252)))
 -- ((E '(-1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E '(-25 . 0)))
                  ((E '(53 . 252)))
                  ((E '(-1)))))
ACL2S !>>Bye.

"testing:" 
   C-c C-c
***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  interrupt signal
While executing: (:INTERNAL APPEND-MAP-INF)
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:q

Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
? (in-package "ACL2S")
#<Package "ACL2S">
? (run 1 q (value-of '(exprp e) '((e nil)) q))
(T)
? (run 1 q (value-of q '((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 1) (ACL2S::INTERNAL-NUMBER (0))))) nil))
  C-c C-c> Break: interrupt signal
> While executing: EQUAL, in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
1 > (run 1 q (value-of `(exprp ,q) '((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 1) (ACL2S::INTERNAL-NUMBER (0))))) nil))
  C-c C-c> Break: interrupt signal
> While executing: (:INTERNAL APPEND-INF), in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
2 > (run* q (value-of '(exprp e) '((e nil)) q))
(T)
2 > (run* (q r) (value-of `(exprp ,q) '((e nil)) r))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable R
;   In an anonymous lambda form: Undeclared free variable Q
;   In an anonymous lambda form: Undeclared free variable R
  C-c C-c> Break: interrupt signal
> While executing: (:INTERNAL APPEND-MAP-INF), in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
3 > (run* (q r) (fresh (r) (value-of `(exprp ,q) '((e nil)) r)))
;Compiler warnings :
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable Q
;   In an anonymous lambda form inside an anonymous lambda form: Undeclared free variable R
;   In an anonymous lambda form: Undeclared free variable Q
;   In an anonymous lambda form: Undeclared free variable R
  C-c C-c> Break: interrupt signal
> While executing: (:INTERNAL DISJ2), in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
4 > (run 1 q (value-of `(exprp ,q) '() nil))
  C-c C-c> Break: interrupt signal
> While executing: (:INTERNAL APPEND-MAP-INF), in process listener(1).
> Type :GO to continue, :POP to abort, :R for a list of available restarts.
> If continued: Return from BREAK.
> Type :? for other options.
5 > bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".



HARD ACL2 ERROR in ACL2::INCLUDE-RAW:  Load of "compile-defdata-raw.lsp"
failed with the following message:
Illegal comma encountered by READ: file /Users/benboskin/lemmas/acl2s-
raw/compile-defdata-raw.lsp, position 5834.




ACL2 Error in ACL2::ACL2-INTERFACE:  Evaluation aborted.  To debug
see :DOC print-gv, see :DOC trace, and see :DOC wet.


***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  ACL2 Halted
While executing: #<Anonymous Function #x1942154E>
***********************************************

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>ccl-acl2s


ACL2 Error in TOP-LEVEL:  Global variables, such as CCL-ACL2S, are
not allowed. See :DOC ASSIGN and :DOC @.

ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.79 seconds (prove: 0.00, print: 0.00, other: 2.79)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defdata2 
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr)))
 Predicate events...
Form:  ( MUTUAL-RECURSION ( DEFUN EXPRP ...) ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: EXPRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>EXPR ...)
Form:  ( DEFTHM EXPR=>DEF ...)
 (INC-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (INC-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM INC-EXPR=>DEF ...)
 (SQ-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (SQ-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM SQ-EXPR=>DEF ...)
 (+-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (+-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM +-EXPR=>DEF ...)
 (*-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (*-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM *-EXPR=>DEF ...)
 Enumerator events...
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR-BUILTIN ...) ...)
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR/ACC-BUILTIN ...) ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.62 seconds (prove: 0.36, print: 0.00, other: 0.25)
 Registering type...
Form:  ( DEFUN NTH-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-EXPR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-EXPR NTH-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-EXPR/ACC NTH-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-INC-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-INC-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR NTH-INC-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR/ACC NTH-INC-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-SQ-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-SQ-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR NTH-SQ-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR/ACC NTH-SQ-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-+-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-+-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-+-EXPR NTH-+-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-+-EXPR/ACC NTH-+-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-*-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-*-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-*-EXPR NTH-*-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-*-EXPR/ACC NTH-*-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.80 seconds (prove: 0.36, print: 0.00, other: 0.44)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  2.15 seconds (prove: 0.36, print: 0.00, other: 1.79)
Prover steps counted:  9695
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (exprp e) :with exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 970 (970 unique)
satisfied the hypotheses, and found 970 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((E '(-25 . 0)))
 -- ((E '(53 . 252)))
 -- ((E '(-1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E '(-25 . 0)))
                  ((E '(53 . 252)))
                  ((E '(-1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 1) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1 1 1)))) ((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::E)) (EQUAL (ACL2S::EXPRP ACL2S::E) (ACL2S::EXPRP ACL2S::E))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 885 (885 unique)
satisfied the hypotheses, and found 0 counterexamples and 885 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E '(NIL)))
 -- ((E "A"))
 -- ((E 0))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (EQUAL (EXPRP E) (EXPRP E))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (inc-exprp e) :with inc-exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM INC-EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 989 (989 unique)
satisfied the hypotheses, and found 1 counterexamples and 988 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
NIL
 -- ((E 'ACL2::?))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E '(0 . 48)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((E '(-1)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((E -190))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E 'ACL2::?))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-SYMBOL ?)))) '(NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::E)) (EQUAL (ACL2S::INC-EXPRP ACL2S::E) (ACL2S::INC-EXPRP ACL2S::E))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 988 (988 unique)
satisfied the hypotheses, and found 0 counterexamples and 988 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E '((ACL2::A 1) (#\A NIL))))
 -- ((E '(-2 -1)))
 -- ((E #C(4 3/2)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (EQUAL (INC-EXPRP E) (INC-EXPRP E))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (*-exprp e) :with *-exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM *-EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 897 (897 unique)
satisfied the hypotheses, and found 1 counterexamples and 896 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
NIL
 -- ((E 'ACL2::?))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E '(#\A #\A #\B #\A #\A)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((E '(ACL2::A . 2)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((E '((0 . #\B) -1/3)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E 'ACL2::?))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-SYMBOL ?)))) '(NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::E)) (EQUAL (ACL2S::*-EXPRP ACL2S::E) (ACL2S::*-EXPRP ACL2S::E))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 864 (864 unique)
satisfied the hypotheses, and found 0 counterexamples and 864 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E NIL))
 -- ((E '(2 #\A)))
 -- ((E '(T 1)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (EQUAL (*-EXPRP E) (*-EXPRP E))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint inc-expr sq-expr)
Submitting 
(DEFTHM DEFDATA::INC-EXPR-IS-DISJOINT-WITH-SQ-EXPR
        (IMPLIES (INC-EXPRP DEFDATA::X)
                 (NOT (SQ-EXPRP DEFDATA::X)))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint inc-expr +-expr
  :hints (("goal" :expand (inc-exprp defdata::x))))
Submitting 
(DEFTHM DEFDATA::INC-EXPR-IS-DISJOINT-WITH-+-EXPR
        (IMPLIES (INC-EXPRP DEFDATA::X)
                 (NOT (+-EXPRP DEFDATA::X)))
        (:HINTS (("goal" :EXPAND (INC-EXPRP DEFDATA::X))))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint inc-expr *-expr
  :hints (("goal" :expand (inc-exprp defdata::x))))
Submitting 
(DEFTHM DEFDATA::INC-EXPR-IS-DISJOINT-WITH-*-EXPR
        (IMPLIES (INC-EXPRP DEFDATA::X)
                 (NOT (*-EXPRP DEFDATA::X)))
        (:HINTS (("goal" :EXPAND (INC-EXPRP DEFDATA::X))))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint sq-expr +-expr
  :hints (("goal" :expand (sq-exprp defdata::x))))
Submitting 
(DEFTHM DEFDATA::SQ-EXPR-IS-DISJOINT-WITH-+-EXPR
        (IMPLIES (SQ-EXPRP DEFDATA::X)
                 (NOT (+-EXPRP DEFDATA::X)))
        (:HINTS (("goal" :EXPAND (SQ-EXPRP DEFDATA::X))))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint sq-expr *-expr
  :hints (("goal" :expand (sq-exprp defdata::x))))
Submitting 
(DEFTHM DEFDATA::SQ-EXPR-IS-DISJOINT-WITH-*-EXPR
        (IMPLIES (SQ-EXPRP DEFDATA::X)
                 (NOT (*-EXPRP DEFDATA::X)))
        (:HINTS (("goal" :EXPAND (SQ-EXPRP DEFDATA::X))))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint +-expr *-expr
  :hints (("goal" :expand (*-exprp defdata::x))))
Submitting 
(DEFTHM DEFDATA::+-EXPR-IS-DISJOINT-WITH-*-EXPR
        (IMPLIES (+-EXPRP DEFDATA::X)
                 (NOT (*-EXPRP DEFDATA::X)))
        (:HINTS (("goal" :EXPAND (*-EXPRP DEFDATA::X))))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm exprp-car
  (implies (and (exprp x)
                (not (equal (car x) 'inc))
                (not (equal (car x) 'sq)))
           (exprp (car x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM EXPRP-CAR ...):  Our heuristics choose
(EXPRP (CAR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM EXPRP-CAR ...)
Rules: ((:DEFINITION *-EXPRP)
        (:DEFINITION +-EXPRP)
        (:DEFINITION EXPRP)
        (:DEFINITION INC-EXPRP)
        (:DEFINITION NOT)
        (:DEFINITION SQ-EXPRP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE DEF=>EXPR))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.05)
Prover steps counted:  307

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 306 (306 unique)
satisfied the hypotheses, and found 0 counterexamples and 306 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(((SQ 0) + ACL2::A) * (0 * 0))))
 -- ((X '(0 * 0)))
 -- ((X '((INC ACL2::A) * ACL2::A)))
 EXPRP-CAR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm exprp-car-2
  (implies (and (exprp x)
                (consp (cddr x)))
           (exprp (car x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM EXPRP-CAR-2 ...):  Our heuristics choose
(EXPRP (CAR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM EXPRP-CAR-2 ...)
Rules: ((:DEFINITION *-EXPRP)
        (:DEFINITION +-EXPRP)
        (:DEFINITION EXPRP)
        (:DEFINITION INC-EXPRP)
        (:DEFINITION SQ-EXPRP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL))
Warnings:  Invariant-risk
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Prover steps counted:  547

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 141 (141 unique)
satisfied the hypotheses, and found 0 counterexamples and 141 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(1 + ACL2::A)))
 -- ((X '(2 * (INC 0))))
 -- ((X '(0 * 0)))
 EXPRP-CAR-2

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm consp-exprp
  (implies (and (exprp x)
                (not (atom x))
                (not (inc-exprp x))
                (not (sq-exprp x)))
           (consp (cddr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM CONSP-EXPRP ...):  Our heuristics choose
(CDDR X) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM CONSP-EXPRP ...)
Rules: ((:DEFINITION *-EXPRP)
        (:DEFINITION +-EXPRP)
        (:DEFINITION ATOM)
        (:DEFINITION EXPRP)
        (:DEFINITION NOT))
Warnings:  Invariant-risk
Time:  0.09 seconds (prove: 0.03, print: 0.00, other: 0.06)
Prover steps counted:  478

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 150 (150 unique)
satisfied the hypotheses, and found 0 counterexamples and 150 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((1 + 0) * (0 * 0))))
 -- ((X '((INC ACL2::A) * ACL2::A)))
 -- ((X '((SQ (INC 0)) + (0 + 0))))
 CONSP-EXPRP

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm consp-*-exprp
  (implies (*-exprp x)
           (consp (cddr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM CONSP-*-EXPRP ...):  Our heuristics choose
(CDDR X) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM CONSP-*-EXPRP ...)
Rules: ((:DEFINITION *-EXPRP))
Warnings:  Invariant-risk
Time:  0.09 seconds (prove: 0.03, print: 0.00, other: 0.05)
Prover steps counted:  122

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 466 (466 unique)
satisfied the hypotheses, and found 0 counterexamples and 466 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((ACL2::A * 0) * 0)))
 -- ((X '(ACL2::A * 0)))
 -- ((X '((SQ 0) * ACL2::A)))
 CONSP-*-EXPRP

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm consp-+-exprp
  (implies (+-exprp x)
           (consp (cddr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM CONSP-+-EXPRP ...):  Our heuristics choose
(CDDR X) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM CONSP-+-EXPRP ...)
Rules: ((:DEFINITION +-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Prover steps counted:  122

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 439 (439 unique)
satisfied the hypotheses, and found 0 counterexamples and 439 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(336 + ACL2::A)))
 -- ((X '(0 + 0)))
 -- ((X '(ACL2::A + 0)))
 CONSP-+-EXPRP

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm +-exprp-car
  (implies (+-exprp x)
           (exprp (car x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM +-EXPRP-CAR ...):  Our heuristics choose
(EXPRP (CAR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( DEFTHM +-EXPRP-CAR ...)
Rules: ((:FORWARD-CHAINING +-EXPR=>DEF)
        (:TYPE-PRESCRIPTION +-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 480 (480 unique)
satisfied the hypotheses, and found 0 counterexamples and 480 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((INC ACL2::A) + (SQ 0))))
 -- ((X '(0 + 0)))
 -- ((X '(((INC 0) + ACL2::A) + ACL2::A)))
 +-EXPRP-CAR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm +-exprp-caddr
  (implies (+-exprp x)
           (exprp (caddr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM +-EXPRP-CADDR ...):  Our heuristics choose
(EXPRP (CADDR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM +-EXPRP-CADDR ...)
Rules: ((:DEFINITION +-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Prover steps counted:  143

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 463 (463 unique)
satisfied the hypotheses, and found 0 counterexamples and 463 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((SQ 0) + (INC 0))))
 -- ((X '(1 + 0)))
 -- ((X '(0 + 0)))
 +-EXPRP-CADDR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm *-exprp-car
  (implies (*-exprp x)
           (exprp (car x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM *-EXPRP-CAR ...):  Our heuristics choose
(EXPRP (CAR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( DEFTHM *-EXPRP-CAR ...)
Rules: ((:FORWARD-CHAINING *-EXPR=>DEF)
        (:TYPE-PRESCRIPTION *-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 461 (461 unique)
satisfied the hypotheses, and found 0 counterexamples and 461 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(ACL2::A * 0)))
 -- ((X '(ACL2::AACB * (INC 0))))
 -- ((X '((0 + 0) * ACL2::A)))
 *-EXPRP-CAR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm *-exprp-caddr
  (implies (*-exprp x)
           (exprp (caddr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM *-EXPRP-CADDR ...):  Our heuristics choose
(EXPRP (CADDR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM *-EXPRP-CADDR ...)
Rules: ((:DEFINITION *-EXPRP))
Warnings:  Invariant-risk
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Prover steps counted:  143

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 437 (437 unique)
satisfied the hypotheses, and found 0 counterexamples and 437 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((SQ 0) * 0)))
 -- ((X '((SQ 0) * ACL2::A)))
 -- ((X '(ACL2::A * 0)))
 *-EXPRP-CADDR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm sq-exprp-cadr
  (implies (sq-exprp x)
           (exprp (cadr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM SQ-EXPRP-CADR ...):  Our heuristics choose
(EXPRP (CADR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM SQ-EXPRP-CADR ...)
Rules: ((:DEFINITION SQ-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Prover steps counted:  116

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 249 (249 unique)
satisfied the hypotheses, and found 0 counterexamples and 249 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(SQ (0 + 0))))
 -- ((X '(SQ ACL2::A)))
 -- ((X '(SQ 0)))
 SQ-EXPRP-CADR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm inc-exprp-cadr
  (implies (inc-exprp x)
           (exprp (cadr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM INC-EXPRP-CADR ...):  Our heuristics choose
(EXPRP (CADR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM INC-EXPRP-CADR ...)
Rules: ((:DEFINITION INC-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Prover steps counted:  116

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 367 (367 unique)
satisfied the hypotheses, and found 0 counterexamples and 367 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(INC (INC 0))))
 -- ((X '(INC -1)))
 -- ((X '(INC (SQ 0))))
 INC-EXPRP-CADR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm exprp-cases
  (implies (and (exprp x)
                (not (integerp x))
                (not (symbolp x))
                (not (inc-exprp x))
                (not (sq-exprp x))
                (not (*-exprp x)))
           (+-exprp x))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM EXPRP-CASES ...):  Our heuristics choose
(+-EXPRP X) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( DEFTHM EXPRP-CASES ...)
Rules: ((:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING EXPR=>DEF)
        (:TYPE-PRESCRIPTION EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.07)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 66 (66 unique) satisfied
the hypotheses, and found 0 counterexamples and 66 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((INC ACL2::A) + (INC 0))))
 -- ((X '(((INC 0) * ACL2::A) + ACL2::A)))
 -- ((X '((INC 0) + (SQ 0))))
 EXPRP-CASES

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm exprp-expand
  (equal (exprp x)
         (or (integerp x)
             (symbolp x)
             (inc-exprp x)
             (sq-exprp x)
             (*-exprp x)
             (+-exprp x)))
  :rule-classes ((:compound-recognizer) (:rewrite)))

ACL2 Observation in ( DEFTHM EXPRP-EXPAND ...):  When (EXPRP ACL2::X)
is assumed true, EXPRP-EXPAND will allow us to deduce nothing about
the type of X.  When (EXPRP ACL2::X) is assumed false, EXPRP-EXPAND
will allow us to deduce 
(AND (NOT (INTEGERP ACL2::X)) (NOT (SYMBOLP ACL2::X))).  Note that
(EXPRP ACL2::X) is not a strong compound recognizer, according to this
rule.  See doc :compound-recognizer if these observations surprise
you.  These particular expressions of the type information are based
on trivial observations.

ACL2 Warning [Subsume] in ( DEFTHM EXPRP-EXPAND ...):  A newly proposed
:REWRITE rule generated from EXPRP-EXPAND probably subsumes the previously
added :REWRITE rules DEF=>EXPR, DEF=>EXPR, DEF=>EXPR, DEF=>EXPR, DEF=>EXPR
and DEF=>EXPR, in the sense that the new rule will now probably be
applied whenever the old rules would have been.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Goal (12 subgoals).
  if-intro: ((:DEFINITION *-EXPRP)
             (:DEFINITION EXPRP)
             (:DEFINITION IFF)
             (:DEFINITION INC-EXPRP)
             (:DEFINITION SQ-EXPRP))

Subgoal 12

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 11

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 10

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 9

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 8

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 7

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 6

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

The storage of EXPRP-EXPAND depends upon the :type-prescription rules
*-EXPRP, EXPRP, INC-EXPRP and SQ-EXPRP.

Summary
Form:  ( DEFTHM EXPRP-EXPAND ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:DEFINITION *-EXPRP)
        (:DEFINITION EXPRP)
        (:DEFINITION IFF)
        (:DEFINITION INC-EXPRP)
        (:DEFINITION NOT)
        (:DEFINITION SQ-EXPRP)
        (:EXECUTABLE-COUNTERPART TAU-SYSTEM)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING *-EXPR=>DEF)
        (:FORWARD-CHAINING INC-EXPR=>DEF)
        (:FORWARD-CHAINING SQ-EXPR=>DEF)
        (:REWRITE ACL2::EQUAL-OF-BOOLEANS-REWRITE)
        (:TYPE-PRESCRIPTION *-EXPRP)
        (:TYPE-PRESCRIPTION *-EXPRP-CADDR)
        (:TYPE-PRESCRIPTION *-EXPRP-CAR)
        (:TYPE-PRESCRIPTION +-EXPRP)
        (:TYPE-PRESCRIPTION CONSP-*-EXPRP)
        (:TYPE-PRESCRIPTION EXPRP)
        (:TYPE-PRESCRIPTION INC-EXPRP)
        (:TYPE-PRESCRIPTION INC-EXPRP-CADR)
        (:TYPE-PRESCRIPTION SQ-EXPRP)
        (:TYPE-PRESCRIPTION SQ-EXPRP-CADR))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION *-EXPRP)
             (:DEFINITION EXPRP)
             (:DEFINITION IFF)
             (:DEFINITION INC-EXPRP)
             (:DEFINITION SQ-EXPRP))
Warnings:  Invariant-risk and Subsume
Time:  0.15 seconds (prove: 0.14, print: 0.00, other: 0.01)
Prover steps counted:  2743
 EXPRP-EXPAND
ACL2S !>(in-theory (disable exprp inc-exprp sq-exprp *-exprp +-exprp))

Summary
Form:  ( IN-THEORY (DISABLE ...))
Rules: NIL
Time:  0.09 seconds (prove: 0.00, print: 0.00, other: 0.09)
 (:NUMBER-OF-ENABLED-RUNES 20984)
ACL2S !>(defdata assignment (alistof symbol integer))
 Predicate events...
Form:  ( DEFUN ASSIGNMENTP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Alistof theory events...
Form:  ( DEFTHM ACL2::ASSIGNMENTP-IMPLIES-ALISTP ...)
Form:  ( DEFTHM ACL2::ASSIGNMENTP-IMPLIES-TLP ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: ASSIGNMENTP relatively complete for Tau.
Form:  ( DEFTHM DEF=>ASSIGNMENT ...)
Form:  ( DEFTHM ASSIGNMENT=>DEF ...)
 Polymorphic sig instantiation events...
(check= (assignmentp '((x . 3) (y . 5) (z . 2))) t)
Form:  ( DEFTHM PUT-ASSOC-EQUAL-ASSIGNMENTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM PAIRLIS$-ASSIGNMENTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-ASSIGNMENT-BUILTIN ...)
Form:  ( DEFUN NTH-ASSIGNMENT/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.61 seconds (prove: 0.49, print: 0.00, other: 0.13)
 Registering type...
Form:  ( DEFUN NTH-ASSIGNMENT ...)
Form:  ( ENCAPSULATE (((NTH-ASSIGNMENT * ...) ...) ...) ...)
Form:  ( DEFUN NTH-ASSIGNMENT/ACC ...)
Form:  ( ENCAPSULATE (((NTH-ASSIGNMENT/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-ASSIGNMENT NTH-ASSIGNMENT-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-ASSIGNMENT/ACC NTH-ASSIGNMENT/ACC-BUILTIN)
...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.65 seconds (prove: 0.49, print: 0.00, other: 0.16)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !> :PASSED
ACL2S !>(check= (assignmentp '((x . 3) (y . 5) (2 . z))) nil)
 :PASSED
ACL2S !>(defunc2 lookup (x alist)
  :input-contract (and (symbolp x) (assignmentp alist))
  :output-contract (integerp (lookup x alist))
  (cond ((endp alist) 0)
        ((equal (caar alist) x) (cdr (car alist)))
        (t (lookup x (cdr alist)))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol CAAR
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(defunc2 lookup (x alist)
  :input-contract (and (symbolp x) (assignmentp alist))
  :output-contract (integerp (lookup x alist))
  (cond ((endp alist) 0)
        ((equal (car (car alist)) x) (cdr (car alist)))
        (t (lookup x (cdr alist)))))


ACL2 Error in ( DEFUN LOOKUP ...):  It is illegal to define LOOKUP
because it has a function definition in raw Common Lisp.  If earlier
you accidentally made this definition or assignment outside the ACL2
loop, then you might consider exiting the ACL2 loop and executing appropriate
Common Lisp to erase those mistakes.  This is a potentially perilous
act unless you are sure these names were introduced by you and are
not involved in any logical code. To erase a function or macro definition
use (fmakunbound! 'LOOKUP).  


Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.29 seconds (prove: 0.00, print: 0.00, other: 0.29)

ACL2 Error in ( PROGN! (DEFUNC2- ...) ...):  See :DOC failure.

******** FAILED ********
ACL2S !>(defunc2 lookupvar (x alist)
  :input-contract (and (symbolp x) (assignmentp alist))
  :output-contract (integerp (lookupvar x alist))
  (cond ((endp alist) 0)
        ((equal (car (car alist)) x) (cdr (car alist)))
        (t (lookupvar x (cdr alist)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LOOKUPVAR))
             '(CAR ALIST))
 (ASSIGNMENTP ALIST)
 (SYMBOLP X)
 (NOT (ENDP ALIST))
 (NOT (CONSP ALIST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LOOKUPVAR))
             '(CAR (CAR ALIST)))
 (ASSIGNMENTP ALIST)
 (SYMBOLP X)
 (NOT (ENDP ALIST))
 (NOT (CONSP (CAR ALIST))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LOOKUPVAR))
             '(CAR ALIST))
 (ASSIGNMENTP ALIST)
 (SYMBOLP X)
 (NOT (ENDP ALIST))
 (EQUAL (CAR (CAR ALIST)) X)
 (NOT (CONSP ALIST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LOOKUPVAR))
             '(CDR (CAR ALIST)))
 (ASSIGNMENTP ALIST)
 (SYMBOLP X)
 (NOT (ENDP ALIST))
 (EQUAL (CAR (CAR ALIST)) X)
 (NOT (CONSP (CAR ALIST))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LOOKUPVAR))
             '(CDR ALIST))
 (ASSIGNMENTP ALIST)
 (SYMBOLP X)
 (NOT (ENDP ALIST))
 (NOT (EQUAL (CAR (CAR ALIST)) X))
 (NOT (CONSP ALIST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 1.14 seconds
Form:  ( DEFUN LOOKUPVAR ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LOOKUPVAR-CONTRACT ...)
Time:  0.16 seconds (prove: 0.11, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.16 seconds (prove: 0.11, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LOOKUPVAR ...)
Time:  0.04 seconds (prove: 0.04, print: 0.00, other: 0.00)
Elapsed Run Time: 0.28 seconds

Function Name : LOOKUPVAR 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.72 seconds (prove: 0.45, print: 0.00, other: 1.27)
Prover steps counted:  4297
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (lookupvar 'z '((x . 3) (y . 5) (z . 2))) 2)
 :PASSED
ACL2S !>(check= (lookupvar 'a '((x . 3) (y . 5) (z . 2))) 0)
 :PASSED
ACL2S !>(defunc2 evaluate (x alist)
  :input-contract (and (exprp x) (assignmentp alist))
  :output-contract (integerp (evaluate x alist))
  (cond
   ((integerp x) x)
   ((symbolp x) (lookupvar x alist))
   ((inc-exprp x) (+ 1 (evaluate (car (cdr x)) alist)))
   ((sq-exprp x) (expt (evaluate (car (cdr x)) alist) 2))
   ((*-exprp x) (* (evaluate (car x) alist)
                   (evaluate (car (cdr (cdr x))) alist)))
   ;; Added a case for +
   ((+-exprp x) (+ (evaluate (car x) alist)
                   (evaluate (car (cdr (cdr x))) alist)))
   (t 0)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (INC-EXPRP X)
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CADR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (INC-EXPRP X)
 (NOT (CONSP (CDR X))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ 1 (EVALUATE (CADR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (INC-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CADR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ 1 (EVALUATE (CADR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (INC-EXPRP (LIST* X1 X3 X4)))
         (ACL2-NUMBERP (EVALUATE X3 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (SQ-EXPRP X)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CADR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (SQ-EXPRP X)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(EXPT (EVALUATE (CADR X) ALIST) 2))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP X))
              (SQ-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CADR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(EXPT (EVALUATE (CADR X) ALIST) 2))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP (LIST* X1 X3 X4)))
              (SQ-EXPRP (LIST* X1 X3 X4)))
         (ACL2-NUMBERP (EVALUATE X3 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CAR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CADDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(* (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP X))
              (NOT (SQ-EXPRP X))
              (*-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CAR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(* (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP (CONS X1 X2)))
              (NOT (SQ-EXPRP (CONS X1 X2)))
              (*-EXPRP (CONS X1 X2)))
         (ACL2-NUMBERP (EVALUATE X1 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(* (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP X))
              (NOT (SQ-EXPRP X))
              (*-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CADDR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(* (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP (LIST* X1 X3 X5 X6)))
              (NOT (SQ-EXPRP (LIST* X1 X3 X5 X6)))
              (*-EXPRP (LIST* X1 X3 X5 X6)))
         (ACL2-NUMBERP (EVALUATE X5 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CAR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CADDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP X))
              (NOT (SQ-EXPRP X))
              (NOT (*-EXPRP X))
              (+-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CAR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP (CONS X1 X2)))
              (NOT (SQ-EXPRP (CONS X1 X2)))
              (NOT (*-EXPRP (CONS X1 X2)))
              (+-EXPRP (CONS X1 X2)))
         (ACL2-NUMBERP (EVALUATE X1 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP X))
              (NOT (SQ-EXPRP X))
              (NOT (*-EXPRP X))
              (+-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CADDR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP (LIST* X1 X3 X5 X6)))
              (NOT (SQ-EXPRP (LIST* X1 X3 X5 X6)))
              (NOT (*-EXPRP (LIST* X1 X3 X5 X6)))
              (+-EXPRP (LIST* X1 X3 X5 X6)))
         (ACL2-NUMBERP (EVALUATE X5 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Query: Testing function contract ... 

Splitter note (see :DOC splitter) for Goal (4 subgoals).
  if-intro: ((:REWRITE EXPRP-EXPAND))


([ A key checkpoint:

Subgoal 4
(IMPLIES (AND (*-EXPRP X) (ASSIGNMENTP ALIST))
         (INTEGERP (EVALUATE X ALIST)))

*1 (Subgoal 4) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 3
(IMPLIES (AND (INC-EXPRP X) (ASSIGNMENTP ALIST))
         (INTEGERP (EVALUATE X ALIST)))

*2 (Subgoal 3) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (+-EXPRP X) (ASSIGNMENTP ALIST))
         (INTEGERP (EVALUATE X ALIST)))

*3 (Subgoal 2) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (SQ-EXPRP X) (ASSIGNMENTP ALIST))
         (INTEGERP (EVALUATE X ALIST)))

*4 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *4 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 7.88 seconds
Form:  ( DEFUN EVALUATE ...)
Time:  1.76 seconds (prove: 1.70, print: 0.00, other: 0.07)
Form:  ( DEFTHM EVALUATE-CONTRACT ...)
Time:  0.18 seconds (prove: 0.13, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.18 seconds (prove: 0.13, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS EVALUATE ...)
Time:  0.06 seconds (prove: 0.05, print: 0.00, other: 0.02)
Elapsed Run Time: 3.80 seconds

Function Name : EVALUATE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  12.08 seconds (prove: 7.35, print: 0.02, other: 4.72)
Prover steps counted:  172876
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (evaluate 3 '((a . 2))) 3)
 :PASSED
ACL2S !>(check= (evaluate 'a '((a . 2))) 2)
 :PASSED
ACL2S !>(check= (evaluate '(sq a) '((a . 2))) 4)
 :PASSED
ACL2S !>(check= (evaluate '(inc a) '((a . 2))) 3)
 :PASSED
ACL2S !>(check= (evaluate '(4 + a) '((a . 2))) 6)
 :PASSED
ACL2S !>(check= (evaluate '(4 * a) '((a . 2))) 8)
 :PASSED
ACL2S !>(check= (evaluate '((3 * b) + a)   '((a . 7) (b . 4))) 19)
 :PASSED
ACL2S !>(defdata stack (listof integer))
 Predicate events...
Form:  ( DEFUN STACKP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::STACKP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::STACKP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: STACKP relatively complete for Tau.
Form:  ( DEFTHM DEF=>STACK ...)
Form:  ( DEFTHM STACK=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-STACK-BUILTIN ...)
Form:  ( DEFUN NTH-STACK/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.94 seconds (prove: 0.60, print: 0.00, other: 0.33)
 Registering type...
Form:  ( DEFUN NTH-STACK ...)
Form:  ( ENCAPSULATE (((NTH-STACK * ...) ...) ...) ...)
Form:  ( DEFUN NTH-STACK/ACC ...)
Form:  ( ENCAPSULATE (((NTH-STACK/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-STACK NTH-STACK-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-STACK/ACC NTH-STACK/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.97 seconds (prove: 0.60, print: 0.00, other: 0.37)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata non-empty-stack (cons integer stack))
 Predicate events...
Form:  ( DEFUN NON-EMPTY-STACKP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: NON-EMPTY-STACKP relatively complete for Tau.
Form:  ( DEFTHM DEF=>NON-EMPTY-STACK ...)
Form:  ( DEFTHM NON-EMPTY-STACK=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-NON-EMPTY-STACK-BUILTIN ...)
Form:  ( DEFUN NTH-NON-EMPTY-STACK/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.12 seconds (prove: 0.04, print: 0.00, other: 0.08)
 Registering type...
Form:  ( DEFUN NTH-NON-EMPTY-STACK ...)
Form:  ( ENCAPSULATE (((NTH-NON-EMPTY-STACK * ...) ...) ...) ...)
Form:  ( DEFUN NTH-NON-EMPTY-STACK/ACC ...)
Form:  ( ENCAPSULATE (((NTH-NON-EMPTY-STACK/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-NON-EMPTY-STACK NTH-NON-EMPTY-STACK-BUILTIN)
...)
Form:  ( DEFATTACH (NTH-NON-EMPTY-STACK/ACC NTH-NON-EMPTY-STACK/ACC-BUILTIN)
...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.16 seconds (prove: 0.04, print: 0.00, other: 0.12)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata empty-stack nil)
 Predicate events...
Form:  ( DEFUN EMPTY-STACKP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: EMPTY-STACKP relatively complete for Tau.
Form:  ( DEFTHM DEF=>EMPTY-STACK ...)
Form:  ( DEFTHM EMPTY-STACK=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-EMPTY-STACK-BUILTIN ...)
Form:  ( DEFUN NTH-EMPTY-STACK/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.07 seconds (prove: 0.02, print: 0.00, other: 0.05)
 Registering type...
Form:  ( DEFUN NTH-EMPTY-STACK ...)
Form:  ( ENCAPSULATE (((NTH-EMPTY-STACK * ...) ...) ...) ...)
Form:  ( DEFUN NTH-EMPTY-STACK/ACC ...)
Form:  ( ENCAPSULATE (((NTH-EMPTY-STACK/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-EMPTY-STACK NTH-EMPTY-STACK-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-EMPTY-STACK/ACC NTH-EMPTY-STACK/ACC-BUILTIN)
...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.10 seconds (prove: 0.02, print: 0.00, other: 0.08)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (stackp '()) t)
 :PASSED
ACL2S !>(check= (empty-stackp '()) t)
 :PASSED
ACL2S !>(check= (non-empty-stackp '()) nil)
 :PASSED
ACL2S !>(check= (stackp '(1 2 -11 4)) t)
 :PASSED
ACL2S !>(check= (empty-stackp '(1 2 -11 4)) nil)
 :PASSED
ACL2S !>(defdata-subtype non-empty-stack stack)
Submitting 
(DEFTHM DEFDATA::NON-EMPTY-STACK-IS-SUBTYPE-OF-STACK
        (IMPLIES (NON-EMPTY-STACKP DEFDATA::X)
                 (STACKP DEFDATA::X))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 498 (498 unique)
satisfied the hypotheses, and found 0 counterexamples and 498 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X '(-2 -1)))
 -- ((DEFDATA::X '(-365)))
 -- ((DEFDATA::X '(-203 7 0 0)))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-subtype empty-stack stack)
Submitting 
(DEFTHM DEFDATA::EMPTY-STACK-IS-SUBTYPE-OF-STACK
        (IMPLIES (EMPTY-STACKP DEFDATA::X)
                 (STACKP DEFDATA::X))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 1 (1 unique) satisfied
the hypotheses, and found 0 counterexamples and 1 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X NIL))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint empty-stack non-empty-stack)
Submitting 
(DEFTHM DEFDATA::EMPTY-STACK-IS-DISJOINT-WITH-NON-EMPTY-STACK
        (IMPLIES (EMPTY-STACKP DEFDATA::X)
                 (NOT (NON-EMPTY-STACKP DEFDATA::X)))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 1 (1 unique) satisfied
the hypotheses, and found 0 counterexamples and 1 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X NIL))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 pop-stack (stk) 
  :input-contract (stackp stk)
  :output-contract (stackp (pop-stack stk))
  (cdr stk))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.14 seconds
Form:  ( DEFUN POP-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM POP-STACK-CONTRACT ...)
Time:  0.06 seconds (prove: 0.03, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.06 seconds (prove: 0.03, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS POP-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.10 seconds

Function Name : POP-STACK 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.52 seconds (prove: 0.05, print: 0.00, other: 0.47)
Prover steps counted:  175
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 top-stack (stk)
  :input-contract (stackp stk)
  :output-contract (integerp (top-stack stk))
  (if (consp stk) (car stk) 0))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.09 seconds
Form:  ( DEFUN TOP-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM TOP-STACK-CONTRACT ...)
Time:  0.05 seconds (prove: 0.02, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.05 seconds (prove: 0.02, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS TOP-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.10 seconds

Function Name : TOP-STACK 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.49 seconds (prove: 0.03, print: 0.00, other: 0.46)
Prover steps counted:  199
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 push-stack (val stk) 
  :input-contract (and (stackp stk) (integerp val))
  :output-contract (non-empty-stackp (push-stack val stk))
  (cons val stk))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.11 seconds
Form:  ( DEFUN PUSH-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM PUSH-STACK-CONTRACT ...)
Time:  0.08 seconds (prove: 0.04, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS PUSH-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.13 seconds

Function Name : PUSH-STACK 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.56 seconds (prove: 0.05, print: 0.00, other: 0.51)
Prover steps counted:  280
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 load-instr (list 'load symbol))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Undefined function MAKE-FN-VERSION called with arguments (LOAD-INSTRP) .
While executing: DEFDATA2-
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>Bye.
bash-3.2$ ccl-acl2s
Welcome to Clozure Common Lisp Version 1.11.5/v1.11.5  (DarwinX8632)!

 ACL2 Version 8.1 built November 1, 2018  10:39:38
                   then November 1, 2018  10:53:17.
 Copyright (C) 2018, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + WARNING: This is NOT an ACL2 release; it is a development snapshot  +
 + (git commit hash: a146a14cb5e9dbccf47477bb6e59a5b423c3403a).        +
 + On rare occasions development snapshots may be incomplete, fragile, +
 + or unable to pass the usual regression tests.                       +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-8-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

MODIFICATION NOTICE:

ACL2s Mode

ACL2 Version 8.1.  Level 1.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>(defttag t)

TTAG NOTE: Adding ttag :T from the top level loop.
 :T
ACL2S !>(include-book "top" :uncertified-okp t)

ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "top" ...):  Unable
to load compiled file for book
  /Users/benboskin/lemmas/acl2s-raw/top.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "top" ...):  There is
no certificate on file for "/Users/benboskin/lemmas/acl2s-raw/top.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-cgen" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-cgen.lisp".


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "itest-ithm" ...):  There
is no certificate on file for 
"/Users/benboskin/lemmas/acl2s-raw/itest-ithm.lisp".


Summary
Form:  ( INCLUDE-BOOK "top" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  2.73 seconds (prove: 0.00, print: 0.00, other: 2.73)
 "/Users/benboskin/lemmas/acl2s-raw/top.lisp"
ACL2S !>(defdata2 
  (expr (oneof integer 
               symbol 
               inc-expr
               sq-expr
               +-expr
               *-expr))
  (inc-expr (list 'inc expr))
  (sq-expr  (list 'sq expr))
  (+-expr   (list expr '+ expr))
  (*-expr   (list expr '* expr)))
 Predicate events...
Form:  ( MUTUAL-RECURSION ( DEFUN EXPRP ...) ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: EXPRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>EXPR ...)
Form:  ( DEFTHM EXPR=>DEF ...)
 (INC-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (INC-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM INC-EXPR=>DEF ...)
 (SQ-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (SQ-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM SQ-EXPR=>DEF ...)
 (+-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (+-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM +-EXPR=>DEF ...)
 (*-EXPRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (*-EXPRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM *-EXPR=>DEF ...)
 Enumerator events...
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR-BUILTIN ...) ...)
Form:  ( MUTUAL-RECURSION ( DEFUN NTH-EXPR/ACC-BUILTIN ...) ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.63 seconds (prove: 0.37, print: 0.00, other: 0.26)
 Registering type...
Form:  ( DEFUN NTH-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-EXPR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-EXPR NTH-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-EXPR/ACC NTH-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( DEFUN NTH-INC-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-INC-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-INC-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR NTH-INC-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-INC-EXPR/ACC NTH-INC-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-SQ-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-SQ-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-SQ-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR NTH-SQ-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-SQ-EXPR/ACC NTH-SQ-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( DEFUN NTH-+-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-+-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-+-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-+-EXPR NTH-+-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-+-EXPR/ACC NTH-+-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( DEFUN NTH-*-EXPR ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-*-EXPR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-*-EXPR/ACC * ...) ...) ...) ...)
Form:  ( DEFATTACH (NTH-*-EXPR NTH-*-EXPR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-*-EXPR/ACC NTH-*-EXPR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.81 seconds (prove: 0.37, print: 0.00, other: 0.44)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  2.14 seconds (prove: 0.37, print: 0.00, other: 1.78)
Prover steps counted:  9695
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (exprp e) :with exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 970 (970 unique)
satisfied the hypotheses, and found 970 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((E '(-25 . 0)))
 -- ((E '(53 . 252)))
 -- ((E '(-1)))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E '(-25 . 0)))
                  ((E '(53 . 252)))
                  ((E '(-1)))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 1) (ACL2S::INTERNAL-NUMBER (0))))) ((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1) (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1 1 1 1 1)))) ((ACL2S::E (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) '(NIL NIL NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::E)) (EQUAL (ACL2S::EXPRP ACL2S::E) (ACL2S::EXPRP ACL2S::E))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 885 (885 unique)
satisfied the hypotheses, and found 0 counterexamples and 885 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E '(NIL)))
 -- ((E "A"))
 -- ((E 0))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (EQUAL (EXPRP E) (EXPRP E))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (inc-exprp e) :with inc-exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM INC-EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 989 (989 unique)
satisfied the hypotheses, and found 1 counterexamples and 988 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
NIL
 -- ((E 'ACL2::?))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E '(0 . 48)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((E '(-1)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((E -190))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E 'ACL2::?))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-SYMBOL ?)))) '(NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::E)) (EQUAL (ACL2S::INC-EXPRP ACL2S::E) (ACL2S::INC-EXPRP ACL2S::E))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 988 (988 unique)
satisfied the hypotheses, and found 0 counterexamples and 988 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E '((ACL2::A 1) (#\A NIL))))
 -- ((E '(-2 -1)))
 -- ((E #C(4 3/2)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (EQUAL (INC-EXPRP E) (INC-EXPRP E))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (*-exprp e) :with *-exprp)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM *-EXPRP E) NIL)
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 1001 examples across 3 subgoals, of which 897 (897 unique)
satisfied the hypotheses, and found 1 counterexamples and 896 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Goal''"]
NIL
 -- ((E 'ACL2::?))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E '(#\A #\A #\B #\A #\A)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((E '(ACL2::A . 2)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.
 -- ((E '((0 . #\B) -1/3)))
NOTE: The above witness is not consistent with the top-level form.
Witnesses are only guaranteed to be consistent with subgoals.

Itest? found a counterexample.
 (T (:FALSIFIABLE ((E 'ACL2::?))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::E (ACL2S::INTERNAL-SYMBOL ?)))) '(NIL)) 
"form tested" 
(IMPLIES (AND (ACL2S::ALLP ACL2S::E)) (EQUAL (ACL2S::*-EXPRP ACL2S::E) (ACL2S::*-EXPRP ACL2S::E))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 864 (864 unique)
satisfied the hypotheses, and found 0 counterexamples and 864 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((E NIL))
 -- ((E '(2 #\A)))
 -- ((E '(T 1)))

Itest? proved the conjecture under consideration. 
Therefore, no counterexamples exist. 
 (NIL (NIL))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"Please provide more constraints on the expression you would like me to find. The best I can do is:" 
"" (EQUAL (*-EXPRP E) (*-EXPRP E))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint inc-expr sq-expr)
Submitting 
(DEFTHM DEFDATA::INC-EXPR-IS-DISJOINT-WITH-SQ-EXPR
        (IMPLIES (INC-EXPRP DEFDATA::X)
                 (NOT (SQ-EXPRP DEFDATA::X)))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint inc-expr +-expr
  :hints (("goal" :expand (inc-exprp defdata::x))))
Submitting 
(DEFTHM DEFDATA::INC-EXPR-IS-DISJOINT-WITH-+-EXPR
        (IMPLIES (INC-EXPRP DEFDATA::X)
                 (NOT (+-EXPRP DEFDATA::X)))
        (:HINTS (("goal" :EXPAND (INC-EXPRP DEFDATA::X))))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
(defdata-disjoint inc-expr *-expr
  :hints (("goal" :expand (inc-exprp defdata::x))))
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>Submitting 
(DEFTHM DEFDATA::INC-EXPR-IS-DISJOINT-WITH-*-EXPR
        (IMPLIES (INC-EXPRP DEFDATA::X)
                 (NOT (*-EXPRP DEFDATA::X)))
        (:HINTS (("goal" :EXPAND (INC-EXPRP DEFDATA::X))))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint sq-expr +-expr
  :hints (("goal" :expand (sq-exprp defdata::x))))
Submitting 
(DEFTHM DEFDATA::SQ-EXPR-IS-DISJOINT-WITH-+-EXPR
        (IMPLIES (SQ-EXPRP DEFDATA::X)
                 (NOT (+-EXPRP DEFDATA::X)))
        (:HINTS (("goal" :EXPAND (SQ-EXPRP DEFDATA::X))))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint sq-expr *-expr
  :hints (("goal" :expand (sq-exprp defdata::x))))
Submitting 
(DEFTHM DEFDATA::SQ-EXPR-IS-DISJOINT-WITH-*-EXPR
        (IMPLIES (SQ-EXPRP DEFDATA::X)
                 (NOT (*-EXPRP DEFDATA::X)))
        (:HINTS (("goal" :EXPAND (SQ-EXPRP DEFDATA::X))))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint +-expr *-expr
  :hints (("goal" :expand (*-exprp defdata::x))))
Submitting 
(DEFTHM DEFDATA::+-EXPR-IS-DISJOINT-WITH-*-EXPR
        (IMPLIES (+-EXPRP DEFDATA::X)
                 (NOT (*-EXPRP DEFDATA::X)))
        (:HINTS (("goal" :EXPAND (*-EXPRP DEFDATA::X))))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 0 (0 unique) satisfied
the hypotheses, and found 0 counterexamples and 0 witnesses.
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm exprp-car
  (implies (and (exprp x)
                (not (equal (car x) 'inc))
                (not (equal (car x) 'sq)))
           (exprp (car x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM EXPRP-CAR ...):  Our heuristics choose
(EXPRP (CAR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM EXPRP-CAR ...)
Rules: ((:DEFINITION *-EXPRP)
        (:DEFINITION +-EXPRP)
        (:DEFINITION EXPRP)
        (:DEFINITION INC-EXPRP)
        (:DEFINITION NOT)
        (:DEFINITION SQ-EXPRP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:REWRITE DEF=>EXPR))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
Prover steps counted:  307

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 306 (306 unique)
satisfied the hypotheses, and found 0 counterexamples and 306 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(((SQ 0) + ACL2::A) * (0 * 0))))
 -- ((X '(0 * 0)))
 -- ((X '((INC ACL2::A) * ACL2::A)))
 EXPRP-CAR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm exprp-car-2
  (implies (and (exprp x)
                (consp (cddr x)))
           (exprp (car x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM EXPRP-CAR-2 ...):  Our heuristics choose
(EXPRP (CAR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM EXPRP-CAR-2 ...)
Rules: ((:DEFINITION *-EXPRP)
        (:DEFINITION +-EXPRP)
        (:DEFINITION EXPRP)
        (:DEFINITION INC-EXPRP)
        (:DEFINITION SQ-EXPRP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.04, print: 0.00, other: 0.05)
Prover steps counted:  547

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 141 (141 unique)
satisfied the hypotheses, and found 0 counterexamples and 141 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(1 + ACL2::A)))
 -- ((X '(2 * (INC 0))))
 -- ((X '(0 * 0)))
 EXPRP-CAR-2

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm consp-exprp
  (implies (and (exprp x)
                (not (atom x))
                (not (inc-exprp x))
                (not (sq-exprp x)))
           (consp (cddr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM CONSP-EXPRP ...):  Our heuristics choose
(CDDR X) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM CONSP-EXPRP ...)
Rules: ((:DEFINITION *-EXPRP)
        (:DEFINITION +-EXPRP)
        (:DEFINITION ATOM)
        (:DEFINITION EXPRP)
        (:DEFINITION NOT))
Warnings:  Invariant-risk
Time:  0.09 seconds (prove: 0.04, print: 0.00, other: 0.06)
Prover steps counted:  478

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 150 (150 unique)
satisfied the hypotheses, and found 0 counterexamples and 150 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((1 + 0) * (0 * 0))))
 -- ((X '((INC ACL2::A) * ACL2::A)))
 -- ((X '((SQ (INC 0)) + (0 + 0))))
 CONSP-EXPRP

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm consp-*-exprp
  (implies (*-exprp x)
           (consp (cddr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM CONSP-*-EXPRP ...):  Our heuristics choose
(CDDR X) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM CONSP-*-EXPRP ...)
Rules: ((:DEFINITION *-EXPRP))
Warnings:  Invariant-risk
Time:  0.09 seconds (prove: 0.03, print: 0.00, other: 0.06)
Prover steps counted:  122

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 466 (466 unique)
satisfied the hypotheses, and found 0 counterexamples and 466 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((ACL2::A * 0) * 0)))
 -- ((X '(ACL2::A * 0)))
 -- ((X '((SQ 0) * ACL2::A)))
 CONSP-*-EXPRP

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm consp-+-exprp
  (implies (+-exprp x)
           (consp (cddr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM CONSP-+-EXPRP ...):  Our heuristics choose
(CDDR X) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM CONSP-+-EXPRP ...)
Rules: ((:DEFINITION +-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Prover steps counted:  122

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 439 (439 unique)
satisfied the hypotheses, and found 0 counterexamples and 439 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(336 + ACL2::A)))
 -- ((X '(0 + 0)))
 -- ((X '(ACL2::A + 0)))
 CONSP-+-EXPRP

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm +-exprp-car
  (implies (+-exprp x)
           (exprp (car x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM +-EXPRP-CAR ...):  Our heuristics choose
(EXPRP (CAR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( DEFTHM +-EXPRP-CAR ...)
Rules: ((:FORWARD-CHAINING +-EXPR=>DEF)
        (:TYPE-PRESCRIPTION +-EXPRP))
Warnings:  Invariant-risk
Time:  0.07 seconds (prove: 0.03, print: 0.00, other: 0.05)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 480 (480 unique)
satisfied the hypotheses, and found 0 counterexamples and 480 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((INC ACL2::A) + (SQ 0))))
 -- ((X '(0 + 0)))
 -- ((X '(((INC 0) + ACL2::A) + ACL2::A)))
 +-EXPRP-CAR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm +-exprp-caddr
  (implies (+-exprp x)
           (exprp (caddr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM +-EXPRP-CADDR ...):  Our heuristics choose
(EXPRP (CADDR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM +-EXPRP-CADDR ...)
Rules: ((:DEFINITION +-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Prover steps counted:  143

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 463 (463 unique)
satisfied the hypotheses, and found 0 counterexamples and 463 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((SQ 0) + (INC 0))))
 -- ((X '(1 + 0)))
 -- ((X '(0 + 0)))
 +-EXPRP-CADDR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm *-exprp-car
  (implies (*-exprp x)
           (exprp (car x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM *-EXPRP-CAR ...):  Our heuristics choose
(EXPRP (CAR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( DEFTHM *-EXPRP-CAR ...)
Rules: ((:FORWARD-CHAINING *-EXPR=>DEF)
        (:TYPE-PRESCRIPTION *-EXPRP))
Warnings:  Invariant-risk
Time:  0.07 seconds (prove: 0.02, print: 0.00, other: 0.05)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 461 (461 unique)
satisfied the hypotheses, and found 0 counterexamples and 461 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(ACL2::A * 0)))
 -- ((X '(ACL2::AACB * (INC 0))))
 -- ((X '((0 + 0) * ACL2::A)))
 *-EXPRP-CAR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm *-exprp-caddr
  (implies (*-exprp x)
           (exprp (caddr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM *-EXPRP-CADDR ...):  Our heuristics choose
(EXPRP (CADDR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM *-EXPRP-CADDR ...)
Rules: ((:DEFINITION *-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Prover steps counted:  143

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 437 (437 unique)
satisfied the hypotheses, and found 0 counterexamples and 437 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((SQ 0) * 0)))
 -- ((X '((SQ 0) * ACL2::A)))
 -- ((X '(ACL2::A * 0)))
 *-EXPRP-CADDR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm sq-exprp-cadr
  (implies (sq-exprp x)
           (exprp (cadr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM SQ-EXPRP-CADR ...):  Our heuristics choose
(EXPRP (CADR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM SQ-EXPRP-CADR ...)
Rules: ((:DEFINITION SQ-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.04)
Prover steps counted:  116

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 249 (249 unique)
satisfied the hypotheses, and found 0 counterexamples and 249 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(SQ (0 + 0))))
 -- ((X '(SQ ACL2::A)))
 -- ((X '(SQ 0)))
 SQ-EXPRP-CADR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm inc-exprp-cadr
  (implies (inc-exprp x)
           (exprp (cadr x)))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM INC-EXPRP-CADR ...):  Our heuristics choose
(EXPRP (CADR X)) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

Summary
Form:  ( DEFTHM INC-EXPRP-CADR ...)
Rules: ((:DEFINITION INC-EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.03, print: 0.00, other: 0.05)
Prover steps counted:  116

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 367 (367 unique)
satisfied the hypotheses, and found 0 counterexamples and 367 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '(INC (INC 0))))
 -- ((X '(INC -1)))
 -- ((X '(INC (SQ 0))))
 INC-EXPRP-CADR

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm exprp-cases
  (implies (and (exprp x)
                (not (integerp x))
                (not (symbolp x))
                (not (inc-exprp x))
                (not (sq-exprp x))
                (not (*-exprp x)))
           (+-exprp x))
  :rule-classes :type-prescription)

ACL2 Observation in ( DEFTHM EXPRP-CASES ...):  Our heuristics choose
(+-EXPRP X) as the :TYPED-TERM.

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Summary
Form:  ( DEFTHM EXPRP-CASES ...)
Rules: ((:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING EXPR=>DEF)
        (:TYPE-PRESCRIPTION EXPRP))
Warnings:  Invariant-risk
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 66 (66 unique) satisfied
the hypotheses, and found 0 counterexamples and 66 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((X '((INC ACL2::A) + (INC 0))))
 -- ((X '(((INC 0) * ACL2::A) + ACL2::A)))
 -- ((X '((INC 0) + (SQ 0))))
 EXPRP-CASES

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defthm exprp-expand
  (equal (exprp x)
         (or (integerp x)
             (symbolp x)
             (inc-exprp x)
             (sq-exprp x)
             (*-exprp x)
             (+-exprp x)))
  :rule-classes ((:compound-recognizer) (:rewrite)))

ACL2 Observation in ( DEFTHM EXPRP-EXPAND ...):  When (EXPRP ACL2::X)
is assumed true, EXPRP-EXPAND will allow us to deduce nothing about
the type of X.  When (EXPRP ACL2::X) is assumed false, EXPRP-EXPAND
will allow us to deduce 
(AND (NOT (INTEGERP ACL2::X)) (NOT (SYMBOLP ACL2::X))).  Note that
(EXPRP ACL2::X) is not a strong compound recognizer, according to this
rule.  See doc :compound-recognizer if these observations surprise
you.  These particular expressions of the type information are based
on trivial observations.

ACL2 Warning [Subsume] in ( DEFTHM EXPRP-EXPAND ...):  A newly proposed
:REWRITE rule generated from EXPRP-EXPAND probably subsumes the previously
added :REWRITE rules DEF=>EXPR, DEF=>EXPR, DEF=>EXPR, DEF=>EXPR, DEF=>EXPR
and DEF=>EXPR, in the sense that the new rule will now probably be
applied whenever the old rules would have been.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Goal (12 subgoals).
  if-intro: ((:DEFINITION *-EXPRP)
             (:DEFINITION EXPRP)
             (:DEFINITION IFF)
             (:DEFINITION INC-EXPRP)
             (:DEFINITION SQ-EXPRP))

Subgoal 12

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 11

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 10

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 9

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 8

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 7

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 6

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 5

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 3

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 2

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal 1

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Q.E.D.

The storage of EXPRP-EXPAND depends upon the :type-prescription rules
*-EXPRP, EXPRP, INC-EXPRP and SQ-EXPRP.

Summary
Form:  ( DEFTHM EXPRP-EXPAND ...)
Rules: ((:COMPOUND-RECOGNIZER BOOLEANP-COMPOUND-RECOGNIZER)
        (:DEFINITION *-EXPRP)
        (:DEFINITION EXPRP)
        (:DEFINITION IFF)
        (:DEFINITION INC-EXPRP)
        (:DEFINITION NOT)
        (:DEFINITION SQ-EXPRP)
        (:EXECUTABLE-COUNTERPART TAU-SYSTEM)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:FORWARD-CHAINING *-EXPR=>DEF)
        (:FORWARD-CHAINING INC-EXPR=>DEF)
        (:FORWARD-CHAINING SQ-EXPR=>DEF)
        (:REWRITE ACL2::EQUAL-OF-BOOLEANS-REWRITE)
        (:TYPE-PRESCRIPTION *-EXPRP)
        (:TYPE-PRESCRIPTION *-EXPRP-CADDR)
        (:TYPE-PRESCRIPTION *-EXPRP-CAR)
        (:TYPE-PRESCRIPTION +-EXPRP)
        (:TYPE-PRESCRIPTION CONSP-*-EXPRP)
        (:TYPE-PRESCRIPTION EXPRP)
        (:TYPE-PRESCRIPTION INC-EXPRP)
        (:TYPE-PRESCRIPTION INC-EXPRP-CADR)
        (:TYPE-PRESCRIPTION SQ-EXPRP)
        (:TYPE-PRESCRIPTION SQ-EXPRP-CADR))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION *-EXPRP)
             (:DEFINITION EXPRP)
             (:DEFINITION IFF)
             (:DEFINITION INC-EXPRP)
             (:DEFINITION SQ-EXPRP))
Warnings:  Invariant-risk and Subsume
Time:  0.15 seconds (prove: 0.14, print: 0.00, other: 0.00)
Prover steps counted:  2743
 EXPRP-EXPAND
ACL2S !>(in-theory (disable exprp inc-exprp sq-exprp *-exprp +-exprp))

Summary
Form:  ( IN-THEORY (DISABLE ...))
Rules: NIL
Time:  0.09 seconds (prove: 0.00, print: 0.00, other: 0.09)
 (:NUMBER-OF-ENABLED-RUNES 20984)
ACL2S !>(defdata2 assignment (alistof symbol integer))
 Predicate events...
Form:  ( DEFUN ASSIGNMENTP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Alistof theory events...
Form:  ( DEFTHM ACL2::ASSIGNMENTP-IMPLIES-ALISTP ...)
Form:  ( DEFTHM ACL2::ASSIGNMENTP-IMPLIES-TLP ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: ASSIGNMENTP relatively complete for Tau.
Form:  ( DEFTHM DEF=>ASSIGNMENT ...)
Form:  ( DEFTHM ASSIGNMENT=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM PUT-ASSOC-EQUAL-ASSIGNMENTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM PAIRLIS$-ASSIGNMENTP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-ASSIGNMENT-BUILTIN ...)
Form:  ( DEFUN NTH-ASSIGNMENT/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.59 seconds (prove: 0.46, print: 0.00, other: 0.13)
 Registering type...
Form:  ( DEFUN NTH-ASSIGNMENT ...)
Form:  ( ENCAPSULATE (((NTH-ASSIGNMENT * ...) ...) ...) ...)
Form:  ( DEFUN NTH-ASSIGNMENT/ACC ...)
Form:  ( ENCAPSULATE (((NTH-ASSIGNMENT/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-ASSIGNMENT NTH-ASSIGNMENT-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-ASSIGNMENT/ACC NTH-ASSIGNMENT/ACC-BUILTIN)
...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.63 seconds (prove: 0.46, print: 0.00, other: 0.17)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.92 seconds (prove: 0.46, print: 0.00, other: 0.46)
Prover steps counted:  9593
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (assignmentp '((x . 3) (y . 5) (z . 2))) t)
 :PASSED
ACL2S !>(check= (assignmentp '((x . 3) (y . 5) (2 . z))) nil)
 :PASSED
ACL2S !>(defunc2 lookupvar (x alist)
  :input-contract (and (symbolp x) (assignmentp alist))
  :output-contract (integerp (lookupvar x alist))
  (cond ((endp alist) 0)
        ((equal (car (car alist)) x) (cdr (car alist)))
        (t (lookupvar x (cdr alist)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LOOKUPVAR))
             '(CAR ALIST))
 (ASSIGNMENTP ALIST)
 (SYMBOLP X)
 (NOT (ENDP ALIST))
 (NOT (CONSP ALIST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LOOKUPVAR))
             '(CAR (CAR ALIST)))
 (ASSIGNMENTP ALIST)
 (SYMBOLP X)
 (NOT (ENDP ALIST))
 (NOT (CONSP (CAR ALIST))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LOOKUPVAR))
             '(CAR ALIST))
 (ASSIGNMENTP ALIST)
 (SYMBOLP X)
 (NOT (ENDP ALIST))
 (EQUAL (CAR (CAR ALIST)) X)
 (NOT (CONSP ALIST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LOOKUPVAR))
             '(CDR (CAR ALIST)))
 (ASSIGNMENTP ALIST)
 (SYMBOLP X)
 (NOT (ENDP ALIST))
 (EQUAL (CAR (CAR ALIST)) X)
 (NOT (CONSP (CAR ALIST))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY LOOKUPVAR))
             '(CDR ALIST))
 (ASSIGNMENTP ALIST)
 (SYMBOLP X)
 (NOT (ENDP ALIST))
 (NOT (EQUAL (CAR (CAR ALIST)) X))
 (NOT (CONSP ALIST)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 1.15 seconds
Form:  ( DEFUN LOOKUPVAR ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM LOOKUPVAR-CONTRACT ...)
Time:  0.16 seconds (prove: 0.10, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.16 seconds (prove: 0.10, print: 0.00, other: 0.05)
Form:  ( VERIFY-GUARDS LOOKUPVAR ...)
Time:  0.04 seconds (prove: 0.03, print: 0.00, other: 0.00)
Elapsed Run Time: 0.27 seconds

Function Name : LOOKUPVAR 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  1.72 seconds (prove: 0.44, print: 0.00, other: 1.28)
Prover steps counted:  4297
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (lookupvar 'z '((x . 3) (y . 5) (z . 2))) 2)
 :PASSED
ACL2S !>(check= (lookupvar 'a '((x . 3) (y . 5) (z . 2))) 0)
 :PASSED
ACL2S !>(defunc2 evaluate (x alist)
  :input-contract (and (exprp x) (assignmentp alist))
  :output-contract (integerp (evaluate x alist))
  (cond
   ((integerp x) x)
   ((symbolp x) (lookupvar x alist))
   ((inc-exprp x) (+ 1 (evaluate (car (cdr x)) alist)))
   ((sq-exprp x) (expt (evaluate (car (cdr x)) alist) 2))
   ((*-exprp x) (* (evaluate (car x) alist)
                   (evaluate (car (cdr (cdr x))) alist)))
   ;; Added a case for +
   ((+-exprp x) (+ (evaluate (car x) alist)
                   (evaluate (car (cdr (cdr x))) alist)))
   (t 0)))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (INC-EXPRP X)
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CADR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (INC-EXPRP X)
 (NOT (CONSP (CDR X))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ 1 (EVALUATE (CADR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (INC-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CADR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ 1 (EVALUATE (CADR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (INC-EXPRP (LIST* X1 X3 X4)))
         (ACL2-NUMBERP (EVALUATE X3 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (SQ-EXPRP X)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CADR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (SQ-EXPRP X)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(EXPT (EVALUATE (CADR X) ALIST) 2))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP X))
              (SQ-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CADR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(EXPT (EVALUATE (CADR X) ALIST) 2))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP (LIST* X1 X3 X4)))
              (SQ-EXPRP (LIST* X1 X3 X4)))
         (ACL2-NUMBERP (EVALUATE X3 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CAR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CADDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(* (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP X))
              (NOT (SQ-EXPRP X))
              (*-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CAR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(* (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP (CONS X1 X2)))
              (NOT (SQ-EXPRP (CONS X1 X2)))
              (*-EXPRP (CONS X1 X2)))
         (ACL2-NUMBERP (EVALUATE X1 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(* (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP X))
              (NOT (SQ-EXPRP X))
              (*-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CADDR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(* (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP (LIST* X1 X3 X5 X6)))
              (NOT (SQ-EXPRP (LIST* X1 X3 X5 X6)))
              (*-EXPRP (LIST* X1 X3 X5 X6)))
         (ACL2-NUMBERP (EVALUATE X5 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CAR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CDDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EVALUATE))
             '(CADDR X))
 (ASSIGNMENTP ALIST)
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP X))
              (NOT (SQ-EXPRP X))
              (NOT (*-EXPRP X))
              (+-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CAR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP (CONS X1 X2)))
              (NOT (SQ-EXPRP (CONS X1 X2)))
              (NOT (*-EXPRP (CONS X1 X2)))
              (+-EXPRP (CONS X1 X2)))
         (ACL2-NUMBERP (EVALUATE X1 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
(check= (evaluate 3 '((a . 2))) 3)

([ A key checkpoint:

Goal'
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP X))
              (NOT (SQ-EXPRP X))
              (NOT (*-EXPRP X))
              (+-EXPRP X))
         (ACL2-NUMBERP (EVALUATE (CADDR X) ALIST)))

*1 (Subgoal 1') is pushed for proof by induction:
(IMPLIES (AND (EXTRA-INFO '(:GUARD (:BODY EVALUATE))
                          '(+ (EVALUATE (CAR X) ALIST)
                              (EVALUATE (CADDR X) ALIST)))
              (ASSIGNMENTP ALIST)
              (NOT (INC-EXPRP (LIST* X1 X3 X5 X6)))
              (NOT (SQ-EXPRP (LIST* X1 X3 X5 X6)))
              (NOT (*-EXPRP (LIST* X1 X3 X5 X6)))
              (+-EXPRP (LIST* X1 X3 X5 X6)))
         (ACL2-NUMBERP (EVALUATE X5 ALIST))).

])

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Query: Testing function contract ... 

Splitter note (see :DOC splitter) for Goal (4 subgoals).
  if-intro: ((:REWRITE EXPRP-EXPAND))


([ A key checkpoint:

Subgoal 4
(IMPLIES (AND (*-EXPRP X) (ASSIGNMENTP ALIST))
         (INTEGERP (EVALUATE X ALIST)))

*1 (Subgoal 4) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 3
(IMPLIES (AND (INC-EXPRP X) (ASSIGNMENTP ALIST))
         (INTEGERP (EVALUATE X ALIST)))

*2 (Subgoal 3) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 2
(IMPLIES (AND (+-EXPRP X) (ASSIGNMENTP ALIST))
         (INTEGERP (EVALUATE X ALIST)))

*3 (Subgoal 2) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 1
(IMPLIES (AND (SQ-EXPRP X) (ASSIGNMENTP ALIST))
         (INTEGERP (EVALUATE X ALIST)))

*4 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *4 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 7.91 seconds
Form:  ( DEFUN EVALUATE ...)
Time:  1.74 seconds (prove: 1.67, print: 0.00, other: 0.07)
Form:  ( DEFTHM EVALUATE-CONTRACT ...)
Time:  0.17 seconds (prove: 0.13, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.17 seconds (prove: 0.13, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS EVALUATE ...)
Time:  0.07 seconds (prove: 0.05, print: 0.00, other: 0.02)
Elapsed Run Time: 3.75 seconds

Function Name : EVALUATE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  12.04 seconds (prove: 6.40, print: 0.02, other: 5.63)
Prover steps counted:  172876
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !> :PASSED
ACL2S !>(check= (evaluate 'a '((a . 2))) 2)
 :PASSED
ACL2S !>(check= (evaluate '(sq a) '((a . 2))) 4)
 :PASSED
ACL2S !>(check= (evaluate '(inc a) '((a . 2))) 3)
 :PASSED
ACL2S !>(check= (evaluate '(4 + a) '((a . 2))) 6)
 :PASSED
ACL2S !>(check= (evaluate '(4 * a) '((a . 2))) 8)
 :PASSED
ACL2S !>(check= (evaluate '((3 * b) + a)   '((a . 7) (b . 4))) 19)
 :PASSED
ACL2S !>(defdata stack (listof integer))
 Predicate events...
Form:  ( DEFUN STACKP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::STACKP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::STACKP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: STACKP relatively complete for Tau.
Form:  ( DEFTHM DEF=>STACK ...)
Form:  ( DEFTHM STACK=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-STACK-BUILTIN ...)
Form:  ( DEFUN NTH-STACK/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.96 seconds (prove: 0.61, print: 0.00, other: 0.35)
 Registering type...
Form:  ( DEFUN NTH-STACK ...)
Form:  ( ENCAPSULATE (((NTH-STACK * ...) ...) ...) ...)
Form:  ( DEFUN NTH-STACK/ACC ...)
Form:  ( ENCAPSULATE (((NTH-STACK/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-STACK NTH-STACK-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-STACK/ACC NTH-STACK/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.99 seconds (prove: 0.61, print: 0.00, other: 0.38)
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>:u
   d      30:x(DEFUNC2 EVALUATE (X ALIST) ...)
ACL2S !>(defdata2 stack (listof integer))
(defdata2 non-empty-stack (cons integer stack))
 Predicate events...
Form:  ( DEFUN STACKP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::STACKP-IMPLIES-TLP ...)
Form:  ( DEFTHM ACL2::STACKP-SUBTYPE-OF-ATOM-LIST ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: STACKP relatively complete for Tau.
Form:  ( DEFTHM DEF=>STACK ...)
Form:  ( DEFTHM STACK=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-STACKP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-STACK-BUILTIN ...)
Form:  ( DEFUN NTH-STACK/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.94 seconds (prove: 0.60, print: 0.00, other: 0.33)
 Registering type...
Form:  ( DEFUN NTH-STACK ...)
Form:  ( ENCAPSULATE (((NTH-STACK * ...) ...) ...) ...)
Form:  ( DEFUN NTH-STACK/ACC ...)
Form:  ( ENCAPSULATE (((NTH-STACK/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-STACK NTH-STACK-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-STACK/ACC NTH-STACK/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.98 seconds (prove: 0.60, print: 0.00, other: 0.37)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.24 seconds (prove: 0.60, print: 0.00, other: 0.64)
Prover steps counted:  5746
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !> Predicate events...
Form:  ( DEFUN NON-EMPTY-STACKP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: NON-EMPTY-STACKP relatively complete for Tau.
Form:  ( DEFTHM DEF=>NON-EMPTY-STACK ...)
Form:  ( DEFTHM NON-EMPTY-STACK=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-NON-EMPTY-STACK-BUILTIN ...)
Form:  ( DEFUN NTH-NON-EMPTY-STACK/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.11 seconds (prove: 0.03, print: 0.00, other: 0.08)
 Registering type...
Form:  ( DEFUN NTH-NON-EMPTY-STACK ...)
Form:  ( ENCAPSULATE (((NTH-NON-EMPTY-STACK * ...) ...) ...) ...)
Form:  ( DEFUN NTH-NON-EMPTY-STACK/ACC ...)
Form:  ( ENCAPSULATE (((NTH-NON-EMPTY-STACK/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-NON-EMPTY-STACK NTH-NON-EMPTY-STACK-BUILTIN)
...)
Form:  ( DEFATTACH (NTH-NON-EMPTY-STACK/ACC NTH-NON-EMPTY-STACK/ACC-BUILTIN)
...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.03 seconds (prove: 0.00, print: 0.00, other: 0.03)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.15 seconds (prove: 0.03, print: 0.00, other: 0.11)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.44 seconds (prove: 0.03, print: 0.00, other: 0.40)
Prover steps counted:  128
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 empty-stack nil)
 Predicate events...
Form:  ( DEFUN EMPTY-STACKP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: EMPTY-STACKP relatively complete for Tau.
Form:  ( DEFTHM DEF=>EMPTY-STACK ...)
Form:  ( DEFTHM EMPTY-STACK=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-EMPTY-STACK-BUILTIN ...)
Form:  ( DEFUN NTH-EMPTY-STACK/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)
 Registering type...
Form:  ( DEFUN NTH-EMPTY-STACK ...)
Form:  ( ENCAPSULATE (((NTH-EMPTY-STACK * ...) ...) ...) ...)
Form:  ( DEFUN NTH-EMPTY-STACK/ACC ...)
Form:  ( ENCAPSULATE (((NTH-EMPTY-STACK/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-EMPTY-STACK NTH-EMPTY-STACK-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-EMPTY-STACK/ACC NTH-EMPTY-STACK/ACC-BUILTIN)
...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.10 seconds (prove: 0.02, print: 0.00, other: 0.08)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.39 seconds (prove: 0.02, print: 0.00, other: 0.37)
Prover steps counted:  26
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (stackp '()) t)
 :PASSED
ACL2S !>(check= (empty-stackp '()) t)
 :PASSED
ACL2S !>(check= (non-empty-stackp '()) nil)
 :PASSED
ACL2S !>(check= (stackp '(1 2 -11 4)) t)
 :PASSED
ACL2S !>(check= (empty-stackp '(1 2 -11 4)) nil)
 :PASSED
ACL2S !>(check= (non-empty-stackp '(1 2 -11 4)) t)
 :PASSED
ACL2S !>(check= (stackp '(1 2/3 -11 4)) nil)
 :PASSED
ACL2S !>(check= (empty-stackp '(1 2/3 -11 4)) nil)
 :PASSED
ACL2S !>(check= (non-empty-stackp '(1 2/3 -11 4)) nil)
 :PASSED
ACL2S !>(test? (implies (non-empty-stackp x)
                (stackp x)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 963 (963 unique)
satisfied the hypotheses, and found 0 counterexamples and 963 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X '(-2 -1)))
 -- ((X '(-365)))
 -- ((X '(-203 7 0 0)))

Test? proved the conjecture under consideration. Therefore, no counterexamples
exist. 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(test? (implies (empty-stackp x)
                (stackp x)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

**Summary of Cgen/testing**
We tested 1000 examples across 2 subgoals, of which 2 (2 unique) satisfied
the hypotheses, and found 0 counterexamples and 2 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((X NIL))
 [found in : "Goal"]
 -- ((X NIL))

Test? proved the conjecture under consideration. Therefore, no counterexamples
exist. 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-subtype non-empty-stack stack)
Submitting 
(DEFTHM DEFDATA::NON-EMPTY-STACK-IS-SUBTYPE-OF-STACK
        (IMPLIES (NON-EMPTY-STACKP DEFDATA::X)
                 (STACKP DEFDATA::X))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Goal'

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 445 (445 unique)
satisfied the hypotheses, and found 0 counterexamples and 445 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X '(-1)))
 -- ((DEFDATA::X '(5 -1)))
 -- ((DEFDATA::X '(1)))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-subtype empty-stack stack)
Submitting 
(DEFTHM DEFDATA::EMPTY-STACK-IS-SUBTYPE-OF-STACK
        (IMPLIES (EMPTY-STACKP DEFDATA::X)
                 (STACKP DEFDATA::X))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 1 (1 unique) satisfied
the hypotheses, and found 0 counterexamples and 1 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X NIL))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata-disjoint empty-stack non-empty-stack)
Submitting 
(DEFTHM DEFDATA::EMPTY-STACK-IS-DISJOINT-WITH-NON-EMPTY-STACK
        (IMPLIES (EMPTY-STACKP DEFDATA::X)
                 (NOT (NON-EMPTY-STACKP DEFDATA::X)))
        (:RULE-CLASSES (:TAU-SYSTEM)))

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 500 examples across 1 subgoals, of which 1 (1 unique) satisfied
the hypotheses, and found 0 counterexamples and 1 witnesses.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((DEFDATA::X NIL))
 :SUCCESS

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 pop-stack (stk) 
  :input-contract (stackp stk)
  :output-contract (stackp (pop-stack stk))
  (cdr stk))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Query: Testing function contract ... 

Q.E.D.
Elapsed Run Time: 0.15 seconds
Form:  ( DEFUN POP-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM POP-STACK-CONTRACT ...)
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS POP-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.11 seconds

Function Name : POP-STACK 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.55 seconds (prove: 0.05, print: 0.00, other: 0.50)
Prover steps counted:  175
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 top-stack (stk)
  :input-contract (stackp stk)
  :output-contract (integerp (top-stack stk))
  (if (consp stk) (car stk) 0))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.09 seconds
Form:  ( DEFUN TOP-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM TOP-STACK-CONTRACT ...)
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)
Form:  ( VERIFY-GUARDS TOP-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.10 seconds

Function Name : TOP-STACK 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.49 seconds (prove: 0.04, print: 0.00, other: 0.45)
Prover steps counted:  199
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 push-stack (val stk) 
  :input-contract (and (stackp stk) (integerp val))
  :output-contract (non-empty-stackp (push-stack val stk))
  (cons val stk))
Query: Testing body contracts ... 

Q.E.D.
Query: Testing function contract ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.
Elapsed Run Time: 0.12 seconds
Form:  ( DEFUN PUSH-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Form:  ( DEFTHM PUSH-STACK-CONTRACT ...)
Time:  0.09 seconds (prove: 0.03, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.09 seconds (prove: 0.03, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS PUSH-STACK ...)
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 0.14 seconds

Function Name : PUSH-STACK 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  0.58 seconds (prove: 0.05, print: 0.00, other: 0.52)
Prover steps counted:  280
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 load-instr (list 'load symbol))
 Predicate events...
Form:  ( DEFUN LOAD-INSTRP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (LOAD-INSTRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (LOAD-INSTRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM LOAD-INSTR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-LOAD-INSTR-BUILTIN ...)
Form:  ( DEFUN NTH-LOAD-INSTR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.10 seconds (prove: 0.02, print: 0.00, other: 0.08)
 Registering type...
Form:  ( DEFUN NTH-LOAD-INSTR ...)
Form:  ( ENCAPSULATE (((NTH-LOAD-INSTR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-LOAD-INSTR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-LOAD-INSTR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-LOAD-INSTR NTH-LOAD-INSTR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-LOAD-INSTR/ACC NTH-LOAD-INSTR/ACC-BUILTIN)
...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.14 seconds (prove: 0.02, print: 0.00, other: 0.12)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.48 seconds (prove: 0.02, print: 0.00, other: 0.47)
Prover steps counted:  112
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 push-instr (list 'push integer))
 Predicate events...
Form:  ( DEFUN PUSH-INSTRP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
 (PUSH-INSTRP DEFDATA::V1) <= body -- not complete. 
Reasons: 
("Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

 (PUSH-INSTRP DEFDATA::V1) => body -- not complete. 
Reasons: 
("The formula fails to fit any of the forms for acceptable :TAU-SYSTEM rules."
 "Nesting i.e. (P (f ... (g x1 ...) ...) not allowed in conclusion of signature rule")

Form:  ( DEFTHM PUSH-INSTR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-PUSH-INSTR-BUILTIN ...)
Form:  ( DEFUN NTH-PUSH-INSTR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.10 seconds (prove: 0.02, print: 0.00, other: 0.08)
 Registering type...
Form:  ( DEFUN NTH-PUSH-INSTR ...)
Form:  ( ENCAPSULATE (((NTH-PUSH-INSTR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-PUSH-INSTR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-PUSH-INSTR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-PUSH-INSTR NTH-PUSH-INSTR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-PUSH-INSTR/ACC NTH-PUSH-INSTR/ACC-BUILTIN)
...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.14 seconds (prove: 0.02, print: 0.00, other: 0.12)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.47 seconds (prove: 0.02, print: 0.00, other: 0.46)
Prover steps counted:  112
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 dup-instr '(dup))
 Predicate events...
Form:  ( DEFUN DUP-INSTRP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: DUP-INSTRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>DUP-INSTR ...)
Form:  ( DEFTHM DUP-INSTR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-DUP-INSTR-BUILTIN ...)
Form:  ( DEFUN NTH-DUP-INSTR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.06 seconds (prove: 0.02, print: 0.00, other: 0.04)
 Registering type...
Form:  ( DEFUN NTH-DUP-INSTR ...)
Form:  ( ENCAPSULATE (((NTH-DUP-INSTR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-DUP-INSTR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-DUP-INSTR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-DUP-INSTR NTH-DUP-INSTR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-DUP-INSTR/ACC NTH-DUP-INSTR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.10 seconds (prove: 0.02, print: 0.00, other: 0.08)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.42 seconds (prove: 0.02, print: 0.00, other: 0.40)
Prover steps counted:  26
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 add-instr '(add))
 Predicate events...
Form:  ( DEFUN ADD-INSTRP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: ADD-INSTRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>ADD-INSTR ...)
Form:  ( DEFTHM ADD-INSTR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-ADD-INSTR-BUILTIN ...)
Form:  ( DEFUN NTH-ADD-INSTR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.07 seconds (prove: 0.02, print: 0.00, other: 0.05)
 Registering type...
Form:  ( DEFUN NTH-ADD-INSTR ...)
Form:  ( ENCAPSULATE (((NTH-ADD-INSTR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-ADD-INSTR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-ADD-INSTR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-ADD-INSTR NTH-ADD-INSTR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-ADD-INSTR/ACC NTH-ADD-INSTR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.11 seconds (prove: 0.02, print: 0.00, other: 0.09)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.44 seconds (prove: 0.02, print: 0.00, other: 0.42)
Prover steps counted:  26
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 mul-instr '(mul))
 Predicate events...
Form:  ( DEFUN MUL-INSTRP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: MUL-INSTRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>MUL-INSTR ...)
Form:  ( DEFTHM MUL-INSTR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-MUL-INSTR-BUILTIN ...)
Form:  ( DEFUN NTH-MUL-INSTR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.07 seconds (prove: 0.02, print: 0.00, other: 0.05)
 Registering type...
Form:  ( DEFUN NTH-MUL-INSTR ...)
Form:  ( ENCAPSULATE (((NTH-MUL-INSTR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-MUL-INSTR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-MUL-INSTR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-MUL-INSTR NTH-MUL-INSTR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-MUL-INSTR/ACC NTH-MUL-INSTR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.11 seconds (prove: 0.02, print: 0.00, other: 0.09)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.44 seconds (prove: 0.02, print: 0.00, other: 0.42)
Prover steps counted:  26
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defdata2 instr (oneof load-instr push-instr dup-instr add-instr mul-instr))
 Predicate events...
Form:  ( DEFUN INSTRP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: INSTRP relatively complete for Tau.
Form:  ( DEFTHM DEF=>INSTR ...)
Form:  ( DEFTHM INSTR=>DEF ...)
 Enumerator events...
Form:  ( DEFUN NTH-INSTR-BUILTIN ...)
Form:  ( DEFUN NTH-INSTR/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.08 seconds (prove: 0.02, print: 0.00, other: 0.06)
 Registering type...
Form:  ( DEFUN NTH-INSTR ...)
Form:  ( ENCAPSULATE (((NTH-INSTR * ...) ...) ...) ...)
Form:  ( DEFUN NTH-INSTR/ACC ...)
Form:  ( ENCAPSULATE (((NTH-INSTR/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-INSTR NTH-INSTR-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-INSTR/ACC NTH-INSTR/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.12 seconds (prove: 0.02, print: 0.00, other: 0.10)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  0.46 seconds (prove: 0.02, print: 0.00, other: 0.44)
Prover steps counted:  192
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (instrp '(load x)) t)
 :PASSED
ACL2S !>(check= (instrp '(push x)) nil)
 :PASSED
ACL2S !>(check= (instrp '(push 10)) t)
 :PASSED
ACL2S !>(check= (instrp '(dup)) t)
 :PASSED
ACL2S !>(check= (instrp '(mul x y)) nil)
 :PASSED
ACL2S !>(defunc2 execute (instr alist stk)
  :input-contract (and (instrp instr) (assignmentp alist) (stackp stk))
  :output-contract (stackp (execute instr alist stk))
  (cond
   ((load-instrp instr)
    (push-stack (lookup (car (cdr instr)) alist) stk))
   ((push-instrp instr)
    (push-stack (car (cdr instr)) stk))
   ((dup-instrp instr)
    (push-stack (top-stack stk) stk))
   ((add-instrp instr)
    (let ((n (top-stack stk))
          (s1 (pop-stack stk)))
      (let ((m (top-stack s1))
            (s2 (pop-stack s1)))
        (push-stack (+ m n) s2))))
   (t
    (let ((n (top-stack stk))
          (s1 (pop-stack stk)))
      (let ((m (top-stack s1))
            (s2 (pop-stack s1)))
        (push-stack (* m n) s2)))))

  (check= (execute '(load a)  '((a . 7) (b . 4))   '(3 2 1))
	  '(7 3 2 1)))


ACL2 Error in macro expansion:  Wrong number of args in macro expansion
of 
(DEFUNC2 EXECUTE (INSTR ALIST STK)
         :INPUT-CONTRACT
         (AND (INSTRP INSTR)
              (ASSIGNMENTP ALIST)
              (STACKP STK))
         :OUTPUT-CONTRACT
         (STACKP (EXECUTE INSTR ALIST STK))
         ...).
(See :DOC set-iprint to be able to see elided values in this message.)

ACL2S !>(defunc2 execute (instr alist stk)
  :input-contract (and (instrp instr) (assignmentp alist) (stackp stk))
  :output-contract (stackp (execute instr alist stk))
  (cond
   ((load-instrp instr)
    (push-stack (lookup (car (cdr instr)) alist) stk))
   ((push-instrp instr)
    (push-stack (car (cdr instr)) stk))
   ((dup-instrp instr)
    (push-stack (top-stack stk) stk))
   ((add-instrp instr)
    (let ((n (top-stack stk))
          (s1 (pop-stack stk)))
      (let ((m (top-stack s1))
            (s2 (pop-stack s1)))
        (push-stack (+ m n) s2))))
   (t
    (let ((n (top-stack stk))
          (s1 (pop-stack stk)))
      (let ((m (top-stack s1))
            (s2 (pop-stack s1)))
        (push-stack (* m n) s2))))))

***********************************************
************ ABORTING from raw Lisp ***********
********** (see :DOC raw-lisp-error) **********
Error:  Unknown function symbol LOOKUP
While executing: FUNCTION-IS-KNOWN?
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC raw-lisp-error and see :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2S !>(defunc2 execute (instr alist stk)
  :input-contract (and (instrp instr) (assignmentp alist) (stackp stk))
  :output-contract (stackp (execute instr alist stk))
  (cond
   ((load-instrp instr)
    (push-stack (lookupvar (car (cdr instr)) alist) stk))
   ((push-instrp instr)
    (push-stack (car (cdr instr)) stk))
   ((dup-instrp instr)
    (push-stack (top-stack stk) stk))
   ((add-instrp instr)
    (let ((n (top-stack stk))
          (s1 (pop-stack stk)))
      (let ((m (top-stack s1))
            (s2 (pop-stack s1)))
        (push-stack (+ m n) s2))))
   (t
    (let ((n (top-stack stk))
          (s1 (pop-stack stk)))
      (let ((m (top-stack s1))
            (s2 (pop-stack s1)))
        (push-stack (* m n) s2))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EXECUTE))
             '(CDR INSTR))
 (STACKP STK)
 (ASSIGNMENTP ALIST)
 (INSTRP INSTR)
 (LOAD-INSTRP INSTR)
 (NOT (CONSP INSTR)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EXECUTE))
             '(CADR INSTR))
 (STACKP STK)
 (ASSIGNMENTP ALIST)
 (INSTRP INSTR)
 (LOAD-INSTRP INSTR)
 (NOT (CONSP (CDR INSTR))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EXECUTE))
             '(CDR INSTR))
 (STACKP STK)
 (ASSIGNMENTP ALIST)
 (INSTRP INSTR)
 (NOT (LOAD-INSTRP INSTR))
 (PUSH-INSTRP INSTR)
 (NOT (CONSP INSTR)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY EXECUTE))
             '(CADR INSTR))
 (STACKP STK)
 (ASSIGNMENTP ALIST)
 (INSTRP INSTR)
 (NOT (LOAD-INSTRP INSTR))
 (PUSH-INSTRP INSTR)
 (NOT (CONSP (CDR INSTR))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Splitter note (see :DOC splitter) for Goal (7 subgoals).
  if-intro: ((:DEFINITION EXECUTE)
             (:DEFINITION INSTRP)
             (:DEFINITION LOAD-INSTRP)
             (:DEFINITION PUSH-INSTRP)
             (:DEFINITION TOP-STACK-DEFINITION-RULE))


Q.E.D.
Elapsed Run Time: 1.91 seconds
Form:  ( DEFUN EXECUTE ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
Form:  ( DEFTHM EXECUTE-CONTRACT ...)
Time:  0.28 seconds (prove: 0.22, print: 0.00, other: 0.06)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.28 seconds (prove: 0.22, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS EXECUTE ...)
Time:  0.02 seconds (prove: 0.01, print: 0.00, other: 0.01)
Elapsed Run Time: 0.35 seconds

Function Name : EXECUTE 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  2.71 seconds (prove: 0.73, print: 0.00, other: 1.98)
Prover steps counted:  8773
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check= (execute '(load a)  '((a . 7) (b . 4))   '(3 2 1))
	'(7 3 2 1))
 :PASSED
ACL2S !>(check= (execute '(push 5)  '((a . 7) (b . 4))   '(3 2 1))
        '(5 3 2 1))
 :PASSED
ACL2S !>(check= (execute '(dup)     '((a . 7) (b . 4))   '(3 2 1))        '(3 3 2 1))
 :PASSED
ACL2S !>(check= (execute '(add)     '((a . 7) (b . 4))   '(3 2 1))
        '(5 1))
 :PASSED
ACL2S !>(check= (execute '(mul)     '((a . 7) (b . 4))   '(3 2 1))
        '(6 1))
 :PASSED
ACL2S !>(defdata2 program (listof instr))
 Predicate events...
Form:  ( DEFUN PROGRAMP ...)
Form:  ( IN-THEORY (ACL2::DISABLE* ...))
Form:  ( IN-THEORY (ENABLE ...))
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Listof theory events...
Form:  ( DEFTHM ACL2::PROGRAMP-IMPLIES-TLP ...)
Form:  ( TABLE ACL2::RULESET-TABLE ...)
Form:  ( MAKE-EVENT (LET* ...))
 Tau characterization events...
Defdata/Note: PROGRAMP relatively complete for Tau.
Form:  ( DEFTHM ACL2::DEF=>PROGRAM ...)
Form:  ( DEFTHM ACL2::PROGRAM=>DEF ...)
 Polymorphic sig instantiation events...
Form:  ( DEFTHM APPEND-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REV-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTH-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CONS-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIX-TRUE-LIST-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM LAST-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REPEAT-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM MAKE-LIST-AC-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM NTHCDR-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE1-EQUAL-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REMOVE-DUPLICATES-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM CDR-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVAPPEND-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM REVERSE-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SET-DIFFERENCE$-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM FIRST-N-AC-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM TAKE-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-LIST-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM SUBSEQ-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
Form:  ( DEFTHM UPDATE-NTH-PROGRAMP-SIG ...)
Form:  ( MAKE-EVENT (QUOTE ...))
 Enumerator events...
Form:  ( DEFUN NTH-PROGRAM-BUILTIN ...)
Form:  ( DEFUN NTH-PROGRAM/ACC-BUILTIN ...)
Form:  ( PROGN (SET-BOGUS-DEFUN-HINTS-OK T) ...)
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.81 seconds (prove: 0.51, print: 0.00, other: 0.30)
 Registering type...
Form:  ( DEFUN NTH-PROGRAM ...)
Form:  ( ENCAPSULATE (((NTH-PROGRAM * ...) ...) ...) ...)
Form:  ( DEFUN NTH-PROGRAM/ACC ...)
Form:  ( ENCAPSULATE (((NTH-PROGRAM/ACC * ...) ...) ...) ...)

TTAG NOTE: Adding ttag :DEFDATA-ATTACH from the top level loop.
Form:  ( DEFATTACH (NTH-PROGRAM NTH-PROGRAM-BUILTIN) ...)
Form:  ( DEFATTACH (NTH-PROGRAM/ACC NTH-PROGRAM/ACC-BUILTIN) ...)
Form:  ( TABLE DEFDATA::TYPE-METADATA-TABLE ...)
Form:  ( PROGN (LOCAL ...) ...)

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Form:  ( ENCAPSULATE NIL (LOGIC) ...)
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( MAKE-EVENT (DEFDATA::REGISTER-TYPE-FN ...))
Time:  0.04 seconds (prove: 0.00, print: 0.00, other: 0.04)
Form:  ( PROGN (ENCAPSULATE NIL ...) ...)
Time:  0.85 seconds (prove: 0.51, print: 0.00, other: 0.34)

Summary
Form:  ( PROGN! (DEFDATA2- ...) ...)
Rules: NIL
Time:  1.22 seconds (prove: 0.51, print: 0.00, other: 0.71)
Prover steps counted:  3817
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :DEFDATA-ATTACH).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(defunc2 m (program alist stk)
  :input-contract (and (programp program)
                       (assignmentp alist)
                       (stackp stk))
  :output-contract (stackp (m program alist stk))
  (cond ((endp program) stk)
        (t (m (cdr program) alist (execute (car program) alist stk)))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY M))
             '(CAR PROGRAM))
 (EXTRA-INFO '(:GUARD (:BODY M))
             '(CDR PROGRAM))
 (STACKP STK)
 (ASSIGNMENTP ALIST)
 (PROGRAMP PROGRAM)
 (NOT (ENDP PROGRAM))
 (NOT (CONSP PROGRAM)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 2.26 seconds
Form:  ( DEFUN M ...)
Time:  0.02 seconds (prove: 0.00, print: 0.00, other: 0.02)
Form:  ( DEFTHM M-CONTRACT ...)
Time:  2.13 seconds (prove: 2.07, print: 0.00, other: 0.05)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  2.13 seconds (prove: 2.07, print: 0.00, other: 0.06)
Form:  ( VERIFY-GUARDS M ...)
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.00)
Elapsed Run Time: 2.22 seconds

Function Name : M 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  4.87 seconds (prove: 2.52, print: 0.00, other: 2.36)
Prover steps counted:  80885
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check=
 (m '((load a) (dup) (add)) '((a . 7) (b . 4))  '(1 2 3))
 '(14 1 2 3))
 :PASSED
ACL2S !>(defunc2 compile-expression (x)
  :input-contract (exprp x)
  :output-contract (programp (compile-expression x))
  (cond
   ((integerp x) (cons (cons 'push (cons x nil)) nil))
   ((symbolp x) (cons (cons 'load (cons x nil)) nil))
   ((inc-exprp x)
    (append (compile-expression (car (cdr x))) '((push 1) (add))))
   ((sq-exprp x)
    (append (compile-expression (car (cdr x))) '((dup) (mul))))
   ((+-exprp x)
    (append (compile-expression (car x)) 
            (compile-expression (car (cdr (cdr x))))
            '((add))))
   (t 
    (append (compile-expression (car x)) 
            (compile-expression (car (cdr (cdr x))))
            '((mul))))))
Query: Testing body contracts ... 

TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILE-EXPRESSION))
             '(CDR X))
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (INC-EXPRP X)
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILE-EXPRESSION))
             '(CADR X))
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (INC-EXPRP X)
 (NOT (CONSP (CDR X))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILE-EXPRESSION))
             '(CDR X))
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (SQ-EXPRP X)
 (NOT (CONSP X)))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILE-EXPRESSION))
             '(CADR X))
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (SQ-EXPRP X)
 (NOT (CONSP (CDR X))))

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)


Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILE-EXPRESSION))
             '(CDR X))
 (EXTRA-INFO '(:GUARD (:BODY COMPILE-EXPRESSION))
             '(CAR X))
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILE-EXPRESSION))
             '(CDDR X))
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 (+-EXPRP X)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.


ACL2 Error in CGEN::SIMPLIFY-TERM:  An attempt has been made to simplify
the following list of terms, perhaps to be used as hypotheses for simplificati\
on:

((EXTRA-INFO '(:GUARD (:BODY COMPILE-EXPRESSION))
             '(CADDR X))
 (EXPRP X)
 (NOT (INTEGERP X))
 (NOT (SYMBOLP X))
 (NOT (INC-EXPRP X))
 (NOT (SQ-EXPRP X))
 (+-EXPRP X)
 ...)

However, that list is contradictory!  (Technical note: the contradiction
was found using type-set reasoning.)
(See :DOC set-iprint to be able to see elided values in this message.)


Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.

Q.E.D.
Query: Testing function contract ... 

Splitter note (see :DOC splitter) for Goal (4 subgoals).
  if-intro: ((:REWRITE EXPRP-EXPAND))


([ A key checkpoint:

Subgoal 4
(IMPLIES (*-EXPRP X)
         (PROGRAMP (COMPILE-EXPRESSION X)))

*1 (Subgoal 4) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 3
(IMPLIES (INC-EXPRP X)
         (PROGRAMP (COMPILE-EXPRESSION X)))

*2 (Subgoal 3) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 2
(IMPLIES (+-EXPRP X)
         (PROGRAMP (COMPILE-EXPRESSION X)))

*3 (Subgoal 2) is pushed for proof by induction.

])

([ A key checkpoint:

Subgoal 1
(IMPLIES (SQ-EXPRP X)
         (PROGRAMP (COMPILE-EXPRESSION X)))

*4 (Subgoal 1) is pushed for proof by induction.

])

Normally we would attempt to prove *4 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.
Elapsed Run Time: 3.17 seconds
Form:  ( DEFUN COMPILE-EXPRESSION ...)
Time:  0.75 seconds (prove: 0.72, print: 0.00, other: 0.03)
Form:  ( DEFTHM COMPILE-EXPRESSION-CONTRACT ...)
Time:  0.74 seconds (prove: 0.70, print: 0.00, other: 0.03)
Form:  ( MAKE-EVENT (QUOTE ...))
Time:  0.74 seconds (prove: 0.70, print: 0.00, other: 0.03)
Form:  ( VERIFY-GUARDS COMPILE-EXPRESSION ...)
Time:  0.07 seconds (prove: 0.06, print: 0.00, other: 0.01)
Elapsed Run Time: 2.33 seconds

Function Name : COMPILE-EXPRESSION 
Termination proven -------- [*] 
Function Contract proven -- [*] 
Body Contracts proven ----- [*]

Summary
Form:  ( PROGN! (DEFUNC2- ...) ...)
Rules: NIL
Time:  6.05 seconds (prove: 3.32, print: 0.00, other: 2.73)
Prover steps counted:  103391
 T

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(check=
 (compile-expression '(sq (inc (a + (3 * b)))))
 '((load a)
   (push 3)
   (load b)
   (mul)
   (add)
   (push 1)
   (add)
   (dup)
   (mul)))
 :PASSED
ACL2S !>(suggest-lemma (m (append p1 p2) a s)
	       :with m)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM M (BINARY-APPEND P1 P2) A S)
  (((TRUE-LISTP P1))
   ((STACKP S))
   ((PROGRAMP (BINARY-APPEND P1 P2)))
   ((ASSIGNMENTP A))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 110 (110 unique)
satisfied the hypotheses, and found 110 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '((ACL2::A . 0))) (P2 NIL) (S '(-249)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S '(1 0 0)) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '((ACL2::A . 0)))
                   (P2 NIL)
                   (S '(-249))
                   (P1 NIL))
                  ((A NIL) (P2 NIL) (S NIL) (P1 NIL))
                  ((A NIL)
                   (P2 NIL)
                   (S '(1 0 0))
                   (P1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT 'NIL ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 1 1 1 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::P1 NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1 1 1 1 1) NIL) NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::P1) (ACL2S::STACKP ACL2S::S) (ACL2S::PROGRAMP (BINARY-APPEND ACL2S::P1 ACL2S::P2)) (ACL2S::ASSIGNMENTP ACL2S::A)) (EQUAL (ACL2S::M (APPEND ACL2S::P1 ACL2S::P2) ACL2S::A ACL2S::S) ACL2S::S)) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 122 (122 unique)
satisfied the hypotheses, and found 0 counterexamples and 122 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '((ACL2::BA . 1))) (P2 NIL) (S '(-6 -1 0)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::O . -20))) (P2 NIL) (S NIL) (P1 NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" (IMPLIES (AND (TRUE-LISTP P1)
              (STACKP S)
              (PROGRAMP (BINARY-APPEND P1 P2))
              (ASSIGNMENTP A))
         (EQUAL (M (APPEND P1 P2) A S) S))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (TRUE-LISTP P1)
              (STACKP S)
              (PROGRAMP (BINARY-APPEND P1 P2))
              (ASSIGNMENTP A))
	      (EQUAL (M (APPEND P1 P2) A S) S)))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Perhaps we can prove *1 by induction.  Five induction schemes are suggested
by this conjecture.  Subsumption reduces that number to four.  These
merge into three derived induction schemes.  One of these has a score
higher than the others.  

We will induct according to a scheme suggested by (APPEND P1 P2). 
This suggestion was produced using the :induction rules BINARY-APPEND
and TRUE-LISTP.  If we let (:P A P1 P2 S) denote *1 above then the
induction scheme we'll use is
(AND (IMPLIES (AND (NOT (ENDP P1))
                   (:P A (CDR P1) P2 S))
              (:P A P1 P2 S))
     (IMPLIES (ENDP P1) (:P A P1 P2 S))).
This induction is justified by the same argument used to admit BINARY-APPEND.
When applied to the goal at hand the above induction scheme produces
four nontautological subgoals.
Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/4' (16 subgoals).
  if-intro: ((:DEFINITION EXECUTE-DEFINITION-RULE)
             (:DEFINITION INSTRP)
             (:DEFINITION LOAD-INSTRP)
             (:DEFINITION M-DEFINITION-RULE)
             (:DEFINITION PROGRAMP)
             (:DEFINITION PUSH-INSTRP)
             (:DEFINITION TOP-STACK-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP)
             (:REWRITE ACL2::|(* x (if a b c))|)
             (:REWRITE ACL2::|(+ x (if a b c))|)
             (:REWRITE ACL2::DEFAULT-PLUS-1)
             (:REWRITE ACL2::DEFAULT-PLUS-2)
             (:REWRITE ACL2::DEFAULT-TIMES-1)
             (:REWRITE ACL2::DEFAULT-TIMES-2))

Subgoal *1/4.16

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.16'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.16''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.16'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::ASSIGNMENTP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER ACL2::PROGRAMP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER ACL2::STACKP-IMPLIES-TLP)
        (:DEFINITION ADD-INSTRP)
        (:DEFINITION BINARY-APPEND)
        (:DEFINITION DUP-INSTRP)
        (:DEFINITION ENDP)
        (:DEFINITION EXECUTE-DEFINITION-RULE)
        (:DEFINITION INSTRP)
        (:DEFINITION LOAD-INSTRP)
        (:DEFINITION M-DEFINITION-RULE)
        (:DEFINITION MUL-INSTRP)
        (:DEFINITION NOT)
        (:DEFINITION POP-STACK-DEFINITION-RULE)
        (:DEFINITION PROGRAMP)
        (:DEFINITION PUSH-INSTRP)
        (:DEFINITION PUSH-STACK-DEFINITION-RULE)
        (:DEFINITION SYNP)
        (:DEFINITION TOP-STACK-DEFINITION-RULE)
        (:DEFINITION TRUE-LISTP)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART ADD-INSTRP)
        (:EXECUTABLE-COUNTERPART CAR)
        (:EXECUTABLE-COUNTERPART CDR)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART DUP-INSTRP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:EXECUTABLE-COUNTERPART INSTRP)
        (:EXECUTABLE-COUNTERPART INTEGERP)
        (:EXECUTABLE-COUNTERPART LOAD-INSTRP)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART PUSH-INSTRP)
        (:EXECUTABLE-COUNTERPART PUSH-STACK)
        (:EXECUTABLE-COUNTERPART STACKP)
        (:EXECUTABLE-COUNTERPART SYMBOLP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION BINARY-APPEND)
        (:INDUCTION TRUE-LISTP)
        (:REWRITE ACL2::|(* x (if a b c))|)
        (:REWRITE ACL2::|(* y x)|)
        (:REWRITE ACL2::|(+ 0 x)|)
        (:REWRITE ACL2::|(+ x (if a b c))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE CDR-STACKP-SIG)
        (:REWRITE CONS-PROGRAMP-SIG)
        (:REWRITE ACL2::CONSP-UNDER-IFF-WHEN-TRUE-LISTP)
        (:REWRITE DEF=>INSTR)
        (:REWRITE ACL2::DEFAULT-PLUS-1)
        (:REWRITE ACL2::DEFAULT-PLUS-2)
        (:REWRITE ACL2::DEFAULT-TIMES-1)
        (:REWRITE ACL2::DEFAULT-TIMES-2)
        (:REWRITE ACL2::HOW-COULD-THIS-HAVE-BEEN-LEFT-OUT??)
        (:TYPE-PRESCRIPTION LOOKUPVAR-CONTRACT))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION EXECUTE-DEFINITION-RULE)
             (:DEFINITION INSTRP)
             (:DEFINITION LOAD-INSTRP)
             (:DEFINITION M-DEFINITION-RULE)
             (:DEFINITION PROGRAMP)
             (:DEFINITION PUSH-INSTRP)
             (:DEFINITION TOP-STACK-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP)
             (:REWRITE ACL2::|(* x (if a b c))|)
             (:REWRITE ACL2::|(+ x (if a b c))|)
             (:REWRITE ACL2::DEFAULT-PLUS-1)
             (:REWRITE ACL2::DEFAULT-PLUS-2)
             (:REWRITE ACL2::DEFAULT-TIMES-1)
             (:REWRITE ACL2::DEFAULT-TIMES-2))
Warnings:  Invariant-risk
Time:  4.96 seconds (prove: 3.20, print: 0.00, other: 1.75)
Prover steps counted:  130025

---
The key checkpoint goals, below, may help you to debug this failure.
See :DOC failure and see :DOC set-checkpoint-summary-limit.
---

*** Key checkpoint at the top level: ***

Goal
(IMPLIES (AND (TRUE-LISTP P1)
              (STACKP S)
              (PROGRAMP (APPEND P1 P2))
              (ASSIGNMENTP A))
         (EQUAL (M (APPEND P1 P2) A S) S))

*** Key checkpoint under a top-level induction: ***

Subgoal *1/4.16
(IMPLIES (AND P1
              (EQUAL (M (APPEND (CDR P1) P2) A S) S)
              (CONSP P1)
              (TRUE-LISTP (CDR P1))
              (STACKP S)
              (CONSP (CAR P1))
              (EQUAL (CAR (CAR P1)) 'LOAD)
              (CONSP (CDR (CAR P1)))
              (SYMBOLP (CADR (CAR P1)))
              (NOT (CDDR (CAR P1)))
              (PROGRAMP (APPEND (CDR P1) P2))
              (ASSIGNMENTP A))
         (EQUAL (M (APPEND (CDR P1) P2)
                   A
                   (CONS (LOOKUPVAR (CADR (CAR P1)) A) S))
                S))

ACL2 Error in ( THM ...):  See :DOC failure.

******** FAILED ********

**Summary of Cgen/testing**
We tested 1564 examples across 3 subgoals, of which 84 (84 unique)
satisfied the hypotheses, and found 3 counterexamples and 81 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Subgoal *1/4.16'''"]
(IMPLIES (AND (CONS (LIST 'LOAD P7) P4)
              (EQUAL (M (APPEND P4 P2) A S) S)
              (TRUE-LISTP P4)
              (STACKP S)
              (SYMBOLP P7)
              (PROGRAMP (APPEND P4 P2))
              (ASSIGNMENTP A))
         (EQUAL (M (APPEND P4 P2)
                   A (CONS (LOOKUPVAR P7 A) S))
                S))

 -- 
((A '((ACL2::BBAA . 2) (ACL2::BA . -1)))
 (P2 NIL)
 (S '(0 0))
 (P1 '((LOAD ACL2::EGA))))

 -- ((A NIL) (P2 NIL) (S NIL) (P1 '((LOAD ACL2::ABAAABA))))
 -- ((A NIL) (P2 NIL) (S '(-4)) (P1 '((LOAD ACL2::|exO|))))

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S '(-3)) (P1 NIL))
 -- ((A '((ACL2::BA . -1))) (P2 NIL) (S '(1 0)) (P1 NIL))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (m (append p1 p2) a s)
	       :required-expressions (m p1 a s)
	       :with m)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM M (BINARY-APPEND P1 P2) A S)
  (((TRUE-LISTP P1))
   ((STACKP S))
   ((PROGRAMP (BINARY-APPEND P1 P2)))
   ((ASSIGNMENTP A))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 95 (95 unique)
satisfied the hypotheses, and found 95 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- 
((A '((ACL2::BABBAAA . -15)
      (ACL2::BA . -2)
      (ACL2::A . 0)))
 (P2 NIL)
 (S NIL)
 (P1 NIL))

 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))
 -- 
((A '((ACL2::ADBBB . 16)
      (ACL2::A . 0)
      (ACL2::BA . 0)))
 (P2 NIL)
 (S '(253))
 (P1 NIL))


Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '((ACL2::BABBAAA . -15)
                        (ACL2::BA . -2)
                        (ACL2::A . 0)))
                   (P2 NIL)
                   (S NIL)
                   (P1 NIL))
                  ((A NIL) (P2 NIL) (S NIL) (P1 NIL))
                  ((A '((ACL2::ADBBB . 16)
                        (ACL2::A . 0)
                        (ACL2::BA . 0)))
                   (P2 NIL)
                   (S '(253))
                   (P1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABBAAA) (ACL2S::INTERNAL-NUMBER (1) 1 1 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (1) 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) NIL)))) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ADBBB) (ACL2S::INTERNAL-NUMBER (0) 0 0 0 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (0))) NIL)))) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1 1 1 1) NIL)) (ACL2S::P1 NIL))) '(NIL NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 1 1 1 1 1) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::P1) (ACL2S::STACKP ACL2S::S) (ACL2S::PROGRAMP (BINARY-APPEND ACL2S::P1 ACL2S::P2)) (ACL2S::ASSIGNMENTP ACL2S::A)) (EQUAL (ACL2S::M (APPEND ACL2S::P1 ACL2S::P2) ACL2S::A ACL2S::S) (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 116 (116 unique)
satisfied the hypotheses, and found 0 counterexamples and 116 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '((ACL2::ABBAAAA . 1) (ACL2::BA . 0))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::AAAD . 0))) (P2 NIL) (S '(-14 4)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))

Itest? succeeded. No counterexamples were found.
 (NIL (:?))
ACL2S !>>Bye.
***********Beginning of Synthesis Output*****************
"We found the following potential theorem:" 
"" 

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(thm (IMPLIES (AND (TRUE-LISTP P1)
              (STACKP S)
              (PROGRAMP (BINARY-APPEND P1 P2))
              (ASSIGNMENTP A))
         (EQUAL (M (APPEND P1 P2) A S)
                (M P1 A S))))

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Perhaps we can prove *1 by induction.  Five induction schemes are suggested
by this conjecture.  Subsumption reduces that number to four.  These
merge into three derived induction schemes.  One of these has a score
higher than the others.  

We will induct according to a scheme suggested by (APPEND P1 P2). 
This suggestion was produced using the :induction rules BINARY-APPEND
and TRUE-LISTP.  If we let (:P A P1 P2 S) denote *1 above then the
induction scheme we'll use is
(AND (IMPLIES (AND (NOT (ENDP P1))
                   (:P A (CDR P1) P2 S))
              (:P A P1 P2 S))
     (IMPLIES (ENDP P1) (:P A P1 P2 S))).
This induction is justified by the same argument used to admit BINARY-APPEND.
When applied to the goal at hand the above induction scheme produces
four nontautological subgoals.
Subgoal *1/4

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Splitter note (see :DOC splitter) for Subgoal *1/4' (16 subgoals).
  if-intro: ((:DEFINITION EXECUTE-DEFINITION-RULE)
             (:DEFINITION INSTRP)
             (:DEFINITION LOAD-INSTRP)
             (:DEFINITION M-DEFINITION-RULE)
             (:DEFINITION PROGRAMP)
             (:DEFINITION PUSH-INSTRP)
             (:DEFINITION TOP-STACK-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP)
             (:REWRITE ACL2::|(* x (if a b c))|)
             (:REWRITE ACL2::|(+ x (if a b c))|)
             (:REWRITE ACL2::DEFAULT-PLUS-1)
             (:REWRITE ACL2::DEFAULT-PLUS-2)
             (:REWRITE ACL2::DEFAULT-TIMES-1)
             (:REWRITE ACL2::DEFAULT-TIMES-2))

Subgoal *1/4.16

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.
Subgoal *1/4.16'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.16''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.16'''

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.16'4'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.

Subgoal *1/4.16'5'

ACL2 Warning [Invariant-risk] in ACL2::TEST-CHECKPOINT:  Invariant-
risk has been detected for a call of function ACL2::TEST-CHECKPOINT
(as possibly leading to an ill-guarded call of CGEN::UI); see :DOC
invariant-risk.


Summary
Form:  ( THM ...)
Rules: ((:COMPOUND-RECOGNIZER ACL2::ASSIGNMENTP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER ACL2::PROGRAMP-IMPLIES-TLP)
        (:COMPOUND-RECOGNIZER ACL2::STACKP-IMPLIES-TLP)
        (:DEFINITION ADD-INSTRP)
        (:DEFINITION BINARY-APPEND)
        (:DEFINITION DUP-INSTRP)
        (:DEFINITION ENDP)
        (:DEFINITION EXECUTE-DEFINITION-RULE)
        (:DEFINITION INSTRP)
        (:DEFINITION LOAD-INSTRP)
        (:DEFINITION M-DEFINITION-RULE)
        (:DEFINITION MUL-INSTRP)
        (:DEFINITION NOT)
        (:DEFINITION POP-STACK-DEFINITION-RULE)
        (:DEFINITION PROGRAMP)
        (:DEFINITION PUSH-INSTRP)
        (:DEFINITION PUSH-STACK-DEFINITION-RULE)
        (:DEFINITION SYNP)
        (:DEFINITION TOP-STACK-DEFINITION-RULE)
        (:DEFINITION TRUE-LISTP)
        (:ELIM CAR-CDR-ELIM)
        (:EXECUTABLE-COUNTERPART ADD-INSTRP)
        (:EXECUTABLE-COUNTERPART CAR)
        (:EXECUTABLE-COUNTERPART CDR)
        (:EXECUTABLE-COUNTERPART CONSP)
        (:EXECUTABLE-COUNTERPART DUP-INSTRP)
        (:EXECUTABLE-COUNTERPART EQUAL)
        (:EXECUTABLE-COUNTERPART INSTRP)
        (:EXECUTABLE-COUNTERPART INTEGERP)
        (:EXECUTABLE-COUNTERPART LOAD-INSTRP)
        (:EXECUTABLE-COUNTERPART NOT)
        (:EXECUTABLE-COUNTERPART PUSH-INSTRP)
        (:EXECUTABLE-COUNTERPART PUSH-STACK)
        (:EXECUTABLE-COUNTERPART STACKP)
        (:EXECUTABLE-COUNTERPART SYMBOLP)
        (:FAKE-RUNE-FOR-TYPE-SET NIL)
        (:INDUCTION BINARY-APPEND)
        (:INDUCTION TRUE-LISTP)
        (:REWRITE ACL2::|(* x (if a b c))|)
        (:REWRITE ACL2::|(* y x)|)
        (:REWRITE ACL2::|(+ 0 x)|)
        (:REWRITE ACL2::|(+ x (if a b c))|)
        (:REWRITE ACL2::|(+ y x)|)
        (:REWRITE CAR-CONS)
        (:REWRITE CDR-CONS)
        (:REWRITE CDR-STACKP-SIG)
        (:REWRITE CONS-PROGRAMP-SIG)
        (:REWRITE ACL2::CONSP-UNDER-IFF-WHEN-TRUE-LISTP)
        (:REWRITE DEF=>INSTR)
        (:REWRITE ACL2::DEFAULT-PLUS-1)
        (:REWRITE ACL2::DEFAULT-PLUS-2)
        (:REWRITE ACL2::DEFAULT-TIMES-1)
        (:REWRITE ACL2::DEFAULT-TIMES-2)
        (:REWRITE ACL2::HOW-COULD-THIS-HAVE-BEEN-LEFT-OUT??)
        (:TYPE-PRESCRIPTION LOOKUPVAR-CONTRACT))
Splitter rules (see :DOC splitter):
  if-intro: ((:DEFINITION EXECUTE-DEFINITION-RULE)
             (:DEFINITION INSTRP)
             (:DEFINITION LOAD-INSTRP)
             (:DEFINITION M-DEFINITION-RULE)
             (:DEFINITION PROGRAMP)
             (:DEFINITION PUSH-INSTRP)
             (:DEFINITION TOP-STACK-DEFINITION-RULE)
             (:DEFINITION TRUE-LISTP)
             (:REWRITE ACL2::|(* x (if a b c))|)
             (:REWRITE ACL2::|(+ x (if a b c))|)
             (:REWRITE ACL2::DEFAULT-PLUS-1)
             (:REWRITE ACL2::DEFAULT-PLUS-2)
             (:REWRITE ACL2::DEFAULT-TIMES-1)
             (:REWRITE ACL2::DEFAULT-TIMES-2))
Warnings:  Invariant-risk
Time:  7.16 seconds (prove: 4.43, print: 0.00, other: 2.73)
Prover steps counted:  216306

---
The key checkpoint goals, below, may help you to debug this failure.
See :DOC failure and see :DOC set-checkpoint-summary-limit.
---

*** Key checkpoint at the top level: ***

Goal
(IMPLIES (AND (TRUE-LISTP P1)
              (STACKP S)
              (PROGRAMP (APPEND P1 P2))
              (ASSIGNMENTP A))
         (EQUAL (M (APPEND P1 P2) A S)
                (M P1 A S)))

*** Key checkpoint under a top-level induction: ***

Subgoal *1/4.16
(IMPLIES (AND P1
              (EQUAL (M (APPEND (CDR P1) P2) A S)
                     (M (CDR P1) A S))
              (CONSP P1)
              (TRUE-LISTP (CDR P1))
              (STACKP S)
              (CONSP (CAR P1))
              (EQUAL (CAR (CAR P1)) 'LOAD)
              (CONSP (CDR (CAR P1)))
              (SYMBOLP (CADR (CAR P1)))
              (NOT (CDDR (CAR P1)))
              (PROGRAMP (APPEND (CDR P1) P2))
              (ASSIGNMENTP A))
         (EQUAL (M (APPEND (CDR P1) P2)
                   A
                   (CONS (LOOKUPVAR (CADR (CAR P1)) A) S))
                (M P1 A S)))

ACL2 Error in ( THM ...):  See :DOC failure.

******** FAILED ********

**Summary of Cgen/testing**
We tested 2019 examples across 4 subgoals, of which 104 (104 unique)
satisfied the hypotheses, and found 3 counterexamples and 101 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "Subgoal *1/4.16'5'"]
(IMPLIES (AND (CONS (LIST 'LOAD P7) P4)
              (EQUAL (M BAD A S) (M P4 A S))
              (TRUE-LISTP P4)
              (STACKP S)
              (SYMBOLP P7)
              (PROGRAMP BAD)
              (ASSIGNMENTP A))
         (EQUAL (M BAD A (CONS (LOOKUPVAR P7 A) S))
                (M (CONS (LIST 'LOAD P7) P4) A S)))

 -- 
((A '((ACL2::BA . -1))) (P2 'ACL2::?) (S NIL) (P1 '((LOAD ACL2::FIL) 24 0)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- 
((A NIL) (P2 'ACL2::?) (S NIL) (P1 '((LOAD ACL2::|dne|) ACL2::A ACL2::BA)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.
 -- ((A NIL) (P2 'ACL2::?) (S NIL) (P1 '((LOAD ACL2::CHOW) 1)))
WARNING: The above counterexample is not consistent with top-level
form. This is most likely due to the application of an elim rule that
generalized its parent goal. If that is not what happened, then please
report this example to ACL2s authors.

Cases in which the conjecture is true include:
 [found in : "Goal"]
 -- 
((A '((ACL2::ABBAAAA . -3) (ACL2::BA . -1))) (P2 NIL) (S '(65 11)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::A . 0))) (P2 NIL) (S '(-15 -1)) (P1 NIL))

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(test? (IMPLIES (AND (TRUE-LISTP P1)
              (STACKP S)
              (PROGRAMP (BINARY-APPEND P1 P2))
              (ASSIGNMENTP A))
         (EQUAL (M (APPEND P1 P2) A S)
                (M P1 A S))))

*1 (the initial Goal, a key checkpoint) is pushed for proof by induction.

Normally we would attempt to prove *1 by induction.  However, a :DO-
NOT-INDUCT hint was supplied to abort the proof attempt.

**Summary of Cgen/testing**
We tested 1500 examples across 2 subgoals, of which 131 (131 unique)
satisfied the hypotheses, and found 0 counterexamples and 131 witnesses.

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A NIL) (P2 NIL) (S '(-236 3)) (P1 NIL))
 -- ((A '((ACL2::A . -1))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::CA . 3))) (P2 NIL) (S NIL) (P1 NIL))

Test? succeeded. No counterexamples were found.
ACL2S !>(suggest-lemma (m (append p1 p2) a s)
	       :required-expressions (m p1 a s) p2
	       :with m)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM M (BINARY-APPEND P1 P2) A S)
  (((TRUE-LISTP P1))
   ((STACKP S))
   ((PROGRAMP (BINARY-APPEND P1 P2)))
   ((ASSIGNMENTP A))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 139 (139 unique)
satisfied the hypotheses, and found 139 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A NIL) (P2 NIL) (S '(-1 0)) (P1 NIL))
 -- ((A '((ACL2::BABAAA . -3))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::BABAAA . 1))) (P2 NIL) (S '(-1)) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A NIL) (P2 NIL) (S '(-1 0)) (P1 NIL))
                  ((A '((ACL2::BABAAA . -3)))
                   (P2 NIL)
                   (S NIL)
                   (P1 NIL))
                  ((A '((ACL2::BABAAA . 1)))
                   (P2 NIL)
                   (S '(-1))
                   (P1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::P2) ACL2S::Q '(((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-NUMBER (1) 1 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-NUMBER (0) 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::P1 NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::P1) (ACL2S::STACKP ACL2S::S) (ACL2S::PROGRAMP (BINARY-APPEND ACL2S::P1 ACL2S::P2)) (ACL2S::ASSIGNMENTP ACL2S::A)) (EQUAL (ACL2S::M (APPEND ACL2S::P1 ACL2S::P2) ACL2S::A ACL2S::S) (ACL2S::M ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::S))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 87 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '((ACL2::A . 0) (ACL2::A . 0))) (P2 NIL) (S '(-1 0)) (P1 NIL))
 -- ((A '((ACL2::DDAC . -8))) (P2 NIL) (S '(245 3)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S '(-4)) (P1 NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '((ACL2::A . -1))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::ABBAAAA . -2) (ACL2::A . 0))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '((ACL2::A . 0) (ACL2::A . 0)))
                   (P2 NIL)
                   (S '(-1 0))
                   (P1 NIL))
                  ((A '((ACL2::DDAC . -8)))
                   (P2 NIL)
                   (S '(245 3))
                   (P1 NIL))
                  ((A NIL) (P2 NIL) (S '(-4)) (P1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::P2) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) NIL))) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DDAC) (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-NUMBER (1) 1 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-NUMBER (0) 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::P1 NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::P1) (ACL2S::STACKP ACL2S::S) (ACL2S::PROGRAMP (BINARY-APPEND ACL2S::P1 ACL2S::P2)) (ACL2S::ASSIGNMENTP ACL2S::A)) (EQUAL (ACL2S::M (APPEND ACL2S::P1 ACL2S::P2) ACL2S::A ACL2S::S) (ACL2S::M ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::S))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 180 examples across 1 subgoals, of which 11 (11 unique) satisfied
the hypotheses, and found 8 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '((ACL2::ABAB . -2))) (P2 NIL) (S '(14)) (P1 NIL))
 -- ((A '((ACL2::BABBAAA . -2))) (P2 NIL) (S '(-18 -2 -1)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S '(-9 2 -1)) (P1 NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '((ACL2::BABBAAA . 3))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::A . -1))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '((ACL2::ABAB . -2)))
                   (P2 NIL)
                   (S '(14))
                   (P1 NIL))
                  ((A '((ACL2::BABBAAA . -2)))
                   (P2 NIL)
                   (S '(-18 -2 -1))
                   (P1 NIL))
                  ((A NIL)
                   (P2 NIL)
                   (S '(-9 2 -1))
                   (P1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::P2) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABAB) (ACL2S::INTERNAL-NUMBER (1) 0 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABBAAA) (ACL2S::INTERNAL-NUMBER (1) 0 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) NIL))) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DDAC) (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-NUMBER (1) 1 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-NUMBER (0) 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::P1 NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::P1) (ACL2S::STACKP ACL2S::S) (ACL2S::PROGRAMP (BINARY-APPEND ACL2S::P1 ACL2S::P2)) (ACL2S::ASSIGNMENTP ACL2S::A)) (EQUAL (ACL2S::M (APPEND ACL2S::P1 ACL2S::P2) ACL2S::A ACL2S::S) (ACL2S::M ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::S))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 183 examples across 1 subgoals, of which 14 (14 unique) satisfied
the hypotheses, and found 11 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '((ACL2::BA . -1))) (P2 NIL) (S '(117 -4 -1)) (P1 NIL))
 -- ((A '((ACL2::A . -2))) (P2 NIL) (S '(-496 -13)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S '(-24)) (P1 NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '((ACL2::BBBD . 15) (ACL2::A . 0))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::ABA . 1))) (P2 NIL) (S NIL) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '((ACL2::BA . -1)))
                   (P2 NIL)
                   (S '(117 -4 -1))
                   (P1 NIL))
                  ((A '((ACL2::A . -2)))
                   (P2 NIL)
                   (S '(-496 -13))
                   (P1 NIL))
                  ((A NIL) (P2 NIL) (S '(-24)) (P1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '((ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::P2) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (1) 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (1) 0 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 0 1 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABAB) (ACL2S::INTERNAL-NUMBER (1) 0 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABBAAA) (ACL2S::INTERNAL-NUMBER (1) 0 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) NIL))) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DDAC) (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-NUMBER (1) 1 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BABAAA) (ACL2S::INTERNAL-NUMBER (0) 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::P1 NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 0 1 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 0 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 0 1 0 1 1 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) NIL (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::P1) (ACL2S::STACKP ACL2S::S) (ACL2S::PROGRAMP (BINARY-APPEND ACL2S::P1 ACL2S::P2)) (ACL2S::ASSIGNMENTP ACL2S::A)) (EQUAL (ACL2S::M (APPEND ACL2S::P1 ACL2S::P2) ACL2S::A ACL2S::S) (ACL2S::M ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::S))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 82 examples across 1 subgoals, of which 7 (7 unique) satisfied
the hypotheses, and found 4 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '((ACL2::BA . 0))) (P2 NIL) (S '(183 6)) (P1 NIL))
 -- ((A '((ACL2::BA . 0))) (P2 NIL) (S '(34 2)) (P1 NIL))
 -- 
((A '((ACL2::BAAAAB . 19) (ACL2::BBAA . 3))) (P2 NIL) (S '(-1)) (P1 NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '((ACL2::BBAA . -2))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::BA . 0))) (P2 NIL) (S NIL) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '((ACL2::BA . 0)))
                   (P2 NIL)
                   (S '(183 6))
                   (P1 NIL))
                  ((A '((ACL2::BA . 0)))
                   (P2 NIL)
                   (S '(34 2))
                   (P1 NIL))
                  ((A '((ACL2::BAAAAB . 19) (ACL2::BBAA . 3)))
                   (P2 NIL)
                   (S '(-1))
                   (P1 NIL))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>(suggest-lemma (m (append p1 p2) a s)
	       :required-expressions p2 (m p1 a s)
	       :with m)

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>> ((:TERM M (BINARY-APPEND P1 P2) A S)
  (((TRUE-LISTP P1))
   ((STACKP S))
   ((PROGRAMP (BINARY-APPEND P1 P2)))
   ((ASSIGNMENTP A))))
ACL2S !>>Bye.

ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
TTAG NOTE: Adding ttag :CGEN-TESTING-DRIVER-LOOP from the top level loop.

TTAG NOTE: Deferring one or more ttag notes until the current top-
level command completes.

**Summary of Cgen/testing**
We tested 1500 examples across 3 subgoals, of which 122 (122 unique)
satisfied the hypotheses, and found 122 counterexamples and 0 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A NIL) (P2 NIL) (S '(67)) (P1 NIL))
 -- ((A '((ACL2::ABBAAAA . 1) (ACL2::A . -1))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A NIL) (P2 NIL) (S '(67)) (P1 NIL))
                  ((A '((ACL2::ABBAAAA . 1) (ACL2::A . -1)))
                   (P2 NIL)
                   (S NIL)
                   (P1 NIL))
                  ((A NIL) (P2 NIL) (S NIL) (P1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S)) ACL2S::Q '(((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABBAAAA) (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (1) 1)) NIL))) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 1) NIL) NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::P1) (ACL2S::STACKP ACL2S::S) (ACL2S::PROGRAMP (BINARY-APPEND ACL2S::P1 ACL2S::P2)) (ACL2S::ASSIGNMENTP ACL2S::A)) (EQUAL (ACL2S::M (APPEND ACL2S::P1 ACL2S::P2) ACL2S::A ACL2S::S) (ACL2S::M ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::S))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 88 examples across 1 subgoals, of which 8 (8 unique) satisfied
the hypotheses, and found 3 counterexamples and 5 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '((ACL2::A . 0))) (P2 NIL) (S '(2)) (P1 NIL))
 -- 
((A '((ACL2::BBABAC . -51)
      (ACL2::BA . 3)
      (ACL2::BA . 0)))
 (P2 NIL)
 (S '(0))
 (P1 NIL))

 -- ((A '((ACL2::BBAA . -6))) (P2 NIL) (S '(-12 0 0)) (P1 NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '((ACL2::CCABA . -23) (ACL2::BA . 1))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::BA . 0))) (P2 NIL) (S NIL) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '((ACL2::A . 0)))
                   (P2 NIL)
                   (S '(2))
                   (P1 NIL))
                  ((A '((ACL2::BBABAC . -51)
                        (ACL2::BA . 3)
                        (ACL2::BA . 0)))
                   (P2 NIL)
                   (S '(0))
                   (P1 NIL))
                  ((A '((ACL2::BBAA . -6)))
                   (P2 NIL)
                   (S '(-12 0 0))
                   (P1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBABAC) (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (0))) NIL)))) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) (ACL2S::INTERNAL-NUMBER (1) 0 1 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABBAAAA) (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (1) 1)) NIL))) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 1) NIL) NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::P1) (ACL2S::STACKP ACL2S::S) (ACL2S::PROGRAMP (BINARY-APPEND ACL2S::P1 ACL2S::P2)) (ACL2S::ASSIGNMENTP ACL2S::A)) (EQUAL (ACL2S::M (APPEND ACL2S::P1 ACL2S::P2) ACL2S::A ACL2S::S) (ACL2S::M ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::S))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 144 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A '((ACL2::A . -1))) (P2 NIL) (S '(312 -6 -3 0)) (P1 NIL))
 -- 
((A '((ACL2::DBBABC . 22)
      (ACL2::BBAA . -1)
      (ACL2::A . 0)))
 (P2 NIL)
 (S '(12))
 (P1 NIL))

 -- ((A '((ACL2::BA . 0))) (P2 NIL) (S '(-183 12)) (P1 NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '((ACL2::BBABBAA . -17) (ACL2::A . -1))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::ABA . -18) (ACL2::BA . 0))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A '((ACL2::A . -1)))
                   (P2 NIL)
                   (S '(312 -6 -3 0))
                   (P1 NIL))
                  ((A '((ACL2::DBBABC . 22)
                        (ACL2::BBAA . -1)
                        (ACL2::A . 0)))
                   (P2 NIL)
                   (S '(12))
                   (P1 NIL))
                  ((A '((ACL2::BA . 0)))
                   (P2 NIL)
                   (S '(-183 12))
                   (P1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S)) ACL2S::Q '(((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (1) 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DBBABC) (ACL2S::INTERNAL-NUMBER (0) 0 1 1 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) (ACL2S::INTERNAL-NUMBER (1) 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) NIL)))) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (0))) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBABAC) (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (0))) NIL)))) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) (ACL2S::INTERNAL-NUMBER (1) 0 1 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABBAAAA) (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (1) 1)) NIL))) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 1) NIL) NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::P1) (ACL2S::STACKP ACL2S::S) (ACL2S::PROGRAMP (BINARY-APPEND ACL2S::P1 ACL2S::P2)) (ACL2S::ASSIGNMENTP ACL2S::A)) (EQUAL (ACL2S::M (APPEND ACL2S::P1 ACL2S::P2) ACL2S::A ACL2S::S) (ACL2S::M ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::S))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 175 examples across 1 subgoals, of which 18 (18 unique) satisfied
the hypotheses, and found 15 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A NIL) (P2 NIL) (S '(3 -1)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S '(6)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S '(-37 -1 -1)) (P1 NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '((ACL2::BA . 1) (ACL2::BA . 0))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::BA . -2) (ACL2::BA . 0))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A NIL) (P2 NIL) (S '(3 -1)) (P1 NIL))
                  ((A NIL) (P2 NIL) (S '(6)) (P1 NIL))
                  ((A NIL)
                   (P2 NIL)
                   (S '(-37 -1 -1))
                   (P1 NIL))))
ACL2S !>>Bye.

"testing:" 
(ACL2S::FIND-EQUIVALENT '(ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S)) ACL2S::Q '(((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (1) 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL DBBABC) (ACL2S::INTERNAL-NUMBER (0) 0 1 1 0 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) (ACL2S::INTERNAL-NUMBER (1) 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) NIL)))) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (0))) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) NIL))) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (0))) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBABAC) (ACL2S::INTERNAL-NUMBER (1) 1 1 0 0 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (0) 1 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BA) (ACL2S::INTERNAL-NUMBER (0))) NIL)))) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL BBAA) (ACL2S::INTERNAL-NUMBER (1) 0 1 1)) NIL)) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 1) NIL)) (ACL2S::P1 NIL)) ((ACL2S::A (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL ABBAAAA) (ACL2S::INTERNAL-NUMBER (0) 1)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-VARSYMBOL A) (ACL2S::INTERNAL-NUMBER (1) 1)) NIL))) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL)) ((ACL2S::A NIL) (ACL2S::P2 NIL) (ACL2S::S NIL) (ACL2S::P1 NIL))) '((ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 0 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 0 1 1 1 0 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL)))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 1 1 1 0 1 1 0 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 0 1 1) NIL)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 0 1) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (1) 0 0 1 1) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0)) NIL))) (ACL2S::INTERNAL-CONS (ACL2S::INTERNAL-NUMBER (0) 1 1 0 0 0 0 1) NIL) NIL NIL)) 
"form tested" 
(IMPLIES (AND (TRUE-LISTP ACL2S::P1) (ACL2S::STACKP ACL2S::S) (ACL2S::PROGRAMP (BINARY-APPEND ACL2S::P1 ACL2S::P2)) (ACL2S::ASSIGNMENTP ACL2S::A)) (EQUAL (ACL2S::M (APPEND ACL2S::P1 ACL2S::P2) ACL2S::A ACL2S::S) (ACL2S::M ACL2S::P2 (ACL2S::M ACL2S::P1 ACL2S::A ACL2S::S) ACL2S::S))) 
ACL2 Version 8.1.  Level 2.  Cbd "/Users/benboskin/lemmas/acl2s-raw/".
System books directory "/Users/benboskin/acl2/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2S !>>
**Summary of Cgen/testing**
We tested 118 examples across 1 subgoals, of which 6 (6 unique) satisfied
the hypotheses, and found 3 counterexamples and 3 witnesses.

We falsified the conjecture. Here are counterexamples:
 [found in : "top"]
 -- ((A NIL) (P2 NIL) (S '(0)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S '(-1 0)) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S '(2)) (P1 NIL))

Cases in which the conjecture is true include:
 [found in : "top"]
 -- ((A '((ACL2::ABA . -2))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A '((ACL2::A . -1))) (P2 NIL) (S NIL) (P1 NIL))
 -- ((A NIL) (P2 NIL) (S NIL) (P1 NIL))

Itest? found a counterexample.
 (T (:FALSIFIABLE ((A NIL) (P2 NIL) (S '(0)) (P1 NIL))
                  ((A NIL) (P2 NIL) (S '(-1 0)) (P1 NIL))
                  ((A NIL) (P2 NIL) (S '(2)) (P1 NIL))))
ACL2S !>>Bye.
("COULDN'T FIND A SOLUTION!"
     "Try adding more hypotheses, or giving extra hints")

TTAG NOTE: Printing of ttag notes has been deferred for the following
list of ttags:
  (:T :CGEN-TESTING-DRIVER-LOOP).
To print the deferred ttag notes:  (ACL2::SHOW-TTAG-NOTES).
ACL2S !>